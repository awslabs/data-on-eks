apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: spark-history-server
  namespace: argocd
  labels:
    blueprint: spark-on-eks
    category: analytics
    component: spark-history-server
  annotations:
    argocd.argoproj.io/sync-wave: "4"  # Deploy after Spark Operator
spec:
  project: data-platform
  source:
    repoURL: https://kubed-ai.github.io/spark-history-server
    chart: spark-history-server
    targetRevision: "1.5.1"
    helm:
      values: |
        sparkHistoryOpts: "-Dspark.history.fs.logDirectory=s3a://{{ .Values.s3BucketName }}/spark-event-logs"
        
        serviceAccount:
          create: false  # Managed by Pod Identity
          name: spark-history-server
        
        nodeSelector:
          node-type: spark-compute-optimized
        
        tolerations:
          - key: "spark.apache.org/node-type"
            operator: Equal
            value: "compute-optimized"
            effect: NoSchedule
        
        resources:
          requests:
            cpu: 200m
            memory: 1Gi
          limits:
            cpu: 500m
            memory: 2Gi
        
        service:
          type: ClusterIP
          port: 80
          targetPort: 18080
        
        ingress:
          enabled: false
          className: nginx
          hosts:
            - host: spark-history.{{ .Values.clusterName }}.local
              paths:
                - path: /
                  pathType: Prefix
        
        environment:
          SPARK_HISTORY_OPTS: "-Dspark.history.fs.logDirectory=s3a://{{ .Values.s3BucketName }}/spark-event-logs"
          SPARK_CONF_DIR: "/opt/spark/conf"
  
  destination:
    server: https://kubernetes.default.svc
    namespace: spark-history-server
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
      - ApplyOutOfSyncOnly=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  
  # Health checks
  healthChecks:
    - group: apps
      kind: Deployment
      check: |
        health_status = {}
        if obj.status ~= nil then
          if obj.status.readyReplicas ~= nil and obj.status.readyReplicas > 0 then
            health_status.status = "Healthy"
            health_status.message = "History server is ready"
            return health_status
          end
        end
        health_status.status = "Progressing"
        health_status.message = "History server is not ready"
        return health_status