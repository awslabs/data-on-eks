apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: karpenter-spark-nodepools
  namespace: argocd
  labels:
    blueprint: spark-on-eks
    category: infrastructure
    component: karpenter-nodepools
  annotations:
    argocd.argoproj.io/sync-wave: "2"  # Deploy after Karpenter operator
spec:
  project: data-platform
  source:
    repoURL: "{{ .Values.gitRepoUrl }}"
    path: blueprints/spark-on-eks/karpenter-resources
    targetRevision: "{{ .Values.gitRevision | default "HEAD" }}"
    directory:
      recurse: false
      include: "*.yaml"
      exclude: "kustomization.yaml"
  
  destination:
    server: https://kubernetes.default.svc
    namespace: karpenter
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
      - CreateNamespace=false  # Karpenter namespace created by operator
      - ServerSideApply=true
      - ApplyOutOfSyncOnly=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  
  # Health check configuration
  healthChecks:
    - group: karpenter.sh
      kind: NodePool
      check: |
        health_status = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" and condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "NodePool is ready"
                return health_status
              end
            end
          end
        end
        health_status.status = "Progressing"
        health_status.message = "NodePool is not ready"
        return health_status
    - group: karpenter.k8s.aws
      kind: EC2NodeClass
      check: |
        health_status = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" and condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "EC2NodeClass is ready"
                return health_status
              end
            end
          end
        end
        health_status.status = "Progressing"
        health_status.message = "EC2NodeClass is not ready"
        return health_status

---
# Application values for templating
apiVersion: v1
kind: ConfigMap
metadata:
  name: karpenter-spark-nodepools-values
  namespace: argocd
  labels:
    app.kubernetes.io/name: karpenter-spark-nodepools
    app.kubernetes.io/part-of: spark-on-eks
data:
  # These values will be populated by the terraform outputs
  clusterName: "{{ .Values.clusterName }}"
  clusterEndpoint: "{{ .Values.clusterEndpoint }}"
  clusterCA: "{{ .Values.clusterCA }}"
  region: "{{ .Values.region }}"
  karpenterNodeInstanceProfile: "{{ .Values.karpenterNodeInstanceProfile }}"
  environment: "{{ .Values.environment | default "dev" }}"