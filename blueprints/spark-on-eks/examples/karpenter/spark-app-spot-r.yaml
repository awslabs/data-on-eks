apiVersion: v1
kind: PersistentVolume
metadata:
  name: spark-s3-mount-spotr-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  mountOptions:
    - uid=1001
    - gid=185
    - allow-other
    - allow-delete
    - allow-overwrite
    # replace with S3 Directory bucket region from Terraform output
    - region <S3_DIRECTORY_BUCKET_REGION>
  csi:
    driver: s3.csi.aws.com # required
    volumeHandle: s3-csi-driver-volume
    volumeAttributes:
      # replace with S3 Directory bucket name from Terraform output
      bucketName: <S3_DIRECTORY_BUCKET_NAME>
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
          - key: topology.kubernetes.io/zone
            operator: In
            values:
            # replace with S3 Directory bucket availability zone from Terraform output
            - <S3_DIRECTORY_BUCKET_AZ>

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: spark-s3-mount-spotr-pvc
  namespace: spark-s3-express
spec:
  accessModes:
    - ReadWriteMany # supported options: ReadWriteMany / ReadOnlyMany
  storageClassName: "" # required for static provisioning
  resources:
    requests:
      storage: 5Gi # ignored, required
  volumeName: spark-s3-mount-spotr-pv
---
apiVersion: "sparkoperator.k8s.io/v1beta2"
kind: SparkApplication
metadata:
  name: "order-spot-r"
  namespace: spark-s3-express
  labels:
    app: "order-spot-r"
    applicationId: "order-ebs"
    queue: root.test
spec:

  type: Python
  sparkVersion: "3.2.1"
  pythonVersion: "3"
  mode: cluster
  image: "public.ecr.aws/data-on-eks/spark3.3.1-hadoop3.2-aws-java-sdk-bundle-1.12.647:latest"
  imagePullPolicy: IfNotPresent
  mainApplicationFile: "local:///data1/scripts/pyspark-order.py"
  arguments:
    - "/data1/order/input/"
    - "/data1/order/output/spotr/"
  hadoopConf:
    "fs.s3a.aws.credentials.provider": "com.amazonaws.auth.WebIdentityTokenCredentialsProvider"
    "fs.s3a.impl": "org.apache.hadoop.fs.s3a.S3AFileSystem"
    "mapreduce.fileoutputcommitter.algorithm.version": "2"
  sparkConf:
    "spark.app.name": "order-spot-r"
    "spark.kubernetes.driver.pod.name": "order-spot-r-driver"
    "spark.kubernetes.executor.podNamePrefix": "order-spot-r-executor"
    "spark.local.dir": "/data2"
    "spark.driver.extraJavaOptions": "-Divy.cache.dir=/tmp -Divy.home=/tmp"
    "spark.kubernetes.file.upload.path": "/data1/spark-upload"
    "spark.speculation": "false"
    "spark.network.timeout": "2400"
    "spark.hadoop.fs.s3a.connection.timeout": "1200000"
    "spark.hadoop.fs.s3a.path.style.access": "true"
    "spark.hadoop.fs.s3a.connection.maximum": "200"
    "spark.hadoop.fs.s3a.fast.upload": "true"
    "spark.hadoop.fs.s3a.readahead.range": "256K"
    "spark.hadoop.fs.s3a.input.fadvise": "random"
    "spark.hadoop.fs.s3a.impl": "org.apache.hadoop.fs.s3a.S3AFileSystem"

    # Spark Event logs
    "spark.eventLog.enabled": "true"
    "spark.eventLog.dir": "/data1/spark-event-logs"
    "spark.eventLog.rolling.enabled": "true"
    "spark.eventLog.rolling.maxFileSize": "64m"
#    "spark.history.fs.eventLog.rolling.maxFilesToRetain": 100

    # Expose Spark metrics for Prometheus
    "spark.ui.prometheus.enabled": "true"
    "spark.executor.processTreeMetrics.enabled": "true"
    "spark.kubernetes.driver.annotation.prometheus.io/scrape": "true"
    "spark.kubernetes.driver.annotation.prometheus.io/path": "/metrics/executors/prometheus/"
    "spark.kubernetes.driver.annotation.prometheus.io/port": "4040"
    "spark.kubernetes.driver.service.annotation.prometheus.io/scrape": "true"
    "spark.kubernetes.driver.service.annotation.prometheus.io/path": "/metrics/driver/prometheus/"
    "spark.kubernetes.driver.service.annotation.prometheus.io/port": "4040"
    "spark.kubernetes.driver.service.label.spark_role": "driver"
    "spark.kubernetes.executor.service.label.spark_role": "driver"
    "spark.metrics.conf.*.sink.prometheusServlet.class": "org.apache.spark.metrics.sink.PrometheusServlet"
    "spark.metrics.conf.*.sink.prometheusServlet.path": "/metrics/driver/prometheus/"
    "spark.metrics.conf.master.sink.prometheusServlet.path": "/metrics/master/prometheus/"
    "spark.metrics.conf.applications.sink.prometheusServlet.path": "/metrics/applications/prometheus/"

  restartPolicy:
    type: OnFailure
    onFailureRetries: 3
    onFailureRetryInterval: 10
    onSubmissionFailureRetries: 5
    onSubmissionFailureRetryInterval: 20
  volumes:
    - name: spark-s3-mount
      persistentVolumeClaim:
        claimName: spark-s3-mount-spotr-pvc
  driver:
    podSecurityContext:
      # runAsUser: 1000
      # runAsGroup: 2000
      fsGroup: 185
    volumeMounts:
      - mountPath: "/data1"
        name: "spark-s3-mount"
    initContainers:
      - name: volume-permissions
        image: nginx
        command: [ 'sh', '-c', 'mkdir -p /data1/spark-event-logs' ]
        volumeMounts:
          - mountPath: "/data1"
            name: "spark-s3-mount"
    cores: 2
    coreLimit: "4200m"
    memory: "4g"
    memoryOverhead: "2g"
    serviceAccount: spark-s3-express
    labels:
      version: 3.2.1
    nodeSelector:
      NodeGroupType: "SparkComputeOnDemand"
  executor:
    podSecurityContext:
      # runAsUser: 1000
      # runAsGroup: 2000
      fsGroup: 185
    volumeMounts:
      - mountPath: "/data1"
        name: "spark-s3-mount"
    initContainers:
      - name: volume-permissions
        image: nginx
        command: [ 'sh', '-c', 'mkdir -p /data1/spark-event-logs' ]
        volumeMounts:
          - mountPath: "/data1"
            name: "spark-s3-mount"
    cores: 2
    coreLimit: "2000m"
    instances: 4
    memory: "4g"
    memoryOverhead: "2g"
    serviceAccount: spark-s3-express
    labels:
      version: 3.2.1
    nodeSelector:
      NodeGroupType: "SparkComputeSpotR"
