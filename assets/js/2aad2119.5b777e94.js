"use strict";(self.webpackChunkdoeks_website=self.webpackChunkdoeks_website||[]).push([[858],{1863:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var s=i(4848),a=i(8453),t=i(2450);const o={title:"Stable Diffusion on Inferentia2",sidebar_position:5},r="Serving Stable Diffusion XL Base  Model with Inferentia, Ray Serve and Gradio",l={id:"gen-ai/inference/Neuron/stablediffusion-inf2",title:"Stable Diffusion on Inferentia2",description:"The AI on EKS content is being migrated to a new repository.",source:"@site/docs/gen-ai/inference/Neuron/stablediffusion-inf2.md",sourceDirName:"gen-ai/inference/Neuron",slug:"/gen-ai/inference/Neuron/stablediffusion-inf2",permalink:"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2",draft:!1,unlisted:!1,editUrl:"https://github.com/awslabs/data-on-eks/blob/main/website/docs/gen-ai/inference/Neuron/stablediffusion-inf2.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Stable Diffusion on Inferentia2",sidebar_position:5},sidebar:"genai",previous:{title:"Llama-2 on Inferentia2",permalink:"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2"},next:{title:"Ray Serve High Availability",permalink:"/data-on-eks/docs/gen-ai/inference/Neuron/rayserve-ha"}},d={},c=[{value:"What is Stable Diffusion?",id:"what-is-stable-diffusion",level:3},{value:"Stable Diffusion XL(SDXL)",id:"stable-diffusion-xlsdxl",level:4},{value:"Inference on Trn1/Inf2 Instances: Unlocking the Full Potential of Stable Diffusion LLMs",id:"inference-on-trn1inf2-instances-unlocking-the-full-potential-of-stable-diffusion-llms",level:2},{value:"Example usecase",id:"example-usecase",level:3},{value:"Solution Architecture",id:"solution-architecture",level:2},{value:"Deploying the Solution",id:"deploying-the-solution",level:2},{value:"Deploy",id:"deploy",level:3},{value:"Verify the resources",id:"verify-the-resources",level:3},{value:"Deploying the Ray Cluster with Stable Diffusion XL Model",id:"deploying-the-ray-cluster-with-stable-diffusion-xl-model",level:2},{value:"Deploy the Stable-Diffusion-xl-base-1-0 Model",id:"deploy-the-stable-diffusion-xl-base-1-0-model",level:3},{value:"To Test the Stable Diffusion XL Model",id:"to-test-the-stable-diffusion-xl-model",level:3},{value:"Deploying the Gradio WebUI App",id:"deploying-the-gradio-webui-app",level:2},{value:"Build the Gradio app docker container",id:"build-the-gradio-app-docker-container",level:3},{value:"Deploy the Gradio container",id:"deploy-the-gradio-container",level:3},{value:"Invoke the WebUI",id:"invoke-the-webui",level:4},{value:"Conclusion",id:"conclusion",level:2},{value:"Cleanup",id:"cleanup",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"AI on EKS"})," content ",(0,s.jsx)(n.strong,{children:"is being migrated"})," to a new repository.\n\ud83d\udd17 \ud83d\udc49 ",(0,s.jsx)(n.a,{href:"https://awslabs.github.io/data-on-eks/docs/migration/migration-announcement",children:"Read the full migration announcement \xbb"})]})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Deployment of ML models on EKS requires access to GPUs or Neuron instances. If your deployment isn't working, it\u2019s often due to missing access to these resources. Also, some deployment patterns rely on Karpenter autoscaling and static node groups; if nodes aren't initializing, check the logs for Karpenter or Node groups to resolve the issue."})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["This example blueprint deploys a ",(0,s.jsx)(n.code,{children:"stable-diffusion-xl-base-1-0"})," model on Inferentia2 instance running as a worker node in an EKS cluster. The model is served using ",(0,s.jsx)(n.code,{children:"RayServe"}),"."]})}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"serving-stable-diffusion-xl-base--model-with-inferentia-ray-serve-and-gradio",children:"Serving Stable Diffusion XL Base  Model with Inferentia, Ray Serve and Gradio"})}),"\n",(0,s.jsxs)(n.p,{children:["Welcome to the comprehensive guide on deploying the ",(0,s.jsx)(n.a,{href:"https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0",children:"Stable Diffusion XL Base"})," model on Amazon Elastic Kubernetes Service (EKS) using ",(0,s.jsx)(n.a,{href:"https://docs.ray.io/en/latest/serve/index.html",children:"Ray Serve"}),".\nIn this tutorial, you will not only learn how to harness the power of Stable Diffusion models, but also gain insights into the intricacies of deploying large language models (LLMs) efficiently, particularly on ",(0,s.jsx)(n.a,{href:"https://aws.amazon.com/machine-learning/neuron/",children:"trn1/inf2"})," (powered by AWS Trainium and Inferentia) instances, such as ",(0,s.jsx)(n.code,{children:"inf2.24xlarge"})," and ",(0,s.jsx)(n.code,{children:"inf2.48xlarge"}),",\nwhich are optimized for deploying and scaling large language models."]}),"\n",(0,s.jsx)(n.h3,{id:"what-is-stable-diffusion",children:"What is Stable Diffusion?"}),"\n",(0,s.jsx)(n.p,{children:"Stable Diffusion is a text-to-image model for creating stunning art within seconds. It is one of the largest and most powerful LLMs available today. It is primarily used to generate detailed images conditioned on text descriptions, though it can also be applied to other tasks such as inpainting, outpainting, and generating image-to-image translations guided by a text prompt."}),"\n",(0,s.jsx)(n.h4,{id:"stable-diffusion-xlsdxl",children:"Stable Diffusion XL(SDXL)"}),"\n",(0,s.jsx)(n.p,{children:"SDXL is a latent diffusion model for text-to-image synthesis. Compared to previous versions of Stable Diffusion, SDXL  uses pipelines for latent diffusion and noise reduction. SDXL also improves the quality of generated images compared to prior Stable Diffusion models by using a times larger UNet. The increase of model parameters is mainly due to more attention blocks and a larger cross-attention context as SDXL uses a second text encoder."}),"\n",(0,s.jsx)(n.p,{children:"SDXL has been designed with multiple novel conditioning schemes and trained on multiple aspect ratios. It also uses a refinement model which is used to improve the visual fidelity of samples generated by SDXL using a post-hoc image-to-image technique."}),"\n",(0,s.jsxs)(n.p,{children:["This process results in a highly capable and fine-tuned language model that we will guide you to deploy and utilize effectively on ",(0,s.jsx)(n.strong,{children:"Amazon EKS"})," with ",(0,s.jsx)(n.strong,{children:"Ray Serve"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"inference-on-trn1inf2-instances-unlocking-the-full-potential-of-stable-diffusion-llms",children:"Inference on Trn1/Inf2 Instances: Unlocking the Full Potential of Stable Diffusion LLMs"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Stable Diffusion XL"})," can be deployed on a variety of hardware platforms, each with its own set of advantages. However, when it comes to maximizing the efficiency, scalability, and cost-effectiveness of Stable Diffusion models, ",(0,s.jsx)(n.a,{href:"https://aws.amazon.com/ec2/instance-types/inf2/",children:"AWS Trn1/Inf2 instances"})," shine as the optimal choice."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Scalability and Availability"}),"\nOne of the key challenges in deploying large language models (",(0,s.jsx)(n.code,{children:"LLMs"}),") like StableDiffusion XL is the scalability and availability of suitable hardware. Traditional ",(0,s.jsx)(n.code,{children:"GPU"})," instances often face scarcity due to high demand, making it challenging to provision and scale resources effectively.\nIn contrast, ",(0,s.jsx)(n.code,{children:"Trn1/Inf2"})," instances, such as ",(0,s.jsx)(n.code,{children:"trn1.32xlarge"}),", ",(0,s.jsx)(n.code,{children:"trn1n.32xlarge"}),", ",(0,s.jsx)(n.code,{children:"inf2.24xlarge"})," and ",(0,s.jsx)(n.code,{children:"inf2.48xlarge"}),", are purpose built for high-performance deep learning (DL) training and inference of generative AI models, including LLMs. They offer both scalability and availability, ensuring that you can deploy and scale your ",(0,s.jsx)(n.code,{children:"Stable-diffusion-xl"})," models as needed, without resource bottlenecks or delays."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Cost Optimization:"}),"\nRunning LLMs on traditional GPU instances can be cost-prohibitive, especially given the scarcity of GPUs and their competitive pricing.\n",(0,s.jsx)(n.strong,{children:"Trn1/Inf2"})," instances provide a cost-effective alternative. By offering dedicated hardware optimized for AI and machine learning tasks, Trn1/Inf2 instances allow you to achieve top-notch performance at a fraction of the cost.\nThis cost optimization enables you to allocate your budget efficiently, making LLM deployment accessible and sustainable."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Performance Boost"}),"\nWhile Stable-Diffusion-xl can achieve high-performance inference on GPUs, Neuron accelerators take performance to the next level. Neuron accelerators are purpose-built for machine learning workloads, providing hardware acceleration that significantly enhances Stable-diffusion's inference speeds. This translates to faster response times and improved user experiences when deploying Stable-Diffusion-xl on Trn1/Inf2 instances."]}),"\n",(0,s.jsx)(n.h3,{id:"example-usecase",children:"Example usecase"}),"\n",(0,s.jsx)(n.p,{children:"A digital art company wants to deploy Stable-diffusion-xl powered image generator to help generate possible art based on prompts. Using a selection of textual prompts, users can create artwork, graphics and logos in a wide variety of styles. The image generator can be used to predict or fine-tune the art and can result in significant time saving in product iteration cycle. Company has a large customer base and wants the model to be scalable at high load. The company needs to design an infrastructure that can handle the high volume of requests and provide a fast response time."}),"\n",(0,s.jsx)(n.p,{children:"The company can use Inferentia2 instances to scale its Stable diffusion image generator efficiently. Inferentia2 instances are specialized hardware accelerators for machine learning tasks. They can provide up to 20x better performance and up to 7x lower cost than GPUs for machine learning workloads."}),"\n",(0,s.jsx)(n.p,{children:"The company can also use Ray Serve to horizontally scale its Stable diffusion image generator. Ray Serve is a distributed framework for serving machine learning models. It can automatically scale your models up or down based on demand."}),"\n",(0,s.jsx)(n.p,{children:"To scale its Stable diffusion image generator, the company can deploy multiple Inferentia2 instances and use Ray Serve to distribute the traffic across the instances. This will allow the company to handle a high volume of requests and provide a fast response time."}),"\n",(0,s.jsx)(n.h2,{id:"solution-architecture",children:"Solution Architecture"}),"\n",(0,s.jsxs)(n.p,{children:["In this section, we will delve into the architecture of our solution, which combines Stable diffusion xl model, ",(0,s.jsx)(n.a,{href:"https://docs.ray.io/en/latest/serve/index.html",children:"Ray Serve"})," and ",(0,s.jsx)(n.a,{href:"https://aws.amazon.com/ec2/instance-types/inf2/",children:"Inferentia2"})," on Amazon EKS."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Sdxl-inf2",src:i(7403).A+"",width:"2018",height:"1060"})}),"\n",(0,s.jsx)(n.h2,{id:"deploying-the-solution",children:"Deploying the Solution"}),"\n",(0,s.jsxs)(n.p,{children:["To get started with deploying ",(0,s.jsx)(n.code,{children:"stable-diffusion-xl-base-1-0"})," on ",(0,s.jsx)(n.a,{href:"https://aws.amazon.com/eks/",children:"Amazon EKS"}),", we will cover the necessary prerequisites and guide you through the deployment process step by step.\nThis includes setting up the infrastructure, deploying the ",(0,s.jsx)(n.strong,{children:"Ray cluster"}),", and creating the ",(0,s.jsx)(n.a,{href:"https://www.gradio.app/",children:"Gradio"})," WebUI app."]}),"\n",(0,s.jsxs)(t.A,{header:(0,s.jsx)(n.h2,{children:(0,s.jsx)(n.span,{children:"Prerequisites"})}),children:[(0,s.jsx)(n.p,{children:"Before we begin, ensure you have all the prerequisites in place to make the deployment process smooth and hassle-free.\nnsure that you have installed the following tools on your machine."}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html",children:"aws cli"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://Kubernetes.io/docs/tasks/tools/",children:"kubectl"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://learn.hashicorp.com/tutorials/terraform/install-cli",children:"terraform"})}),"\n"]}),(0,s.jsx)(n.h3,{id:"deploy",children:"Deploy"}),(0,s.jsx)(n.p,{children:"Clone the repository"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/awslabs/data-on-eks.git\n"})}),(0,s.jsxs)(n.p,{children:["Navigate into one of the example directories and run ",(0,s.jsx)(n.code,{children:"install.sh"})," script"]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Important Note:"})," Ensure that you update the region in the ",(0,s.jsx)(n.code,{children:"variables.tf"})," file before deploying the blueprint.\nAdditionally, confirm that your local region setting matches the specified region to prevent any discrepancies.\nFor example, set your ",(0,s.jsx)(n.code,{children:'export AWS_DEFAULT_REGION="<REGION>"'})," to the desired region:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd data-on-eks/ai-ml/trainium-inferentia/\n./install.sh\n"})}),(0,s.jsx)(n.h3,{id:"verify-the-resources",children:"Verify the resources"}),(0,s.jsx)(n.p,{children:"Verify the Amazon EKS Cluster"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"aws eks --region us-west-2 describe-cluster --name trainium-inferentia\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Creates k8s config file to authenticate with EKS\naws eks --region us-west-2 update-kubeconfig --name trainium-inferentia\n\nkubectl get nodes # Output shows the EKS Managed Node group nodes\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"deploying-the-ray-cluster-with-stable-diffusion-xl-model",children:"Deploying the Ray Cluster with Stable Diffusion XL Model"}),"\n",(0,s.jsxs)(n.p,{children:["Once the ",(0,s.jsx)(n.code,{children:"Trainium on EKS"})," Cluster is deployed, you can proceed to use ",(0,s.jsx)(n.code,{children:"kubectl"})," to deploy the ",(0,s.jsx)(n.code,{children:"ray-service-stablediffusion.yaml"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In this step, we will deploy the Ray Serve cluster, which comprises one ",(0,s.jsx)(n.code,{children:"Head Pod"})," on ",(0,s.jsx)(n.code,{children:"x86 CPU"})," instances using Karpenter autoscaling, as well as ",(0,s.jsx)(n.code,{children:"Ray workers"})," on ",(0,s.jsx)(n.code,{children:"Inf2.48xlarge"})," instances, autoscaled by ",(0,s.jsx)(n.a,{href:"https://karpenter.sh/",children:"Karpenter"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Let's take a closer look at the key files used in this deployment and understand their functionalities before proceeding with the deployment:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ray_serve_stablediffusion.py:"}),"\nThis script uses FastAPI, Ray Serve, and ",(0,s.jsx)(n.a,{href:"https://github.com/huggingface/optimum-neuron",children:"Hugging Face Optimum Neuron"})," library of tools to create an efficient text to image generator using the ",(0,s.jsx)(n.a,{href:"https://huggingface.co/aws-neuron/stable-diffusion-xl-base-1-0-1024x1024",children:"Neuronx model for stable-diffusion-xl-base-1.0"})," language model."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For this example blueprint, we are using a precompiled model that's been compiled to run on AWS Neuron. You can use any stable diffusion model of your choice and compile it to run on AWS Neuron before driving inference on it."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ray-service-stablediffusion.yaml:"}),"\nThis Ray Serve YAML file serves as a Kubernetes configuration for deploying the Ray Serve service, facilitating efficient text generation using the ",(0,s.jsx)(n.code,{children:"stable-diffusion-xl-base-1.0"})," model.\nIt defines a Kubernetes namespace named ",(0,s.jsx)(n.code,{children:"stablediffusion"})," to isolate resources. Within the configuration, the ",(0,s.jsx)(n.code,{children:"RayService"})," specification, named ",(0,s.jsx)(n.code,{children:"stablediffusion-service"}),", is created and hosted within the ",(0,s.jsx)(n.code,{children:"stablediffusion"})," namespace. The ",(0,s.jsx)(n.code,{children:"RayService"})," specification leverages the Python script ",(0,s.jsx)(n.code,{children:"ray_serve_stablediffusion.py"})," (copied into the Dockerfile located within the same folder) to create the Ray Serve service.\nThe Docker image used in this example is publicly available on Amazon Elastic Container Registry (ECR) for ease of deployment.\nUsers can also modify the Dockerfile to suit their specific requirements and push it to their own ECR repository, referencing it in the YAML file."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"deploy-the-stable-diffusion-xl-base-1-0-model",children:"Deploy the Stable-Diffusion-xl-base-1-0 Model"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ensure the cluster is configured locally"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"aws eks --region us-west-2 update-kubeconfig --name trainium-inferentia\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Deploy RayServe Cluster"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd data-on-eks/gen-ai/inference/stable-diffusion-xl-base-rayserve-inf2\nkubectl apply -f ray-service-stablediffusion.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:"Verify the deployment by running the following commands"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"The deployment process may take up to 10 minutes. The Head Pod is expected to be ready within 2 to 3 minutes, while the Ray Serve worker pod may take up to 10 minutes for image retrieval and Model deployment from Huggingface."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"$ kubectl get po -n stablediffusion -w\n\nNAME                                                      READY   STATUS     RESTARTS   AGE\nservice-raycluster-gc7gb-worker-inf2-worker-group-k2kf2   0/1     Init:0/1   0          7s\nstablediffusion-service-raycluster-gc7gb-head-6fqvv       1/1     Running    0          7s\n\nservice-raycluster-gc7gb-worker-inf2-worker-group-k2kf2   0/1     PodInitializing   0          9s\nservice-raycluster-gc7gb-worker-inf2-worker-group-k2kf2   1/1     Running           0          10s\nstablediffusion-service-raycluster-gc7gb-head-6fqvv       1/1     Running           0          53s\nservice-raycluster-gc7gb-worker-inf2-worker-group-k2kf2   1/1     Running           0          53s\n"})}),"\n",(0,s.jsx)(n.p,{children:"Also check the service and ingress resources that got created"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"kubectl get svc -n stablediffusion\n\nNAME                                TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                                       AGE\nstablediffusion-service             NodePort   172.20.175.61    <none>        6379:32190/TCP,8265:32375/TCP,10001:32117/TCP,8000:30770/TCP,52365:30334/TCP,8080:30094/TCP   16h\nstablediffusion-service-head-svc    NodePort   172.20.193.225   <none>        6379:32228/TCP,8265:30215/TCP,10001:30767/TCP,8000:31482/TCP,52365:30170/TCP,8080:31584/TCP   16h\nstablediffusion-service-serve-svc   NodePort   172.20.15.224    <none>        8000:30982/TCP                                                                                16h\n\n\n$ kubectl get ingress -n stablediffusion\n\nNAME                      CLASS   HOSTS   ADDRESS                                                                         PORTS   AGE\nstablediffusion-ingress   nginx   *       k8s-ingressn-ingressn-7f3f4b475b-1b8966c0b8f4d3da.elb.us-west-2.amazonaws.com   80      16h\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now, you can access the Ray Dashboard from the Load balancer URL below."}),"\n",(0,s.jsx)(n.p,{children:"http://<NLB_DNS_NAME>/dashboard/#/serve"}),"\n",(0,s.jsx)(n.p,{children:"If you don't have access to a public Load Balancer, you can use port-forwarding and browse the Ray Dashboard using localhost with the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl port-forward svc/stablediffusion-service 8265:8265 -n stablediffusion\n\n# Open the link in the browser\nhttp://localhost:8265/\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"From this webpage, you will be able to monitor the progress of Model deployment, as shown in the image below:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Ray Dashboard",src:i(5149).A+"",width:"1730",height:"893"})}),"\n",(0,s.jsx)(n.h3,{id:"to-test-the-stable-diffusion-xl-model",children:"To Test the Stable Diffusion XL Model"}),"\n",(0,s.jsxs)(n.p,{children:["Once you've verified that the Stable Diffusion model deployment status has switched to a ",(0,s.jsx)(n.code,{children:"running"})," state in Ray Dashboard , you're all set to start leveraging the model. This change in status signifies that the Stable Diffusion model is now fully functional and prepared to handle your image generation requests based on textual descriptions.\""]}),"\n",(0,s.jsx)(n.p,{children:"You can use the following URL with a query added at the end of the URL."}),"\n",(0,s.jsx)(n.p,{children:"http://<NLB_DNS_NAME>/serve/imagine?prompt=an astronaut is dancing on green grass, sunlit"}),"\n",(0,s.jsx)(n.p,{children:"You will see an output like this in your browser:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Prompt Output",src:i(4165).A+"",width:"1164",height:"742"})}),"\n",(0,s.jsx)(n.h2,{id:"deploying-the-gradio-webui-app",children:"Deploying the Gradio WebUI App"}),"\n",(0,s.jsxs)(n.p,{children:["Discover how to create a user-friendly chat interface using ",(0,s.jsx)(n.a,{href:"https://www.gradio.app/",children:"Gradio"})," that integrates seamlessly with deployed models."]}),"\n",(0,s.jsx)(n.p,{children:"Let's move forward with setting up the Gradio app as a Docker container running on localhost. This setup will enable interaction with the Stable Diffusion XL model, which is deployed using RayServe."}),"\n",(0,s.jsx)(n.h3,{id:"build-the-gradio-app-docker-container",children:"Build the Gradio app docker container"}),"\n",(0,s.jsx)(n.p,{children:"First, lets build the docker container for the client app."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'cd data-on-eks/gen-ai/inference/gradio-ui\ndocker build --platform=linux/amd64 \\\n    -t gradio-app:sd \\\n    --build-arg GRADIO_APP="gradio-app-stable-diffusion.py" \\\n    .\n'})}),"\n",(0,s.jsx)(n.h3,{id:"deploy-the-gradio-container",children:"Deploy the Gradio container"}),"\n",(0,s.jsx)(n.p,{children:"Deploy the Gradio app as a container on localhost using docker:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker run --rm -it -p 7860:7860 -p 8000:8000 gradio-app:sd\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["If you are not running Docker Desktop on your machine and using something like ",(0,s.jsx)(n.a,{href:"https://runfinch.com/",children:"finch"})," instead then you will need to additional flags for a custom host-to-IP mapping inside the container."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'docker run --rm -it \\\n    --add-host ray-service:<workstation-ip> \\\n    -e "SERVICE_NAME=http://ray-service:8000" \\\n    -p 7860:7860 gradio-app:sd\n'})})]}),"\n",(0,s.jsx)(n.h4,{id:"invoke-the-webui",children:"Invoke the WebUI"}),"\n",(0,s.jsx)(n.p,{children:"Open your web browser and access the Gradio WebUI by navigating to the following URL:"}),"\n",(0,s.jsxs)(n.p,{children:["Running on local URL:  ",(0,s.jsx)(n.a,{href:"http://localhost:7860",children:"http://localhost:7860"})]}),"\n",(0,s.jsx)(n.p,{children:"You should now be able to interact with the Gradio application from your local machine."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Gradio Output",src:i(6445).A+"",width:"979",height:"488"})}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(n.p,{children:["In conclusion, you will have successfully deployed the ",(0,s.jsx)(n.strong,{children:"Stable-diffusion-xl-base"})," model on EKS with Ray Serve and created a prompt based web UI using Gradio.\nThis opens up exciting possibilities for natural language processing and prompt based image generator and image predictor development."]}),"\n",(0,s.jsx)(n.p,{children:"In summary, when it comes to deploying and scaling Stable diffusion models, AWS Trn1/Inf2 instances offer a compelling advantage.\nThey provide the scalability, cost optimization, and performance boost needed to make running large language models efficient and accessible, all while overcoming the challenges associated with the scarcity of GPUs.\nWhether you're building text-to-image generators, image-to-image generators or any other LLM-driven solution, Trn1/Inf2 instances empower you to harness the full potential of Stable Diffusion LLMs on the AWS cloud."}),"\n",(0,s.jsx)(n.h2,{id:"cleanup",children:"Cleanup"}),"\n",(0,s.jsx)(n.p,{children:"Finally, we'll provide instructions for cleaning up and deprovisioning the resources when they are no longer needed."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Step1:"})," Delete Gradio Container"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Ctrl-c"})," on the localhost terminal window where ",(0,s.jsx)(n.code,{children:"docker run"})," is running to kill the container running the Gradio app. Optionally clean up the docker image"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker rmi gradio-app:sd\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Step2:"})," Delete Ray Cluster"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd data-on-eks/gen-ai/inference/stable-diffusion-xl-base-rayserve-inf2\nkubectl delete -f ray-service-stablediffusion.yaml\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Step3:"})," Cleanup the EKS Cluster\nThis script will cleanup the environment using ",(0,s.jsx)(n.code,{children:"-target"})," option to ensure all the resources are deleted in correct order."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd data-on-eks/ai-ml/trainium-inferentia/\n./cleanup.sh\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},2450:(e,n,i)=>{i.d(n,{A:()=>p});var s=i(6540),a=i(5556),t=i.n(a),o=i(4164);const r="collapsibleContent_q3kw",l="header_QCEw",d="icon_PckA",c="content_qLC1",h="expanded_iGsi";var u=i(4848);function f(e){let{children:n,header:i}=e;const[a,t]=(0,s.useState)(!1);return(0,u.jsxs)("div",{className:r,children:[(0,u.jsxs)("div",{className:(0,o.A)(l,{[h]:a}),onClick:()=>{t(!a)},children:[i,(0,u.jsx)("span",{className:(0,o.A)(d,{[h]:a}),children:a?"\ud83d\udc47":"\ud83d\udc48"})]}),a&&(0,u.jsx)("div",{className:c,children:n})]})}f.propTypes={children:t().node.isRequired,header:t().node.isRequired};const p=f},7403:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/excali-draw-sdxl-inf2-41ed1999a8a1b88197923df83d0c1af7.png"},5149:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/ray-dashboard-sdxl-51432dea23c6c3c166120668cc16ae9d.png"},6445:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/stable-diffusion-xl-gradio-85bc04fb75c2c78e2a2ab1a3eadbd078.png"},4165:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/stable-diffusion-xl-prompt_3-b8210e7d3458390ad4d840ad2f1532fe.png"},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var s=i(6540);const a={},t=s.createContext(a);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);