"use strict";(self.webpackChunkdoeks_website=self.webpackChunkdoeks_website||[]).push([["3195"],{68644:function(e){e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"blueprints":[{"type":"category","label":"Data Analytics on EKS","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/data-on-eks/docs/blueprints/data-analytics/","docId":"blueprints/data-analytics/index","unlisted":false},{"type":"link","label":"Spark Operator with YuniKorn","href":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-yunikorn","docId":"blueprints/data-analytics/spark-operator-yunikorn","unlisted":false},{"type":"link","label":"Spark Operator on EKS with IPv6","href":"/data-on-eks/docs/blueprints/data-analytics/spark-eks-ipv6","docId":"blueprints/data-analytics/spark-eks-ipv6","unlisted":false},{"type":"link","label":"S3 Tables with EKS","href":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables","docId":"blueprints/data-analytics/spark-operator-s3tables","unlisted":false},{"type":"link","label":"Spark Observability on EKS","href":"/data-on-eks/docs/blueprints/data-analytics/observability-spark-on-eks","docId":"blueprints/data-analytics/observability-spark-on-eks","unlisted":false},{"type":"link","label":"DataHub on EKS","href":"/data-on-eks/docs/blueprints/data-analytics/datahub-on-eks","docId":"blueprints/data-analytics/datahub-on-eks","unlisted":false},{"type":"link","label":"Ray Data on EKS","href":"/data-on-eks/docs/blueprints/data-analytics/ray-data-processing","docId":"blueprints/data-analytics/ray-data-processing","unlisted":false},{"type":"link","label":"Superset on EKS","href":"/data-on-eks/docs/blueprints/data-analytics/superset-on-eks","docId":"blueprints/data-analytics/superset-on-eks","unlisted":false}],"href":"/data-on-eks/docs/category/data-analytics-on-eks"},{"type":"category","label":"Amazon EMR on EKS","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/","docId":"blueprints/amazon-emr-on-eks/index","unlisted":false},{"type":"link","label":"EMR on EKS with Karpenter","href":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-karpenter","docId":"blueprints/amazon-emr-on-eks/emr-eks-karpenter","unlisted":false},{"type":"link","label":"EMR Runtime with Spark Operator","href":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-spark-operator","docId":"blueprints/amazon-emr-on-eks/emr-eks-spark-operator","unlisted":false},{"type":"link","label":"EMR NVIDIA Spark-RAPIDS","href":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-spark-rapids","docId":"blueprints/amazon-emr-on-eks/emr-spark-rapids","unlisted":false},{"type":"link","label":"EMR on EKS Observability","href":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-observability","docId":"blueprints/amazon-emr-on-eks/emr-eks-observability","unlisted":false}],"href":"/data-on-eks/docs/category/amazon-emr-on-eks"},{"type":"category","label":"Streaming Platforms on EKS","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/data-on-eks/docs/blueprints/streaming-platforms/","docId":"blueprints/streaming-platforms/index","unlisted":false},{"type":"link","label":"EMR on EKS with Spark Streaming","href":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream","docId":"blueprints/streaming-platforms/emr-eks-stream","unlisted":false},{"type":"link","label":"EMR on EKS with Flink Streaming","href":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-flink","docId":"blueprints/streaming-platforms/emr-eks-flink","unlisted":false},{"type":"link","label":"Flink Operator on EKS","href":"/data-on-eks/docs/blueprints/streaming-platforms/flink","docId":"blueprints/streaming-platforms/flink","unlisted":false},{"type":"link","label":"Kafka on EKS","href":"/data-on-eks/docs/blueprints/streaming-platforms/kafka","docId":"blueprints/streaming-platforms/kafka","unlisted":false},{"type":"link","label":"Apache NiFi on EKS","href":"/data-on-eks/docs/blueprints/streaming-platforms/nifi","docId":"blueprints/streaming-platforms/nifi","unlisted":false},{"type":"link","label":"Spark Streaming from Kafka in EKS","href":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming","docId":"blueprints/streaming-platforms/spark-streaming","unlisted":false}],"href":"/data-on-eks/docs/category/streaming-platforms-on-eks"},{"type":"category","label":"Job Schedulers on EKS","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/data-on-eks/docs/blueprints/job-schedulers/","docId":"blueprints/job-schedulers/index","unlisted":false},{"type":"link","label":"Amazon MWAA","href":"/data-on-eks/docs/blueprints/job-schedulers/aws-managed-airflow","docId":"blueprints/job-schedulers/aws-managed-airflow","unlisted":false},{"type":"link","label":"Airflow on EKS","href":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow","docId":"blueprints/job-schedulers/self-managed-airflow","unlisted":false},{"type":"link","label":"Argo Workflows on EKS","href":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks","docId":"blueprints/job-schedulers/argo-workflows-eks","unlisted":false},{"type":"link","label":"AWS Batch on EKS","href":"/data-on-eks/docs/blueprints/job-schedulers/aws-batch","docId":"blueprints/job-schedulers/aws-batch","unlisted":false}],"href":"/data-on-eks/docs/category/job-schedulers-on-eks"},{"type":"category","label":"Distributed Databases on EKS","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/data-on-eks/docs/blueprints/distributed-databases/","docId":"blueprints/distributed-databases/index","unlisted":false},{"type":"link","label":"CloudNativePG PostgreSQL","href":"/data-on-eks/docs/blueprints/distributed-databases/cloudnative-postgres","docId":"blueprints/distributed-databases/cloudnative-postgres","unlisted":false},{"type":"link","label":"Apache Pinot","href":"/data-on-eks/docs/blueprints/distributed-databases/pinot","docId":"blueprints/distributed-databases/pinot","unlisted":false},{"type":"link","label":"Trino on EKS","href":"/data-on-eks/docs/blueprints/distributed-databases/trino","docId":"blueprints/distributed-databases/trino","unlisted":false},{"type":"link","label":"ClickHouse","href":"/data-on-eks/docs/blueprints/distributed-databases/clickhouse","docId":"blueprints/distributed-databases/clickhouse","unlisted":false},{"type":"link","label":"Aerospike","href":"/data-on-eks/docs/blueprints/distributed-databases/aerospike","docId":"blueprints/distributed-databases/aerospike","unlisted":false}],"href":"/data-on-eks/docs/category/distributed-databases-on-eks"},{"type":"link","label":"Troubleshooting","href":"/data-on-eks/docs/blueprints/troubleshooting/","docId":"blueprints/troubleshooting/troubleshooting","unlisted":false}],"bestpractices":[{"type":"link","label":"Introduction","href":"/data-on-eks/docs/bestpractices/intro","docId":"bestpractices/intro","unlisted":false},{"type":"link","label":"EKS Best Practices","href":"/data-on-eks/docs/bestpractices/eks-best-practices/","docId":"bestpractices/eks-best-practices/eks-best-practices","unlisted":false},{"type":"category","label":"Data Analytics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Trino on EKS Best Practices","href":"/data-on-eks/docs/bestpractices/analytics/trino-best-practices","docId":"bestpractices/analytics/trino-best-practices","unlisted":false},{"type":"link","label":"EMR on EKS Best Practices","href":"/data-on-eks/docs/bestpractices/analytics/emr-on-eks","docId":"bestpractices/analytics/emr-on-eks","unlisted":false},{"type":"link","label":"Spark on EKS Best Practices","href":"/data-on-eks/docs/bestpractices/analytics/spark-best-practices","docId":"bestpractices/analytics/spark-best-practices","unlisted":false}],"href":"/data-on-eks/docs/category/data-analytics"},{"type":"category","label":"Networking","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"VPC Configuration","href":"/data-on-eks/docs/bestpractices/networking/","docId":"bestpractices/networking/networking","unlisted":false}],"href":"/data-on-eks/docs/category/networking"},{"type":"category","label":"Scalability","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Preload Container Images","href":"/data-on-eks/docs/bestpractices/scalability/preload-container-images","docId":"bestpractices/scalability/preload-container-images","unlisted":false}],"href":"/data-on-eks/docs/category/scalability"}],"benchmarks":[{"type":"link","label":"EMR on EKS Benchmarks","href":"/data-on-eks/docs/benchmarks/emr-on-eks","docId":"benchmarks/emr-on-eks","unlisted":false},{"type":"category","label":"Spark Benchmarks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction to Spark Benchmarks","href":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/spark-operator-eks-benchmark","docId":"benchmarks/spark-operator-benchmark/spark-operator-eks-benchmark","unlisted":false},{"type":"link","label":"Data Generation","href":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/data-generation","docId":"benchmarks/spark-operator-benchmark/data-generation","unlisted":false},{"type":"link","label":"Running the Benchmarks","href":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/running-the-benchmark","docId":"benchmarks/spark-operator-benchmark/running-the-benchmark","unlisted":false},{"type":"link","label":"Gravtion R-series Results","href":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/graviton-r-data","docId":"benchmarks/spark-operator-benchmark/graviton-r-data","unlisted":false}],"href":"/data-on-eks/docs/category/spark-benchmarks"},{"type":"link","label":"Kubeflow Spark Operator Benchmarks","href":"/data-on-eks/docs/benchmarks/spark-operator-eks-benchmark","docId":"benchmarks/spark-operator-eks-benchmark","unlisted":false}],"resources":[{"type":"link","label":"Introduction","href":"/data-on-eks/docs/resources/intro","docId":"resources/intro","unlisted":false},{"type":"link","label":"Mounpoint-S3 on EKS","href":"/data-on-eks/docs/resources/mountpoint-s3","docId":"resources/mountpoint-s3","unlisted":false},{"type":"link","label":"Mounpoint-S3 for Spark Workloads","href":"/data-on-eks/docs/resources/mountpoint-s3-for-spark","docId":"resources/mountpoint-s3-for-spark","unlisted":false},{"type":"link","label":"Bin packing for Amazon EKS","href":"/data-on-eks/docs/resources/binpacking-custom-scheduler-eks","docId":"resources/binpacking-custom-scheduler-eks","unlisted":false}]},"docs":{"benchmarks/emr-on-eks":{"id":"benchmarks/emr-on-eks","title":"Amazon EMR on Amazon EKS provides up to 61% lower costs and up to 68% performance improvement for Spark workloads","description":"Amazon EMR on Amazon EKS is a deployment option offered by Amazon EMR that enables you to run Apache Spark applications on Amazon Elastic Kubernetes Service (Amazon EKS) in a cost-effective manner. It uses the EMR runtime for Apache Spark to increase performance so that your jobs run faster and cost less.","sidebar":"benchmarks"},"benchmarks/spark-operator-benchmark/data-generation":{"id":"benchmarks/spark-operator-benchmark/data-generation","title":"Data Generation for Running Spark Benchmark Tests on Amazon EKS","description":"The following guide provides instructions on how to generate the data set for running the TPCDS benchmark tests for Spark.","sidebar":"benchmarks"},"benchmarks/spark-operator-benchmark/graviton-r-data":{"id":"benchmarks/spark-operator-benchmark/graviton-r-data","title":"TPCDS Spark Benchmark Results for Graviton R6g, R7g, and R8g","description":"This page has the results of our benchmarking tests on R-series Graviton instances, demonstrating up to a 1.6x faster runtime on newer generation instances.","sidebar":"benchmarks"},"benchmarks/spark-operator-benchmark/running-the-benchmark":{"id":"benchmarks/spark-operator-benchmark/running-the-benchmark","title":"Running Spark Benchmark Tests on Amazon EKS","description":"The following guide provides instructions on how to execute the TPCDS benchmark tests for Spark.","sidebar":"benchmarks"},"benchmarks/spark-operator-benchmark/spark-operator-eks-benchmark":{"id":"benchmarks/spark-operator-benchmark/spark-operator-eks-benchmark","title":"Introduction to Spark Benchmarks on Amazon EKS \uD83D\uDE80","description":"This guide walks you through running Apache Spark benchmark tests on Amazon EKS, AWS\'s managed Kubernetes service. Benchmark tests help evaluate and optimize Spark workloads on EKS comparing benchmark results run across different EC2 instance families of Graviton instances, especially when scaling for performance, cost efficiency, and reliability.","sidebar":"benchmarks"},"benchmarks/spark-operator-eks-benchmark":{"id":"benchmarks/spark-operator-eks-benchmark","title":"Kubeflow Spark Operator Benchmarks \uD83D\uDE80","description":"This document serves as a comprehensive guide for conducting a scale test for the Kubeflow Spark Operator on Amazon EKS. The primary objective is to evaluate the performance, scalability, and stability of the Spark Operator under heavy workloads by submitting thousands of jobs and analyzing its behavior under stress.","sidebar":"benchmarks"},"bestpractices/analytics/emr-on-eks":{"id":"bestpractices/analytics/emr-on-eks","title":"EMR on EKS Best Practices","description":"EMR Containers Best Practices Guides","sidebar":"bestpractices"},"bestpractices/analytics/spark-best-practices":{"id":"bestpractices/analytics/spark-best-practices","title":"Spark on EKS Best Practices","description":"This page aims to provide comprehensive best practices and guidelines for deploying, managing, and optimizing Apache Spark workloads on Amazon Elastic Kubernetes Service (EKS). This helps organizations to successfully run and scale their Spark Applications at scale in a containerised environment on Amazon EKS.","sidebar":"bestpractices"},"bestpractices/analytics/trino-best-practices":{"id":"bestpractices/analytics/trino-best-practices","title":"Trino on EKS Best Practices","description":"Trino deployment on Amazon Elastic Kubernetes Service (EKS) delivers distributed query processing with cloud-native scalability. Organizations can optimize costs by selecting specific compute instances and storage solutions that match their workload requirements while they  combine the power of Trino with the scalability and flexibility of EKS using Karpenter.","sidebar":"bestpractices"},"bestpractices/eks-best-practices/eks-best-practices":{"id":"bestpractices/eks-best-practices/eks-best-practices","title":"EKS Best Practices","description":"EKS Best Practices Guides","sidebar":"bestpractices"},"bestpractices/intro":{"id":"bestpractices/intro","title":"Introduction","description":"COMING SOON","sidebar":"bestpractices"},"bestpractices/networking/networking":{"id":"bestpractices/networking/networking","title":"Networking for Data","description":"VPC and IP Considerations","sidebar":"bestpractices"},"bestpractices/scalability/preload-container-images":{"id":"bestpractices/scalability/preload-container-images","title":"Preload container images into data volumes with EBS Snapshots","description":"The purpose of this pattern is to reduce the cold start time of containers with large images by caching the images in the data volume of Bottlerocket OS.","sidebar":"bestpractices"},"blueprints/amazon-emr-on-eks/emr-eks-karpenter":{"id":"blueprints/amazon-emr-on-eks/emr-eks-karpenter","title":"EMR on EKS with [Karpenter](https://karpenter.sh/)","description":"Introduction","sidebar":"blueprints"},"blueprints/amazon-emr-on-eks/emr-eks-observability":{"id":"blueprints/amazon-emr-on-eks/emr-eks-observability","title":"EMR on EKS Observability","description":"Monitoring Amazon EMR on EKS with Amazon Managed Prometheus and Amazon Managed Grafana","sidebar":"blueprints"},"blueprints/amazon-emr-on-eks/emr-eks-spark-operator":{"id":"blueprints/amazon-emr-on-eks/emr-eks-spark-operator","title":"EMR Runtime with Spark Operator","description":"Introduction","sidebar":"blueprints"},"blueprints/amazon-emr-on-eks/emr-spark-rapids":{"id":"blueprints/amazon-emr-on-eks/emr-spark-rapids","title":"EMR on EKS NVIDIA RAPIDS Accelerator for Apache Spark","description":"The NVIDIA RAPIDS Accelerator for Apache Spark is a powerful tool that builds on the capabilities of NVIDIA CUDA\xae - a transformative parallel computing platform designed for enhancing computational processes on NVIDIA\'s GPU architecture. RAPIDS, a project developed by NVIDIA, comprises a suite of open-source libraries that are hinged upon CUDA, thereby enabling GPU-accelerated data science workflows.","sidebar":"blueprints"},"blueprints/amazon-emr-on-eks/index":{"id":"blueprints/amazon-emr-on-eks/index","title":"Amazon EMR on EKS","description":"Amazon EMR on EKS enables you to submit Apache Spark jobs on-demand on Amazon Elastic Kubernetes Service (EKS) clusters. With EMR on EKS, you can consolidate analytical workloads with your other Kubernetes-based applications on the same Amazon EKS cluster to improve resource utilization and simplify infrastructure management.","sidebar":"blueprints"},"blueprints/data-analytics/datahub-on-eks":{"id":"blueprints/data-analytics/datahub-on-eks","title":"DataHub on EKS","description":"Introduction","sidebar":"blueprints"},"blueprints/data-analytics/index":{"id":"blueprints/data-analytics/index","title":"Data Analytics on EKS","description":"Running data analytics tools on Kubernetes can provide a number of benefits for organizations looking to extract insights from large and complex data sets. Tools such as Apache Spark and DASK are designed to run on a cluster of machines, making them well-suited for deployment on Kubernetes.","sidebar":"blueprints"},"blueprints/data-analytics/observability-spark-on-eks":{"id":"blueprints/data-analytics/observability-spark-on-eks","title":"Observability Spark on EKS","description":"Introduction","sidebar":"blueprints"},"blueprints/data-analytics/ray-data-processing":{"id":"blueprints/data-analytics/ray-data-processing","title":"Distributed Data Processing with Ray Data","description":"What is Ray Data?","sidebar":"blueprints"},"blueprints/data-analytics/spark-eks-ipv6":{"id":"blueprints/data-analytics/spark-eks-ipv6","title":"Spark Operator on EKS with IPv6","description":"This example showcases the usage of Spark Operator running on Amazon EKS in IPv6 mode. the idea is to show and demonstarte running spark workloads on EKS IPv6 cluster.","sidebar":"blueprints"},"blueprints/data-analytics/spark-operator-s3tables":{"id":"blueprints/data-analytics/spark-operator-s3tables","title":"S3 Tables with Amazon EKS","description":"s3tables","sidebar":"blueprints"},"blueprints/data-analytics/spark-operator-yunikorn":{"id":"blueprints/data-analytics/spark-operator-yunikorn","title":"Spark Operator with YuniKorn","description":"Introduction","sidebar":"blueprints"},"blueprints/data-analytics/superset-on-eks":{"id":"blueprints/data-analytics/superset-on-eks","title":"Superset on EKS","description":"Introduction","sidebar":"blueprints"},"blueprints/distributed-databases/aerospike":{"id":"blueprints/distributed-databases/aerospike","title":"Aerospike Database Enterprise on EKS","description":"Aerospike Database Enterprise Edition is a high-performance, distributed NoSQL database designed for real-time, mission-critical applications. Integrating Aerospike with Amazon Elastic Kubernetes Service (EKS) combines Aerospike\u2019s robust data management capabilities with Kubernetes orchestration prowess. This integration empowers organizations to harness Aerospike\u2019s predictable sub-millisecond performance and seamless scalability within EKS\u2019s flexible and resilient environment. By leveraging the Aerospike Kubernetes Operator (AKO), deployment and management of Aerospike clusters on EKS are automated, ensuring efficient operations and reduced complexity.","sidebar":"blueprints"},"blueprints/distributed-databases/clickhouse":{"id":"blueprints/distributed-databases/clickhouse","title":"ClickHouse on EKS","description":"ClickHouse is a high-performance, column-oriented SQL database management system (DBMS) for online analytical processing (OLAP) that is open sourced under the Apache 2.0 license.","sidebar":"blueprints"},"blueprints/distributed-databases/cloudnative-postgres":{"id":"blueprints/distributed-databases/cloudnative-postgres","title":"Deploying PostgreSQL Database on EKS using CloudNativePG Operator","description":"Introduction","sidebar":"blueprints"},"blueprints/distributed-databases/index":{"id":"blueprints/distributed-databases/index","title":"Distributed Databases on EKS","description":"Note: The blueprints for distributed databases and query engines are currently in the process of development.","sidebar":"blueprints"},"blueprints/distributed-databases/pinot":{"id":"blueprints/distributed-databases/pinot","title":"Deploying Apache Pinot (\uD83C\uDF77) on EKS","description":"Apache Pinot is real-time distributed OLAP datastore, purpose built for low-latency and high-throughput analytics. You can use pinot to ingest and immediately query data from streaming or batch data sources e.g. Apache Kafka, Amazon Kinesis Data Streams, Amazon S3, etc).","sidebar":"blueprints"},"blueprints/distributed-databases/trino":{"id":"blueprints/distributed-databases/trino","title":"Deploying Trino on EKS","description":"Introduction","sidebar":"blueprints"},"blueprints/job-schedulers/argo-workflows-eks":{"id":"blueprints/job-schedulers/argo-workflows-eks","title":"Argo Workflows on EKS","description":"Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. It is implemented as a Kubernetes CRD (Custom Resource Definition). As a result, Argo workflows can be managed using kubectl and natively integrates with other Kubernetes services such as volumes, secrets, and RBAC.","sidebar":"blueprints"},"blueprints/job-schedulers/aws-batch":{"id":"blueprints/job-schedulers/aws-batch","title":"AWS Batch on EKS","description":"AWS Batch is a fully-managed AWS-native batch computing service that plans, schedules, and runs your containerized batch workloads (machine-learning, simulation, and analytics) on top of AWS managed container orchestrations services like Amazon Elastic Kubernetes Service (EKS).","sidebar":"blueprints"},"blueprints/job-schedulers/aws-managed-airflow":{"id":"blueprints/job-schedulers/aws-managed-airflow","title":"Amazon MWAA","description":"Amazon Managed Workflows for Apache Airflow (MWAA) is a managed orchestration service for Apache Airflow that makes it easier to set up and operate end-to-end data pipelines in the cloud at scale. Apache Airflow is an open-source tool used to programmatically author, schedule, and monitor sequences of processes and tasks referred to as \u201Cworkflows.\u201D With Managed Workflows, you can use Airflow and Python to create workflows without having to manage the underlying infrastructure for scalability, availability, and security.","sidebar":"blueprints"},"blueprints/job-schedulers/index":{"id":"blueprints/job-schedulers/index","title":"Job Schedulers","description":"Job schedulers are an essential component of many organizations\' infrastructure, helping to automate and manage complex workflows. When deployed on Kubernetes, job schedulers can take advantage of the platform\'s features such as automatic scaling, rolling updates, and self-healing capabilities to ensure high availability and reliability. Tools like Apache Airflow, Argo Workflow, and Amazon MWAA provide a simple and efficient way to manage and schedule jobs on a Kubernetes cluster.","sidebar":"blueprints"},"blueprints/job-schedulers/self-managed-airflow":{"id":"blueprints/job-schedulers/self-managed-airflow","title":"Self-managed Apache Airflow deployment on Amazon EKS","description":"Introduction","sidebar":"blueprints"},"blueprints/streaming-platforms/emr-eks-flink":{"id":"blueprints/streaming-platforms/emr-eks-flink","title":"EMR on EKS with Flink Streaming","description":"Please note that we are working on adding more features to this blueprint such as Flink examples with multiple connectors, Ingress for WebUI, Grafana dashboards etc.","sidebar":"blueprints"},"blueprints/streaming-platforms/emr-eks-stream":{"id":"blueprints/streaming-platforms/emr-eks-stream","title":"EMR on EKS with Spark Streaming","description":"DEPRECATION NOTICE","sidebar":"blueprints"},"blueprints/streaming-platforms/flink":{"id":"blueprints/streaming-platforms/flink","title":"Flink Operator on EKS","description":"Please note that we are working on adding more features to this blueprint such as Flink examples with multiple connectors, Ingress for WebUI, Grafana dashboards etc.","sidebar":"blueprints"},"blueprints/streaming-platforms/index":{"id":"blueprints/streaming-platforms/index","title":"Streaming Platforms on EKS","description":"Note: The blueprints for streaming platforms are currently in the process of development.","sidebar":"blueprints"},"blueprints/streaming-platforms/kafka":{"id":"blueprints/streaming-platforms/kafka","title":"Kafka on EKS","description":"Apache Kafka is an open-source distributed event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications. This blueprint implements Kafka using KRaft (Kafka Raft) mode, a significant architectural improvement that eliminates the need for Zookeeper.","sidebar":"blueprints"},"blueprints/streaming-platforms/nifi":{"id":"blueprints/streaming-platforms/nifi","title":"Apache NiFi on EKS","description":"Introduction","sidebar":"blueprints"},"blueprints/streaming-platforms/spark-streaming":{"id":"blueprints/streaming-platforms/spark-streaming","title":"Spark Streaming from Kafka in EKS","description":"DEPRECATION NOTICE","sidebar":"blueprints"},"blueprints/troubleshooting/troubleshooting":{"id":"blueprints/troubleshooting/troubleshooting","title":"Troubleshooting","description":"You will find troubleshooting info for Data on Amazon EKS(DoEKS) installation issues","sidebar":"blueprints"},"intro":{"id":"intro","title":"intro","description":""},"introduction/intro":{"id":"introduction/intro","title":"Introduction","description":"Data on Amazon EKS(DoEKS) - A tool for building aws managed and self-managed scalable data platforms on Amazon EKS. With DoEKS, You have access to:"},"resources/binpacking-custom-scheduler-eks":{"id":"resources/binpacking-custom-scheduler-eks","title":"Bin packing for Amazon EKS","description":"Introduction","sidebar":"resources"},"resources/intro":{"id":"resources/intro","title":"Introduction to Resources","description":"Welcome to the Resources section. This area is dedicated to providing you with a wealth of information, insights, and learning materials to enhance your understanding and skills in Data and AI workloads running on EKS.","sidebar":"resources"},"resources/mountpoint-s3":{"id":"resources/mountpoint-s3","title":"Mounpoint S3: Enhancing Amazon S3 File Access for Data & AI Workloads on Amazon EKS","description":"What is Mountpoint-S3?","sidebar":"resources"},"resources/mountpoint-s3-for-spark":{"id":"resources/mountpoint-s3-for-spark","title":"Mountpoint-S3 for Spark Workloads","description":"When working with the SparkApplication Custom Resource Definition (CRD) managed by the SparkOperator, handling multiple dependency JAR files can become a significant challenge. Traditionally, these JAR files are bundled within the container image, leading to several inefficiencies:","sidebar":"resources"}}}}')}}]);