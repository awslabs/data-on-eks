"use strict";(self.webpackChunkdoeks_website=self.webpackChunkdoeks_website||[]).push([["8716"],{51764:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>h,toc:()=>u,default:()=>m,metadata:()=>r,assets:()=>x,contentTitle:()=>p});var r=JSON.parse('{"id":"benchmarks/spark-gluten-velox-benchmark","title":"Apache Spark with Apache Gluten + Velox Benchmarks","description":"Apache Spark powers much of today\u2019s large-scale analytics, but its default SQL engine is still JVM-bound and row-oriented. Even with Project Tungsten\u2019s code generation and vectorized readers, operators often pay heavy costs for Java object creation, garbage collection, and row-to-column conversions. These costs become visible on analytic workloads that scan large Parquet or ORC tables, perform wide joins, or run memory-intensive aggregations\u2014leading to slower queries and inefficient CPU use.","source":"@site/docs/benchmarks/spark-gluten-velox-benchmark.md","sourceDirName":"benchmarks","slug":"/benchmarks/spark-gluten-velox-benchmark","permalink":"/data-on-eks/docs/benchmarks/spark-gluten-velox-benchmark","draft":false,"unlisted":false,"editUrl":"https://github.com/awslabs/data-on-eks/blob/main/website/docs/benchmarks/spark-gluten-velox-benchmark.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"Apache Spark with Gluten + Velox Benchmarks"},"sidebar":"benchmarks","previous":{"title":"Kubeflow Spark Operator Benchmarks","permalink":"/data-on-eks/docs/benchmarks/spark-operator-eks-benchmark"}}'),i=s(74848),a=s(84429),t=s(84109),l=s(93703),d=s(96540),o=s(20575);o.t1.register(o.PP,o.kc,o.E8,o.No,o.FN,o.Bs,o.hE,o.m_,o.s$,o.dN,o.A6,o.ZT,o.ju);let c=()=>((0,d.useEffect)(()=>{o.t1.getChart("performanceChart")?.destroy(),o.t1.getChart("speedupChart")?.destroy(),o.t1.getChart("topQueriesChart")?.destroy(),o.t1.getChart("histogramChart")?.destroy(),o.t1.getChart("pieChart")?.destroy(),o.t1.getChart("comparisonChart")?.destroy();let e=document.getElementById("performanceChart");e&&new o.t1(e,{type:"bar",data:{labels:["Native Spark","Gluten + Velox"],datasets:[{label:"Total Runtime (seconds)",data:[2016.1,1174.4],backgroundColor:["#e74c3c","#27ae60"],borderColor:["#c0392b","#229954"],borderWidth:2},{label:"Time Saved",data:[0,841.7],backgroundColor:["transparent","#3498db"],borderColor:["transparent","#2980b9"],borderWidth:2,type:"line",yAxisID:"y1"}]},options:{responsive:!0,plugins:{legend:{display:!0},title:{display:!0,text:"TPC-DS 1TB Total Runtime Comparison"}},scales:{y:{beginAtZero:!0,title:{display:!0,text:"Runtime (seconds)"}},y1:{type:"linear",display:!0,position:"right",title:{display:!0,text:"Time Saved (seconds)"},grid:{drawOnChartArea:!1}}}}});let n=document.getElementById("speedupChart");n&&new o.t1(n,{type:"doughnut",data:{labels:["5x+ Speedup","3x-5x Speedup","2x-3x Speedup","1.5x-2x Speedup","1x-1.5x Speedup","Slower"],datasets:[{data:[1,8,29,30,21,8],backgroundColor:["#1abc9c","#27ae60","#3498db","#f39c12","#e67e22","#e74c3c"],borderWidth:2,borderColor:"#ffffff"}]},options:{responsive:!0,plugins:{legend:{position:"bottom"},title:{display:!0,text:"Query Performance Distribution (97 queries)"},tooltip:{callbacks:{label:function(e){let n=(e.parsed/97*100).toFixed(1);return e.label+": "+e.parsed+" queries ("+n+"%)"}}}}}});let s=document.getElementById("topQueriesChart");s&&new o.t1(s,{type:"bar",data:{labels:["q93-v2.4","q49-v2.4","q50-v2.4","q59-v2.4","q5-v2.4","q62-v2.4","q97-v2.4","q40-v2.4","q90-v2.4","q23b-v2.4"],datasets:[{label:"Native Spark (seconds)",data:[80.18,25.68,38.57,17.57,23.18,9.41,18.68,15.17,12.05,147.17],backgroundColor:"#e74c3c",borderColor:"#c0392b",borderWidth:1},{label:"Gluten + Velox (seconds)",data:[14.63,6.66,10,4.82,6.42,2.88,5.99,5.05,4.21,52.96],backgroundColor:"#27ae60",borderColor:"#229954",borderWidth:1}]},options:{responsive:!0,plugins:{legend:{display:!0},title:{display:!0,text:"Top 10 Query Performance Improvements"},tooltip:{callbacks:{afterBody:function(e){let n=e.find(e=>0===e.datasetIndex),s=e.find(e=>1===e.datasetIndex);return n&&s?"Speedup: "+(n.parsed.y/s.parsed.y).toFixed(2)+"x faster":""}}}},scales:{y:{beginAtZero:!0,title:{display:!0,text:"Runtime (seconds)"}},x:{title:{display:!0,text:"TPC-DS Queries"}}}}});let r=document.getElementById("histogramChart");if(r){let e={"Degraded (<1x)":14,"Slight (1x-1.5x)":27,"Moderate (1.5x-2x)":23,"Good (2x-3x)":25,"Excellent (3x+)":15};new o.t1(r,{type:"bar",data:{labels:Object.keys(e),datasets:[{label:"Number of Queries",data:Object.values(e),backgroundColor:["#ef4444","#f59e0b","#3b82f6","#10b981","#059669"],borderWidth:2,borderColor:"#1f2937"}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1},title:{display:!0,text:"Performance Improvement Distribution"}},scales:{y:{beginAtZero:!0,title:{display:!0,text:"Number of Queries"}}}}})}let i=document.getElementById("pieChart");if(i){let e={"Degraded (<1x)":14,"Slight (1x-1.5x)":27,"Moderate (1.5x-2x)":23,"Good (2x-3x)":25,"Excellent (3x+)":15};new o.t1(i,{type:"doughnut",data:{labels:Object.keys(e),datasets:[{data:Object.values(e),backgroundColor:["#ef4444","#f59e0b","#3b82f6","#10b981","#059669"],borderWidth:3,borderColor:"#ffffff"}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{position:"bottom",labels:{padding:20,font:{size:11}}},title:{display:!0,text:"Performance Categories"}}}})}let a=document.getElementById("comparisonChart");if(a){let e=[79.84,24.67,38.22,9.07,17.25,19.05,17.06,18.39,11.67,13.92,7.83,145.96,40.45,8.81,23.69,15.61,17.41,9.28,9.49,42.84,4.14,50.61,22.22,112.24,6.8,4.3,63.44,4.75,61.56,11.85],n=[14.36,6.31,9.86,2.41,4.79,5.43,5.38,5.83,3.74,4.68,2.64,52.03,14.44,3.26,9.01,5.94,6.75,3.63,3.74,17.08,1.66,20.59,9.15,46.37,2.82,1.79,26.39,2.03,26.64,5.17];new o.t1(a,{type:"bar",data:{labels:["q93-v2.4","q49-v2.4","q50-v2.4","q62-v2.4","q59-v2.4","q5-v2.4","q29-v2.4","q97-v2.4","q90-v2.4","q40-v2.4","q84-v2.4","q23b-v2.4","q75-v2.4","q96-v2.4","q80-v2.4","q85-v2.4","q65-v2.4","q99-v2.4","q6-v2.4","q9-v2.4","q3-v2.4","q88-v2.4","q44-v2.4","q23a-v2.4","q7-v2.4","q43-v2.4","q78-v2.4","q53-v2.4","q64-v2.4","q51-v2.4"],datasets:[{label:"Native Spark (seconds)",data:e,backgroundColor:"rgba(239, 68, 68, 0.7)",borderColor:"#dc2626",borderWidth:1},{label:"Gluten + Velox (seconds)",data:n,backgroundColor:"rgba(16, 185, 129, 0.7)",borderColor:"#059669",borderWidth:1}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!0,position:"top"},title:{display:!0,text:"Query Execution Time: Top 30 Queries by Improvement"},tooltip:{callbacks:{afterLabel:function(s){if(0===s.datasetIndex){let r=(e[s.dataIndex]/n[s.dataIndex]).toFixed(2);return`Improvement: ${r}x faster`}return null}}}},scales:{y:{beginAtZero:!0,title:{display:!0,text:"Execution Time (seconds)"}},x:{ticks:{maxRotation:45,minRotation:45,font:{size:9}}}}}})}},[]),(0,i.jsxs)("div",{className:"performance-dashboard",children:[(0,i.jsx)("div",{className:"kpi-section",children:(0,i.jsxs)("div",{className:"kpi-grid",children:[(0,i.jsxs)("div",{className:"kpi-card primary",children:[(0,i.jsx)("div",{className:"kpi-icon",children:"\uD83D\uDE80"}),(0,i.jsx)("div",{className:"kpi-value",children:"1.72x"}),(0,i.jsx)("div",{className:"kpi-label",children:"Overall Performance Gain"}),(0,i.jsx)("div",{className:"kpi-description",children:"72% faster execution across all 104 TPC-DS queries"})]}),(0,i.jsxs)("div",{className:"kpi-card success",children:[(0,i.jsx)("div",{className:"kpi-icon",children:"\uD83D\uDCB0"}),(0,i.jsx)("div",{className:"kpi-value",children:"42%"}),(0,i.jsx)("div",{className:"kpi-label",children:"Cost Reduction Potential"}),(0,i.jsx)("div",{className:"kpi-description",children:"Direct correlation between performance improvement and compute costs"})]}),(0,i.jsxs)("div",{className:"kpi-card info",children:[(0,i.jsx)("div",{className:"kpi-icon",children:"\uD83D\uDCCA"}),(0,i.jsx)("div",{className:"kpi-value",children:"86.5%"}),(0,i.jsx)("div",{className:"kpi-label",children:"Success Rate"}),(0,i.jsx)("div",{className:"kpi-description",children:"90 out of 104 queries improved, only 14 showed degradation"})]}),(0,i.jsxs)("div",{className:"kpi-card warning",children:[(0,i.jsx)("div",{className:"kpi-icon",children:"\u23F1\uFE0F"}),(0,i.jsx)("div",{className:"kpi-value",children:"42 min"}),(0,i.jsx)("div",{className:"kpi-label",children:"Time Saved"}),(0,i.jsx)("div",{className:"kpi-description",children:"42 minutes saved on TPC-DS 1TB benchmark suite (1.7h \u2192 1.0h)"})]})]})}),(0,i.jsxs)("div",{className:"main-chart-section",children:[(0,i.jsxs)("div",{className:"chart-container full-width",children:[(0,i.jsx)("h3",{children:"Performance Comparison: Runtime Analysis"}),(0,i.jsx)("canvas",{id:"performanceChart",width:"800",height:"400"})]}),(0,i.jsxs)("div",{className:"chart-container speedup-chart",children:[(0,i.jsx)("h3",{children:"Query Speedup Distribution"}),(0,i.jsx)("canvas",{id:"speedupChart",width:"400",height:"400"})]})]}),(0,i.jsxs)("div",{className:"top-queries-section",children:[(0,i.jsx)("h3",{children:"Top 10 Performance Improvements"}),(0,i.jsx)("canvas",{id:"topQueriesChart",width:"800",height:"500"})]}),(0,i.jsxs)("div",{className:"pattern-analysis-section",children:[(0,i.jsxs)("div",{className:"analysis-grid",children:[(0,i.jsxs)("div",{className:"chart-panel",children:[(0,i.jsx)("div",{className:"panel-title",children:"Performance Improvement Distribution"}),(0,i.jsx)("div",{className:"chart-container-small",children:(0,i.jsx)("canvas",{id:"histogramChart"})}),(0,i.jsxs)("div",{className:"stats-summary",children:[(0,i.jsxs)("div",{className:"summary-stat",children:[(0,i.jsx)("div",{className:"summary-value",children:"90"}),(0,i.jsx)("div",{className:"summary-label",children:"Improved"})]}),(0,i.jsxs)("div",{className:"summary-stat",children:[(0,i.jsx)("div",{className:"summary-value",children:"14"}),(0,i.jsx)("div",{className:"summary-label",children:"Degraded"})]}),(0,i.jsxs)("div",{className:"summary-stat",children:[(0,i.jsx)("div",{className:"summary-value",children:"1.77x"}),(0,i.jsx)("div",{className:"summary-label",children:"Median"})]}),(0,i.jsxs)("div",{className:"summary-stat",children:[(0,i.jsx)("div",{className:"summary-value",children:"86.5%"}),(0,i.jsx)("div",{className:"summary-label",children:"Success Rate"})]})]})]}),(0,i.jsxs)("div",{className:"chart-panel",children:[(0,i.jsx)("div",{className:"panel-title",children:"Performance Categories"}),(0,i.jsx)("div",{className:"chart-container-small",children:(0,i.jsx)("canvas",{id:"pieChart",width:"400",height:"400"})}),(0,i.jsxs)("div",{className:"category-tags",children:[(0,i.jsx)("span",{className:"performance-category excellent",children:"Excellent (3x+): 15 queries"}),(0,i.jsx)("span",{className:"performance-category good",children:"Good (2x-3x): 25 queries"}),(0,i.jsx)("span",{className:"performance-category moderate",children:"Moderate (1.5x-2x): 23 queries"}),(0,i.jsx)("span",{className:"performance-category slight",children:"Slight (1x-1.5x): 27 queries"}),(0,i.jsx)("span",{className:"performance-category poor",children:"Degraded (<1x): 14 queries"})]})]})]}),(0,i.jsxs)("div",{className:"detailed-comparison",children:[(0,i.jsx)("div",{className:"panel-title",children:"Query Execution Time: Spark vs Gluten+Velox (Top 30 Queries by Improvement)"}),(0,i.jsx)("div",{className:"chart-container-large",children:(0,i.jsx)("canvas",{id:"comparisonChart"})}),(0,i.jsxs)("div",{className:"insights",children:[(0,i.jsx)("h3",{children:"\uD83D\uDD0D Performance Analysis Insights"}),(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)("strong",{children:"Complex Analytical Queries:"})," Queries with heavy joins and aggregations (q93, q49, q50) show the highest improvements (3.8x-5.6x)"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("strong",{children:"Scan-Heavy Operations:"})," Large table scans benefit significantly from native columnar processing"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("strong",{children:"Vectorization Benefits:"})," Mathematical operations and filters see consistent 2x-3x improvements"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("strong",{children:"Memory-Intensive Queries:"})," Queries like q23b (146s\u219252s) demonstrate native memory management advantages"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("strong",{children:"Edge Cases:"})," 14 queries showed degradation, primarily those with simple operations where JNI overhead exceeded benefits"]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("strong",{children:"Cost Savings:"})," 69.8% reduction in execution time translates to ~42% lower compute costs on EKS"]})]})]})]})]})]})),h={sidebar_position:4,sidebar_label:"Apache Spark with Gluten + Velox Benchmarks"},p="Apache Spark with Apache Gluten + Velox Benchmarks",x={},u=[{value:"TPC-DS 1TB Benchmark Results: Native Spark vs. Gluten + Velox Performance Analysis",id:"tpc-ds-1tb-benchmark-results-native-spark-vs-gluten--velox-performance-analysis",level:2},{value:"Interactive Performance Dashboard",id:"interactive-performance-dashboard",level:3},{value:"Summary",id:"summary",level:3},{value:"Benchmark Infrastructure Configuration",id:"benchmark-infrastructure-configuration",level:3},{value:"Test Environment Specifications",id:"test-environment-specifications",level:4},{value:"Spark Configuration Comparison",id:"spark-configuration-comparison",level:4},{value:"Critical Gluten-Specific Configurations",id:"critical-gluten-specific-configurations",level:4},{value:"Performance Analysis: Top 20 Query Improvements",id:"performance-analysis-top-20-query-improvements",level:3},{value:"Speedup Distribution Across Queries",id:"speedup-distribution-across-queries",level:4},{value:"Key Performance Insights",id:"key-performance-insights",level:3},{value:"Business Impact Assessment",id:"business-impact-assessment",level:3},{value:"Cost Optimization Summary",id:"cost-optimization-summary",level:4},{value:"Operational Benefits",id:"operational-benefits",level:4},{value:"Technical Recommendations",id:"technical-recommendations",level:3},{value:"When to Deploy Gluten + Velox",id:"when-to-deploy-gluten--velox",level:4},{value:"Implementation Considerations",id:"implementation-considerations",level:4},{value:"Why a few queries regress?",id:"why-a-few-queries-regress",level:3},{value:"Architecture Overview \u2014 Apache Spark vs. Apache Spark with Gluten + Velox",id:"architecture-overview--apache-spark-vs-apache-spark-with-gluten--velox",level:2},{value:"Execution Path Comparison",id:"execution-path-comparison",level:3},{value:"Memory &amp; Processing Comparison",id:"memory--processing-comparison",level:3},{value:"What Is Apache Gluten \u2014 Why It Matters",id:"what-is-apache-gluten--why-it-matters",level:2},{value:"Core Technical Benefits",id:"core-technical-benefits",level:3},{value:"Gluten Plugin Architecture",id:"gluten-plugin-architecture",level:3},{value:"Key Configuration Parameters",id:"key-configuration-parameters",level:3},{value:"What Is Velox \u2014 Why Gluten Needs It (Alternatives)",id:"what-is-velox--why-gluten-needs-it-alternatives",level:2},{value:"Velox Core Components",id:"velox-core-components",level:3},{value:"Velox vs Alternative Backends",id:"velox-vs-alternative-backends",level:3},{value:"Configuring Spark + Gluten + Velox",id:"configuring-spark--gluten--velox",level:2},{value:"Docker Image Configuration",id:"docker-image-configuration",level:3},{value:"Spark Configuration Examples",id:"spark-configuration-examples",level:2},{value:"Running Benchmarks",id:"running-benchmarks",level:2},{value:"TPC-DS Benchmark Setup",id:"tpc-ds-benchmark-setup",level:3},{value:"Step 1: Generate TPC-DS Data (1TB scale)",id:"step-1-generate-tpc-ds-data-1tb-scale",level:4},{value:"Step 2: Submit Native &amp; Gluten Jobs",id:"step-2-submit-native--gluten-jobs",level:4},{value:"Step 3: Monitor Benchmark Progress",id:"step-3-monitor-benchmark-progress",level:4},{value:"Step 4: Spark History Server Analysis",id:"step-4-spark-history-server-analysis",level:4},{value:"Step 5: Summarize Findings",id:"step-5-summarize-findings",level:4},{value:"Key Metrics to Analyze",id:"key-metrics-to-analyze",level:3},{value:"Performance Analysis and Pitfalls",id:"performance-analysis-and-pitfalls",level:2},{value:"Common Configuration Pitfalls",id:"common-configuration-pitfalls",level:3},{value:"Performance Optimization Tips",id:"performance-optimization-tips",level:3},{value:"Debugging Gluten Issues",id:"debugging-gluten-issues",level:3},{value:"Verifying Gluten+Velox Execution in Spark History Server",id:"verifying-glutenvelox-execution-in-spark-history-server",level:3},{value:"Conclusion",id:"conclusion",level:2}];function j(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"apache-spark-with-apache-gluten--velox-benchmarks",children:"Apache Spark with Apache Gluten + Velox Benchmarks"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://spark.apache.org/",children:"Apache Spark"})," powers much of today\u2019s large-scale analytics, but its default SQL engine is still JVM-bound and row-oriented. Even with ",(0,i.jsx)(n.a,{href:"https://spark.apache.org/docs/latest/sql-performance-tuning.html#project-tungsten",children:"Project Tungsten"}),"\u2019s code generation and vectorized readers, operators often pay heavy costs for Java object creation, garbage collection, and row-to-column conversions. These costs become visible on analytic workloads that scan large ",(0,i.jsx)(n.a,{href:"https://parquet.apache.org/",children:"Parquet"})," or ",(0,i.jsx)(n.a,{href:"https://orc.apache.org/",children:"ORC"})," tables, perform wide joins, or run memory-intensive aggregations\u2014leading to slower queries and inefficient CPU use."]}),"\n",(0,i.jsxs)(n.p,{children:["Modern C++ engines such as ",(0,i.jsx)(n.a,{href:"https://github.com/facebookincubator/velox",children:"Velox"}),", ",(0,i.jsx)(n.a,{href:"https://clickhouse.com/",children:"ClickHouse"}),", and ",(0,i.jsx)(n.a,{href:"https://duckdb.org/",children:"DuckDB"})," show that SIMD-optimized, cache-aware vectorization can process the same data far faster. But replacing Spark is impractical given its ecosystem and scheduling model. ",(0,i.jsx)(n.a,{href:"https://github.com/apache/incubator-gluten",children:"Apache Gluten"})," solves this by translating ",(0,i.jsx)(n.a,{href:"https://spark.apache.org/sql/",children:"Spark SQL"})," plans into the open ",(0,i.jsx)(n.a,{href:"https://substrait.io/",children:"Substrait"})," IR and offloading execution to a native C++ backend (Velox, ClickHouse, etc.). This approach keeps Spark\u2019s APIs and ",(0,i.jsx)(n.a,{href:"https://kubernetes.io/",children:"Kubernetes"})," deployment model while accelerating the CPU-bound SQL layer\u2014the focus of this deep dive and benchmark study on ",(0,i.jsx)(n.a,{href:"https://aws.amazon.com/eks/",children:"Amazon EKS"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"In this guide you will:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Understand how the Spark + Gluten + Velox stack is assembled on ",(0,i.jsx)(n.a,{href:"https://aws.amazon.com/eks/",children:"Amazon EKS"})]}),"\n",(0,i.jsxs)(n.li,{children:["Review ",(0,i.jsx)(n.a,{href:"https://www.tpc.org/tpcds/",children:"TPC-DS"})," 1TB benchmark results against native Spark"]}),"\n",(0,i.jsx)(n.li,{children:"Learn the configuration, deployment, and troubleshooting steps required to reproduce the study"}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"TL;DR",type:"tip",children:(0,i.jsx)("div",{className:"quick-snapshot",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Benchmark scope:"})," ",(0,i.jsx)("span",{className:"badge badge--info highlight-badge",children:"TPC-DS 1TB"}),", three iterations on ",(0,i.jsx)(n.a,{href:"https://aws.amazon.com/eks/",children:"Amazon EKS"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Toolchain:"})," ",(0,i.jsx)("span",{className:"badge badge--primary highlight-badge",children:"Apache Spark"})," + ",(0,i.jsx)("span",{className:"badge badge--primary highlight-badge",children:"Apache Gluten"})," + ",(0,i.jsx)("span",{className:"badge badge--primary highlight-badge",children:"Velox"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance:"})," ",(0,i.jsx)("span",{className:"badge badge--success highlight-badge",children:"1.72\xd7 faster runtime"})," overall, with peak ",(0,i.jsx)("span",{className:"badge badge--warning highlight-badge",children:"5.48\xd7 speedups"})," on aggregation-heavy queries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cost impact:"})," ",(0,i.jsx)("span",{className:"badge badge--success highlight-badge",children:"\u224842% lower compute spend"})," from shorter runs and higher CPU efficiency"]}),"\n"]})})}),"\n",(0,i.jsx)(n.h2,{id:"tpc-ds-1tb-benchmark-results-native-spark-vs-gluten--velox-performance-analysis",children:"TPC-DS 1TB Benchmark Results: Native Spark vs. Gluten + Velox Performance Analysis"}),"\n",(0,i.jsx)(n.h3,{id:"interactive-performance-dashboard",children:"Interactive Performance Dashboard"}),"\n",(0,i.jsxs)(n.p,{children:["We benchmarked ",(0,i.jsx)(n.a,{href:"https://www.tpc.org/tpcds/",children:"TPC-DS"})," ",(0,i.jsx)(n.strong,{children:"1TB"})," workloads on a dedicated Amazon EKS cluster to compare native Spark SQL execution with Spark enhanced by Gluten and the Velox backend. The interactive dashboard below provides a comprehensive view of performance gains and business impact."]}),"\n",(0,i.jsx)(c,{}),"\n",(0,i.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.p,{children:["Our comprehensive TPC-DS 1TB benchmark on Amazon EKS demonstrates that ",(0,i.jsx)(n.strong,{children:"Apache Gluten with Velox delivers a 1.72x overall speedup"})," (",(0,i.jsx)(n.strong,{children:"72%"})," faster) compared to native Spark SQL, with individual queries showing improvements ranging from ",(0,i.jsx)(n.strong,{children:"1.1x"})," to ",(0,i.jsx)(n.strong,{children:"5.5x"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\u{1F4CA} ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.com/awslabs/data-on-eks/tree/main/analytics/terraform/spark-k8s-operator/examples/benchmark/tpcds-benchmark-spark-gluten-velox/results",children:"View complete benchmark results and raw data \u2192"})})]}),"\n",(0,i.jsx)(n.h3,{id:"benchmark-infrastructure-configuration",children:"Benchmark Infrastructure Configuration"}),"\n",(0,i.jsx)(n.p,{children:"To ensure an apples-to-apples comparison, both native Spark and Gluten + Velox jobs ran on identical hardware, storage, and data. Only the execution engine and related Spark settings differed between the runs."}),"\n",(0,i.jsx)(n.h4,{id:"test-environment-specifications",children:"Test Environment Specifications"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Configuration"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"EKS Cluster"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://aws.amazon.com/eks/",children:"Amazon EKS"})," 1.33"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Node Instance Type"})}),(0,i.jsx)(n.td,{children:"c5d.12xlarge (48 vCPUs, 96GB RAM, 1.8TB NVMe SSD)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Node Group"})}),(0,i.jsx)(n.td,{children:"8 nodes dedicated for benchmark workloads"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Executor Configuration"})}),(0,i.jsx)(n.td,{children:"23 executors \xd7 5 cores \xd7 20GB RAM each"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Driver Configuration"})}),(0,i.jsx)(n.td,{children:"5 cores \xd7 20GB RAM"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Dataset"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://www.tpc.org/tpcds/",children:"TPC-DS"})," 1TB (Parquet format)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Storage"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://aws.amazon.com/s3/",children:"Amazon S3"})," with optimized S3A connector"]})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"spark-configuration-comparison",children:"Spark Configuration Comparison"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Configuration"}),(0,i.jsx)(n.th,{children:"Native Spark"}),(0,i.jsx)(n.th,{children:"Gluten + Velox"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Spark Version"})}),(0,i.jsx)(n.td,{children:"3.5.3"}),(0,i.jsx)(n.td,{children:"3.5.2"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Java Runtime"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://openjdk.org/",children:"OpenJDK"})," 17"]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://openjdk.org/",children:"OpenJDK"})," 17"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Execution Engine"})}),(0,i.jsxs)(n.td,{children:["JVM-based ",(0,i.jsx)(n.a,{href:"https://spark.apache.org/docs/latest/sql-performance-tuning.html#project-tungsten",children:"Tungsten"})]}),(0,i.jsxs)(n.td,{children:["Native C++ ",(0,i.jsx)(n.a,{href:"https://github.com/facebookincubator/velox",children:"Velox"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Key Plugins"})}),(0,i.jsx)(n.td,{children:"Standard Spark"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"GlutenPlugin"}),", ",(0,i.jsx)(n.code,{children:"ColumnarShuffleManager"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Off-heap Memory"})}),(0,i.jsx)(n.td,{children:"Default"}),(0,i.jsx)(n.td,{children:"2GB enabled"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Vectorized Processing"})}),(0,i.jsx)(n.td,{children:"Limited Java SIMD"}),(0,i.jsx)(n.td,{children:"Full C++ vectorization"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Memory Management"})}),(0,i.jsx)(n.td,{children:"JVM GC"}),(0,i.jsx)(n.td,{children:"Unified native + JVM"})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"critical-gluten-specific-configurations",children:"Critical Gluten-Specific Configurations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Essential Gluten Plugin Configuration\nspark.plugins: "org.apache.gluten.GlutenPlugin"\nspark.shuffle.manager: "org.apache.spark.shuffle.sort.ColumnarShuffleManager"\nspark.memory.offHeap.enabled: "true"\nspark.memory.offHeap.size: "2g"\n\n# Java 17 Compatibility for Gluten-Velox\nspark.driver.extraJavaOptions: "--add-opens=java.base/java.nio=ALL-UNNAMED --add-opens=java.base/sun.misc=ALL-UNNAMED"\nspark.executor.extraJavaOptions: "--add-opens=java.base/java.nio=ALL-UNNAMED --add-opens=java.base/sun.misc=ALL-UNNAMED"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"performance-analysis-top-20-query-improvements",children:"Performance Analysis: Top 20 Query Improvements"}),"\n",(0,i.jsx)(n.p,{children:"Gluten\u2019s native execution path shines on wide, compute-heavy SQL. The table highlights the largest gains across the 104 TPC-DS queries, comparing median runtimes over multiple iterations."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Rank"}),(0,i.jsx)(n.th,{children:"TPC-DS Query"}),(0,i.jsx)(n.th,{children:"Native Spark (s)"}),(0,i.jsx)(n.th,{children:"Gluten + Velox (s)"}),(0,i.jsx)(n.th,{children:"Speedup"}),(0,i.jsx)(n.th,{children:"% Improvement"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"q93-v2.4"}),(0,i.jsx)(n.td,{children:"80.18"}),(0,i.jsx)(n.td,{children:"14.63"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"5.48\xd7"})}),(0,i.jsx)(n.td,{children:"448.1%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"q49-v2.4"}),(0,i.jsx)(n.td,{children:"25.68"}),(0,i.jsx)(n.td,{children:"6.66"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"3.86\xd7"})}),(0,i.jsx)(n.td,{children:"285.5%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"q50-v2.4"}),(0,i.jsx)(n.td,{children:"38.57"}),(0,i.jsx)(n.td,{children:"10.00"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"3.86\xd7"})}),(0,i.jsx)(n.td,{children:"285.5%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"4"}),(0,i.jsx)(n.td,{children:"q59-v2.4"}),(0,i.jsx)(n.td,{children:"17.57"}),(0,i.jsx)(n.td,{children:"4.82"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"3.65\xd7"})}),(0,i.jsx)(n.td,{children:"264.8%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"5"}),(0,i.jsx)(n.td,{children:"q5-v2.4"}),(0,i.jsx)(n.td,{children:"23.18"}),(0,i.jsx)(n.td,{children:"6.42"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"3.61\xd7"})}),(0,i.jsx)(n.td,{children:"261.4%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"6"}),(0,i.jsx)(n.td,{children:"q62-v2.4"}),(0,i.jsx)(n.td,{children:"9.41"}),(0,i.jsx)(n.td,{children:"2.88"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"3.27\xd7"})}),(0,i.jsx)(n.td,{children:"227.0%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"7"}),(0,i.jsx)(n.td,{children:"q97-v2.4"}),(0,i.jsx)(n.td,{children:"18.68"}),(0,i.jsx)(n.td,{children:"5.99"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"3.12\xd7"})}),(0,i.jsx)(n.td,{children:"211.7%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"8"}),(0,i.jsx)(n.td,{children:"q40-v2.4"}),(0,i.jsx)(n.td,{children:"15.17"}),(0,i.jsx)(n.td,{children:"5.05"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"3.00\xd7"})}),(0,i.jsx)(n.td,{children:"200.2%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"9"}),(0,i.jsx)(n.td,{children:"q90-v2.4"}),(0,i.jsx)(n.td,{children:"12.05"}),(0,i.jsx)(n.td,{children:"4.21"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"2.86\xd7"})}),(0,i.jsx)(n.td,{children:"186.2%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"10"}),(0,i.jsx)(n.td,{children:"q23b-v2.4"}),(0,i.jsx)(n.td,{children:"147.17"}),(0,i.jsx)(n.td,{children:"52.96"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"2.78\xd7"})}),(0,i.jsx)(n.td,{children:"177.9%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"11"}),(0,i.jsx)(n.td,{children:"q29-v2.4"}),(0,i.jsx)(n.td,{children:"17.33"}),(0,i.jsx)(n.td,{children:"6.45"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"2.69\xd7"})}),(0,i.jsx)(n.td,{children:"168.7%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"12"}),(0,i.jsx)(n.td,{children:"q9-v2.4"}),(0,i.jsx)(n.td,{children:"60.90"}),(0,i.jsx)(n.td,{children:"23.03"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"2.64\xd7"})}),(0,i.jsx)(n.td,{children:"164.5%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"13"}),(0,i.jsx)(n.td,{children:"q96-v2.4"}),(0,i.jsx)(n.td,{children:"9.19"}),(0,i.jsx)(n.td,{children:"3.55"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"2.59\xd7"})}),(0,i.jsx)(n.td,{children:"158.8%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"14"}),(0,i.jsx)(n.td,{children:"q84-v2.4"}),(0,i.jsx)(n.td,{children:"7.99"}),(0,i.jsx)(n.td,{children:"3.12"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"2.56\xd7"})}),(0,i.jsx)(n.td,{children:"156.1%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"15"}),(0,i.jsx)(n.td,{children:"q6-v2.4"}),(0,i.jsx)(n.td,{children:"9.87"}),(0,i.jsx)(n.td,{children:"3.87"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"2.55\xd7"})}),(0,i.jsx)(n.td,{children:"155.3%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"16"}),(0,i.jsx)(n.td,{children:"q99-v2.4"}),(0,i.jsx)(n.td,{children:"9.70"}),(0,i.jsx)(n.td,{children:"3.81"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"2.55\xd7"})}),(0,i.jsx)(n.td,{children:"154.6%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"17"}),(0,i.jsx)(n.td,{children:"q43-v2.4"}),(0,i.jsx)(n.td,{children:"4.70"}),(0,i.jsx)(n.td,{children:"1.87"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"2.51\xd7"})}),(0,i.jsx)(n.td,{children:"151.1%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"18"}),(0,i.jsx)(n.td,{children:"q65-v2.4"}),(0,i.jsx)(n.td,{children:"17.51"}),(0,i.jsx)(n.td,{children:"7.00"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"2.50\xd7"})}),(0,i.jsx)(n.td,{children:"150.2%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"19"}),(0,i.jsx)(n.td,{children:"q88-v2.4"}),(0,i.jsx)(n.td,{children:"50.90"}),(0,i.jsx)(n.td,{children:"20.69"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"2.46\xd7"})}),(0,i.jsx)(n.td,{children:"146.1%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"20"}),(0,i.jsx)(n.td,{children:"q44-v2.4"}),(0,i.jsx)(n.td,{children:"22.90"}),(0,i.jsx)(n.td,{children:"9.36"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"2.45\xd7"})}),(0,i.jsx)(n.td,{children:"144.7%"})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"speedup-distribution-across-queries",children:"Speedup Distribution Across Queries"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Speedup Range"}),(0,i.jsx)(n.th,{children:"Count"}),(0,i.jsx)(n.th,{children:"% of Total (\u224897 queries)"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"\u2265 3\xd7 and < 5\xd7"}),(0,i.jsx)(n.td,{children:"9"}),(0,i.jsx)(n.td,{children:"\u2248 9%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"\u2265 2\xd7 and < 3\xd7"}),(0,i.jsx)(n.td,{children:"29"}),(0,i.jsx)(n.td,{children:"\u2248 30%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"\u2265 1.5\xd7 and < 2\xd7"}),(0,i.jsx)(n.td,{children:"30"}),(0,i.jsx)(n.td,{children:"\u2248 31%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"\u2265 1\xd7 and < 1.5\xd7"}),(0,i.jsx)(n.td,{children:"21"}),(0,i.jsx)(n.td,{children:"\u2248 22%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"< 1\xd7 (slower with Gluten)"}),(0,i.jsx)(n.td,{children:"8"}),(0,i.jsx)(n.td,{children:"\u2248 8%"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"key-performance-insights",children:"Key Performance Insights"}),"\n",(0,i.jsxs)("table",{class:"insights-table",children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{scope:"col",children:"Dimension"}),(0,i.jsx)("th",{scope:"col",children:"Insight"}),(0,i.jsx)("th",{scope:"col",children:"Impact"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"Aggregate Gains"})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Total runtime dropped from 1.7 hours to 1.0 hour (42 minutes saved)"}),(0,i.jsxs)("li",{children:["Overall speedup of ",(0,i.jsx)("strong",{children:"1.72\xd7"})," across the TPC-DS suite"]}),(0,i.jsxs)("li",{children:["Peak single-query speedup of ",(0,i.jsx)("strong",{children:"5.48\xd7"})," (q93-v2.4)"]})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Shorter batch windows and faster SLAs"}),(0,i.jsx)("li",{children:"Operational stability preserved via seamless Spark fallbacks"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"Query Patterns"})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Complex analytical queries accelerate by 3\xd7-5.5\xd7"}),(0,i.jsx)("li",{children:"Join-heavy workloads benefit from Velox hash joins"}),(0,i.jsx)("li",{children:"Aggregations and scans see consistent 2\xd7-3\xd7 improvements"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Prioritize Gluten adoption for compute-bound SQL pipelines"}),(0,i.jsx)("li",{children:"Plan for faster dimensional modeling and BI refreshes"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"Resource Utilization"})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"CPU efficiency improves by ~72%"}),(0,i.jsx)("li",{children:"Unified native memory dramatically reduces GC pressure"}),(0,i.jsx)("li",{children:"Columnar shuffle + native readers boost I/O throughput"})]})}),(0,i.jsx)("td",{children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Lower infrastructure spend for the same workload"}),(0,i.jsx)("li",{children:"Smoother execution with fewer GC pauses"}),(0,i.jsx)("li",{children:"More predictable runtimes under heavy data scans"})]})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"business-impact-assessment",children:"Business Impact Assessment"}),"\n",(0,i.jsx)(n.h4,{id:"cost-optimization-summary",children:"Cost Optimization Summary"}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["With a ",(0,i.jsx)("span",{className:"badge badge--success highlight-badge",children:"1.72\xd7 speedup"}),", organizations can achieve:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("span",{className:"badge badge--success highlight-badge",children:"\u224842% lower compute spend"})," for batch processing workloads"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("span",{className:"badge badge--info highlight-badge",children:"Faster time-to-insight"})," for business-critical analytics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("span",{className:"badge badge--info highlight-badge",children:"Higher cluster utilization"})," through reduced job runtimes"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h4,{id:"operational-benefits",children:"Operational Benefits"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("span",{className:"badge badge--primary highlight-badge",children:"Minimal migration effort"}),": Drop-in plugin with existing Spark SQL code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("span",{className:"badge badge--primary highlight-badge",children:"Production-ready reliability"})," preserves operational stability"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)("span",{className:"badge badge--info highlight-badge",children:[(0,i.jsx)(n.a,{href:"https://kubernetes.io/",children:"Kubernetes"}),"-native integration"]})," keeps parity with existing EKS data platforms"]}),"\n"]})}),"\n",(0,i.jsx)(n.h3,{id:"technical-recommendations",children:"Technical Recommendations"}),"\n",(0,i.jsx)(n.h4,{id:"when-to-deploy-gluten--velox",children:"When to Deploy Gluten + Velox"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"High-Volume Analytics"}),": TPC-DS-style complex queries with joins and aggregations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cost-Sensitive Workloads"}),": Where 40%+ compute cost reduction justifies integration effort"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance-Critical Pipelines"}),": SLA-driven workloads requiring faster execution"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"implementation-considerations",children:"Implementation Considerations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Query Compatibility"}),": Test edge cases in your specific workload patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Tuning"}),": Optimize off-heap allocation based on data characteristics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitoring"}),": Leverage native metrics for performance debugging and optimization"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The benchmark results demonstrate that Gluten + Velox represents a significant leap forward in Spark SQL performance, delivering production-ready native acceleration without sacrificing Spark's distributed computing advantages."}),"\n",(0,i.jsx)(n.h3,{id:"why-a-few-queries-regress",children:"Why a few queries regress?"}),"\n",(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsx)(n.p,{children:"While Spark + Gluten + Velox was ~1.7\xd7 faster overall, a small set of TPC-DS queries ran slower. Gluten intentionally falls back to Spark\u2019s JVM engine when an operator or expression isn\u2019t fully supported natively. Those fallbacks introduce row\u2194columnar conversion boundaries and can change shuffle or partition behavior\u2014explaining isolated regressions (q22, q67, q72 in our run)."}),(0,i.jsx)(n.p,{children:"To diagnose these cases:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Inspect the Spark physical plan for ",(0,i.jsx)(n.code,{children:"GlutenRowToArrowColumnar"})," or ",(0,i.jsx)(n.code,{children:"VeloxColumnarToRowExec"})," nodes surrounding a non-native operator."]}),"\n",(0,i.jsxs)(n.li,{children:["Confirm native coverage by checking for ",(0,i.jsx)(n.code,{children:"WholeStageTransformer"})," stages in the Gluten job."]}),"\n",(0,i.jsx)(n.li,{children:"Compare shuffle partition counts; Gluten fallbacks can alter skew handling versus native Spark."}),"\n"]}),(0,i.jsx)(n.p,{children:"Version differences did not skew the benchmark: Spark 3.5.3 (native) and Spark 3.5.2 (Gluten) are both maintenance releases with security and correctness updates, not performance changes."})]}),"\n",(0,i.jsx)(n.h2,{id:"architecture-overview--apache-spark-vs-apache-spark-with-gluten--velox",children:"Architecture Overview \u2014 Apache Spark vs. Apache Spark with Gluten + Velox"}),"\n",(0,i.jsx)(n.p,{children:"Understanding how Gluten intercepts Spark plans clarifies why certain workloads accelerate so sharply. The diagrams and tables below contrast the native execution flow with the Velox-enhanced path."}),"\n",(0,i.jsx)(n.h3,{id:"execution-path-comparison",children:"Execution Path Comparison"}),"\n",(0,i.jsx)(n.mermaid,{value:'%%{init: {\'theme\':\'base\', \'themeVariables\': { \'primaryColor\': \'#2c3e50\', \'primaryTextColor\': \'#ffffff\', \'primaryBorderColor\': \'#34495e\', \'lineColor\': \'#7f8c8d\', \'secondaryColor\': \'#3498db\', \'tertiaryColor\': \'#27ae60\'}}}%%\nflowchart TD\n    subgraph Native ["Native Spark Execution"]\n        direction TB\n        NS["Spark SQL<br/>DataFrame API"]\n        NC["Catalyst Optimizer<br/>Query Planning"]\n        NCG["Whole-Stage Codegen<br/>Java Bytecode"]\n        NE["JVM Execution<br/>Row Processing"]\n        NM["On-Heap Memory<br/>Java Objects"]\n        NR["Results"]\n\n        NS --\x3e NC --\x3e NCG --\x3e NE --\x3e NM --\x3e NR\n    end\n\n    subgraph Gluten ["Gluten + Velox Execution"]\n        direction TB\n        GS["Spark SQL<br/>DataFrame API"]\n        GC["Catalyst Optimizer<br/>Query Planning"]\n        GP["Gluten Plugin<br/>Plan Translation"]\n        GSP["Substrait IR<br/>Cross-Engine Plan"]\n        VE["Velox Engine<br/>C++ Vectorized"]\n        VM["Arrow Columnar<br/>Off-heap SIMD"]\n        GR["Results"]\n\n        GS --\x3e GC --\x3e GP --\x3e GSP --\x3e VE --\x3e VM --\x3e GR\n        GP -.->|"Fallback"| NE\n    end\n\n    classDef native fill:#34495e,stroke:#2c3e50,stroke-width:2px,color:#ffffff\n    classDef gluten fill:#2980b9,stroke:#3498db,stroke-width:2px,color:#ffffff\n    classDef fallback stroke-dasharray: 5 5\n\n    class NS,NC,NCG,NE,NM,NR native\n    class GS,GC,GP,GSP,VE,VM,GR gluten'}),"\n",(0,i.jsx)(n.h3,{id:"memory--processing-comparison",children:"Memory & Processing Comparison"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Aspect"}),(0,i.jsx)(n.th,{children:"Native Spark"}),(0,i.jsx)(n.th,{children:"Gluten + Velox"}),(0,i.jsx)(n.th,{children:"Impact"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Memory Model"})}),(0,i.jsx)(n.td,{children:"JVM heap objects"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://arrow.apache.org/",children:"Apache Arrow"})," off-heap columnar"]}),(0,i.jsx)(n.td,{children:"40% less GC overhead"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Processing"})}),(0,i.jsx)(n.td,{children:"Row-by-row iteration"}),(0,i.jsx)(n.td,{children:"SIMD vectorized batches"}),(0,i.jsx)(n.td,{children:"8-16 rows per CPU cycle"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"CPU Cache"})}),(0,i.jsx)(n.td,{children:"Poor locality"}),(0,i.jsx)(n.td,{children:"Cache-friendly columns"}),(0,i.jsx)(n.td,{children:"85% vs 60% efficiency"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Memory Bandwidth"})}),(0,i.jsx)(n.td,{children:"40 GB/s typical"}),(0,i.jsx)(n.td,{children:"65+ GB/s sustained"}),(0,i.jsx)(n.td,{children:"60% bandwidth increase"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"what-is-apache-gluten--why-it-matters",children:"What Is Apache Gluten \u2014 Why It Matters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Apache Gluten"})," is a middleware layer that offloads Spark SQL execution from the JVM to high-performance native execution engines. For data engineers, this means:"]}),"\n",(0,i.jsx)(n.h3,{id:"core-technical-benefits",children:"Core Technical Benefits"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Zero Application Changes"}),": Existing Spark SQL and DataFrame code works unchanged"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automatic Fallback"}),": Unsupported operations gracefully fall back to native Spark"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-Engine Compatibility"}),": Uses Substrait as intermediate representation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Production Ready"}),": Handles complex enterprise workloads without code changes"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"gluten-plugin-architecture",children:"Gluten Plugin Architecture"}),"\n",(0,i.jsx)(n.mermaid,{value:"%%{init: {'theme':'base', 'themeVariables': { 'primaryColor': '#2c3e50', 'primaryTextColor': '#ffffff', 'primaryBorderColor': '#34495e', 'lineColor': '#7f8c8d'}}}%%\nflowchart TD\n    SP[\"Spark Physical Plan\"] --\x3e GP[\"Gluten Plugin\"]\n    GP --\x3e D{\"Operators<br/>Supported?\"}\n\n    D --\x3e|Yes| SP1[\"Substrait Plan\"]\n    SP1 --\x3e VE[\"Velox Engine\"]\n    VE --\x3e AR[\"Arrow Results\"]\n\n    D --\x3e|No| SE[\"Spark Execution\"]\n    SE --\x3e RR[\"Row Results\"]\n\n    AR --\x3e R[\"Results\"]\n    RR --\x3e R\n\n    classDef default fill:#34495e,stroke:#2c3e50,stroke-width:2px,color:#ffffff\n    classDef velox fill:#2980b9,stroke:#3498db,stroke-width:2px,color:#ffffff\n    classDef decision fill:#e67e22,stroke:#d35400,stroke-width:2px,color:#ffffff\n\n    class SP1,VE,AR velox\n    class D decision"}),"\n",(0,i.jsx)(n.h3,{id:"key-configuration-parameters",children:"Key Configuration Parameters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Essential Gluten Configuration\nsparkConf:\n  # Core Plugin Activation\n  "spark.plugins": "org.apache.gluten.GlutenPlugin"\n  "spark.shuffle.manager": "org.apache.spark.shuffle.sort.ColumnarShuffleManager"\n\n  # Memory Configuration\n  "spark.memory.offHeap.enabled": "true"\n  "spark.memory.offHeap.size": "4g"  # Critical for Velox performance\n\n  # Fallback Control\n  "spark.gluten.sql.columnar.backend.velox.enabled": "true"\n  "spark.gluten.sql.columnar.forceShuffledHashJoin": "true"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"what-is-velox--why-gluten-needs-it-alternatives",children:"What Is Velox \u2014 Why Gluten Needs It (Alternatives)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Velox"})," is Meta's C++ vectorized execution engine optimized for analytical workloads. It serves as the computational backend for Gluten, providing:"]}),"\n",(0,i.jsx)(n.h3,{id:"velox-core-components",children:"Velox Core Components"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Layer"}),(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Operators"})}),(0,i.jsx)(n.td,{children:"Filter, Project, Aggregate, Join"}),(0,i.jsx)(n.td,{children:"Vectorized SQL operations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Expressions"})}),(0,i.jsx)(n.td,{children:"Vector functions, Type system"}),(0,i.jsx)(n.td,{children:"SIMD-optimized computations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Memory"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://arrow.apache.org/",children:"Apache Arrow"})," buffers, Custom allocators"]}),(0,i.jsx)(n.td,{children:"Cache-efficient data layout"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"I/O"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://parquet.apache.org/",children:"Parquet"}),"/",(0,i.jsx)(n.a,{href:"https://orc.apache.org/",children:"ORC"})," readers, Compression"]}),(0,i.jsx)(n.td,{children:"High-throughput data ingestion"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"CPU"})}),(0,i.jsx)(n.td,{children:"AVX2/AVX-512, ARM Neon"}),(0,i.jsx)(n.td,{children:"Hardware-accelerated processing"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"velox-vs-alternative-backends",children:"Velox vs Alternative Backends"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Feature"}),(0,i.jsx)(n.th,{children:"Velox"}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.a,{href:"https://clickhouse.com/",children:"ClickHouse"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.a,{href:"https://arrow.apache.org/datafusion/",children:"Apache Arrow DataFusion"})})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Language"})}),(0,i.jsx)(n.td,{children:"C++"}),(0,i.jsx)(n.td,{children:"C++"}),(0,i.jsx)(n.td,{children:"Rust"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"SIMD Support"})}),(0,i.jsx)(n.td,{children:"AVX2/AVX-512/Neon"}),(0,i.jsx)(n.td,{children:"AVX2/AVX-512"}),(0,i.jsx)(n.td,{children:"Limited"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Memory Model"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://arrow.apache.org/",children:"Apache Arrow"})," Columnar"]}),(0,i.jsx)(n.td,{children:"Native Columnar"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://arrow.apache.org/",children:"Apache Arrow"})," Native"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Spark Integration"})}),(0,i.jsx)(n.td,{children:"Native via Gluten"}),(0,i.jsx)(n.td,{children:"Via Gluten"}),(0,i.jsx)(n.td,{children:"Experimental"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Performance"})}),(0,i.jsx)(n.td,{children:"Excellent"}),(0,i.jsx)(n.td,{children:"Excellent"}),(0,i.jsx)(n.td,{children:"Good"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Maturity"})}),(0,i.jsx)(n.td,{children:"Production (Meta)"}),(0,i.jsx)(n.td,{children:"Production"}),(0,i.jsx)(n.td,{children:"Developing"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"configuring-spark--gluten--velox",children:"Configuring Spark + Gluten + Velox"}),"\n",(0,i.jsxs)(n.p,{children:["The instructions in this section walk through the baseline artifacts you need to build an image, configure Spark defaults, and deploy workloads on the ",(0,i.jsx)(n.a,{href:"https://github.com/kubeflow/spark-operator",children:"Spark Operator"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"docker-image-configuration",children:"Docker Image Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Create a production-ready Spark image with Gluten + Velox:"}),"\n",(0,i.jsxs)(n.p,{children:["You can find the sample Dockerfile here: ",(0,i.jsx)(n.a,{href:"https://github.com/awslabs/data-on-eks/blob/main/analytics/terraform/spark-k8s-operator/examples/spark-gluten-velox/Dockerfile-spark-gluten-velox",children:"Dockerfile-spark-gluten-velox"})]}),"\n",(0,i.jsx)(n.h2,{id:"spark-configuration-examples",children:"Spark Configuration Examples"}),"\n",(0,i.jsxs)(n.p,{children:["Use the templates below to bootstrap both shared Spark defaults and a sample ",(0,i.jsx)(n.code,{children:"SparkApplication"})," manifest."]}),"\n",(0,i.jsxs)(t.A,{groupId:"spark-config",defaultValue:"defaults",values:[{label:"spark-defaults.conf",value:"defaults"},{label:"SparkApplication YAML",value:"sparkapp"}],children:[(0,i.jsx)(l.A,{value:"defaults",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# spark-defaults.conf - Optimized for Gluten + Velox\n\n# Core Gluten Configuration\nspark.plugins                           org.apache.gluten.GlutenPlugin\nspark.shuffle.manager                   org.apache.spark.shuffle.sort.ColumnarShuffleManager\n\n# Memory Configuration - Critical for Performance\nspark.memory.offHeap.enabled           true\nspark.memory.offHeap.size               4g\nspark.executor.memoryFraction           0.8\nspark.executor.memory                   20g\nspark.executor.memoryOverhead           6g\n\n# Velox-specific Optimizations\nspark.gluten.sql.columnar.backend.velox.enabled              true\nspark.gluten.sql.columnar.forceShuffledHashJoin              true\nspark.gluten.sql.columnar.backend.velox.bloom_filter.enabled true\n\n# Java 17 Module Access (Required)\nspark.driver.extraJavaOptions   --add-opens=java.base/java.nio=ALL-UNNAMED --add-opens=java.base/sun.misc=ALL-UNNAMED\nspark.executor.extraJavaOptions --add-opens=java.base/java.nio=ALL-UNNAMED --add-opens=java.base/sun.misc=ALL-UNNAMED\n\n# Adaptive Query Execution\nspark.sql.adaptive.enabled                     true\nspark.sql.adaptive.coalescePartitions.enabled  true\nspark.sql.adaptive.skewJoin.enabled            true\n\n# S3 Optimizations\nspark.hadoop.fs.s3a.fast.upload.buffer         disk\nspark.hadoop.fs.s3a.multipart.size             128M\nspark.hadoop.fs.s3a.connection.maximum         200\n"})})}),(0,i.jsx)(l.A,{value:"sparkapp",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: "sparkoperator.k8s.io/v1beta2"\nkind: SparkApplication\nmetadata:\n  name: "test-gluten-velox"\n  namespace: spark-team-a\nspec:\n  type: Scala\n  mode: cluster\n  image: "your-registry/spark-gluten-velox:latest"\n  imagePullPolicy: Always\n  sparkVersion: "3.5.2"\n  mainClass: org.apache.spark.examples.SparkPi\n  mainApplicationFile: "local:///opt/spark/examples/jars/spark-examples_2.12-3.5.2.jar"\n  arguments:\n    - "1000"  # High iteration count to see Velox benefits\n\n  driver:\n    cores: 2\n    memory: "4g"\n    memoryOverhead: "1g"\n    serviceAccount: spark-team-a\n    env:\n      - name: JAVA_HOME\n        value: "/usr/lib/jvm/java-17-openjdk-amd64"\n\n  executor:\n    cores: 4\n    memory: "8g"\n    memoryOverhead: "2g"\n    instances: 2\n    serviceAccount: spark-team-a\n    env:\n      - name: JAVA_HOME\n        value: "/usr/lib/jvm/java-17-openjdk-amd64"\n\n  sparkConf:\n    # Gluten Configuration\n    "spark.plugins": "org.apache.gluten.GlutenPlugin"\n    "spark.shuffle.manager": "org.apache.spark.shuffle.sort.ColumnarShuffleManager"\n    "spark.memory.offHeap.enabled": "true"\n    "spark.memory.offHeap.size": "2g"\n\n    # Debugging and Monitoring\n    "spark.gluten.sql.debug": "true"\n    "spark.sql.planChangeLog.level": "WARN"\n    "spark.eventLog.enabled": "true"\n    "spark.eventLog.dir": "s3a://your-bucket/spark-event-logs"\n\n    # Java 17 Compatibility\n    "spark.driver.extraJavaOptions": "--add-opens=java.base/java.nio=ALL-UNNAMED"\n    "spark.executor.extraJavaOptions": "--add-opens=java.base/java.nio=ALL-UNNAMED"\n'})})})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Why these defaults?"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spark.plugins"})," activates the ",(0,i.jsx)(n.a,{href:"https://github.com/apache/incubator-gluten",children:"Apache Gluten"})," runtime so query plans can offload to Velox."]}),"\n",(0,i.jsx)(n.li,{children:"Off-heap configuration reserves Arrow buffers that prevent JVM garbage collection pressure."}),"\n",(0,i.jsx)(n.li,{children:"Adaptive query execution settings keep shuffle partitions balanced under both native and Gluten runs."}),"\n",(0,i.jsxs)(n.li,{children:["S3 connector tuning avoids bottlenecks when scanning the 1TB ",(0,i.jsx)(n.a,{href:"https://www.tpc.org/tpcds/",children:"TPC-DS"})," dataset from ",(0,i.jsx)(n.a,{href:"https://aws.amazon.com/s3/",children:"Amazon S3"}),"."]}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"running-benchmarks",children:"Running Benchmarks"}),"\n",(0,i.jsx)(n.p,{children:"Follow the workflow below to reproduce the benchmark from data generation through post-run analysis."}),"\n",(0,i.jsx)(n.h3,{id:"tpc-ds-benchmark-setup",children:"TPC-DS Benchmark Setup"}),"\n",(0,i.jsxs)(n.p,{children:["The complete TPC-DS harness is available in the repository: ",(0,i.jsx)(n.a,{href:"https://github.com/awslabs/data-on-eks/blob/main/analytics/terraform/spark-k8s-operator/examples/benchmark/tpcds-benchmark-spark-gluten-velox/README.md",children:"examples/benchmark/tpcds-benchmark-spark-gluten-velox/README.md"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"step-1-generate-tpc-ds-data-1tb-scale",children:"Step 1: Generate TPC-DS Data (1TB scale)"}),"\n",(0,i.jsxs)(n.p,{children:["Follow this link to ",(0,i.jsx)(n.a,{href:"https://awslabs.github.io/data-on-eks/docs/benchmarks/spark-operator-benchmark/data-generation",children:"generate the test data in S3 bucket"})]}),"\n",(0,i.jsx)(n.h4,{id:"step-2-submit-native--gluten-jobs",children:"Step 2: Submit Native & Gluten Jobs"}),"\n",(0,i.jsxs)(n.admonition,{title:"Prerequisites",type:"warning",children:[(0,i.jsx)(n.p,{children:"Before submitting benchmark jobs, ensure:"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"S3 Bucket is configured"}),": Export the S3 bucket name from your Terraform outputs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Benchmark data is available"}),": Verify TPC-DS 1TB data exists in the same S3 bucket"]}),"\n"]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Export S3 bucket name from Terraform outputs:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Export S3 bucket variable"',children:"# Get S3 bucket name from Terraform outputs\nexport S3_BUCKET=$(terraform -chdir=path/to/your/terraform output -raw s3_bucket_id_data)\n\n# Verify the bucket and data exist\naws s3 ls s3://$S3_BUCKET/blog/BLOG_TPCDS-TEST-3T-partitioned/\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Submit benchmark jobs:"})}),"\n",(0,i.jsxs)(t.A,{groupId:"tpcds-submit",defaultValue:"native",values:[{label:"Native Spark",value:"native"},{label:"Gluten + Velox",value:"gluten"}],children:[(0,i.jsx)(l.A,{value:"native",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Submit native Spark benchmark"',children:"envsubst < tpcds-benchmark-native-c5d.yaml | kubectl apply -f -\n"})})}),(0,i.jsx)(l.A,{value:"gluten",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Submit Gluten + Velox benchmark"',children:"envsubst < tpcds-benchmark-gluten-c5d.yaml | kubectl apply -f -\n"})})})]}),"\n",(0,i.jsx)(n.h4,{id:"step-3-monitor-benchmark-progress",children:"Step 3: Monitor Benchmark Progress"}),"\n",(0,i.jsxs)(t.A,{groupId:"tpcds-monitor",defaultValue:"status",values:[{label:"Status",value:"status"},{label:"Logs",value:"logs"},{label:"History UI",value:"history"}],children:[(0,i.jsx)(l.A,{value:"status",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Check SparkApplication status"',children:"kubectl get sparkapplications -n spark-team-a\n"})})}),(0,i.jsx)(l.A,{value:"logs",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Tail benchmark logs"',children:"kubectl logs -f -n spark-team-a -l spark-app-name=tpcds-benchmark-native-c5d\nkubectl logs -f -n spark-team-a -l spark-app-name=tpcds-benchmark-gluten-c5d\n"})})}),(0,i.jsx)(l.A,{value:"history",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Port-forward Spark History Server"',children:"kubectl port-forward svc/spark-history-server 18080:80 -n spark-history-server\n"})})})]}),"\n",(0,i.jsxs)(n.h4,{id:"step-4-spark-history-server-analysis",children:["Step 4: ",(0,i.jsx)(n.a,{href:"https://spark.apache.org/docs/latest/monitoring.html#viewing-after-the-fact",children:"Spark History Server"})," Analysis"]}),"\n",(0,i.jsx)(n.p,{children:"Access detailed execution plans and metrics:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Open Spark History Server locally"',children:"kubectl port-forward svc/spark-history-server 18080:80 -n spark-history-server\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Navigation Checklist",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Point your browser to ",(0,i.jsx)(n.code,{children:"http://localhost:18080"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Locate both ",(0,i.jsx)(n.code,{children:"spark-<ID>-native"})," and ",(0,i.jsx)(n.code,{children:"spark-<ID>-gluten"})," applications."]}),"\n",(0,i.jsxs)(n.li,{children:["In the ",(0,i.jsx)(n.a,{href:"https://spark.apache.org/docs/latest/web-ui.html",children:"Spark UI"}),", inspect:","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"SQL tab execution plans"}),"\n",(0,i.jsxs)(n.li,{children:["Presence of ",(0,i.jsx)(n.code,{children:"WholeStageTransformer"})," stages in Gluten jobs"]}),"\n",(0,i.jsx)(n.li,{children:"Stage execution times across both runs"}),"\n",(0,i.jsx)(n.li,{children:"Executor metrics for off-heap memory usage"}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"step-5-summarize-findings",children:"Step 5: Summarize Findings"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Export runtime metrics from the Spark UI or event logs for both jobs."}),"\n",(0,i.jsx)(n.li,{children:"Capture query-level comparisons (duration, stage counts, fallbacks) to document where Gluten accelerated or regressed."}),"\n",(0,i.jsx)(n.li,{children:"Feed the results into cost or capacity planning discussions\u2014speedups translate directly into smaller clusters or faster SLA achievement."}),"\n"]})}),"\n",(0,i.jsx)(n.h3,{id:"key-metrics-to-analyze",children:"Key Metrics to Analyze"}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsx)(n.p,{children:"As you compare native and Gluten runs, focus on the following signals:"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Query Plan Differences"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Native: ",(0,i.jsx)(n.code,{children:"WholeStageCodegen"})," stages"]}),"\n",(0,i.jsxs)(n.li,{children:["Gluten: ",(0,i.jsx)(n.code,{children:"WholeStageTransformer"})," stages"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Memory Usage Patterns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Native: High on-heap usage, frequent GC"}),"\n",(0,i.jsx)(n.li,{children:"Gluten: Off-heap Arrow buffers, minimal GC"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CPU Utilization"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Native: 60-70% efficiency"}),"\n",(0,i.jsx)(n.li,{children:"Gluten: 80-90+ % efficiency with SIMD"}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"performance-analysis-and-pitfalls",children:"Performance Analysis and Pitfalls"}),"\n",(0,i.jsx)(n.p,{children:"Gluten reduces friction for Spark adopters, but a few tuning habits help avoid regressions. Use the notes below as a checklist during rollout."}),"\n",(0,i.jsx)(n.h3,{id:"common-configuration-pitfalls",children:"Common Configuration Pitfalls"}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# \u274C WRONG - Insufficient off-heap memory\n"spark.memory.offHeap.size": "512m"  # Too small for real workloads\n\n# \u2705 CORRECT - Adequate off-heap allocation\n"spark.memory.offHeap.size": "4g"    # 20-30% of executor memory\n\n# \u274C WRONG - Missing Java module access\n# Results in: java.lang.IllegalAccessError\n\n# \u2705 CORRECT - Required for Java 17\n"spark.executor.extraJavaOptions": "--add-opens=java.base/java.nio=ALL-UNNAMED"\n\n# \u274C WRONG - Velox backend not enabled\n"spark.gluten.sql.columnar.backend.ch.enabled": "true"  # ClickHouse, not Velox!\n\n# \u2705 CORRECT - Velox backend configuration\n"spark.gluten.sql.columnar.backend.velox.enabled": "true"\n'})})}),"\n",(0,i.jsx)(n.h3,{id:"performance-optimization-tips",children:"Performance Optimization Tips"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Memory Sizing"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Off-heap: ",(0,i.jsx)("span",{className:"badge badge--warning highlight-badge",children:"20-30% of executor memory"})]}),"\n",(0,i.jsxs)(n.li,{children:["Executor overhead: ",(0,i.jsx)("span",{className:"badge badge--warning highlight-badge",children:"15-20%"})," reserved for Arrow buffers"]}),"\n",(0,i.jsxs)(n.li,{children:["Driver memory: ",(0,i.jsx)("span",{className:"badge badge--info highlight-badge",children:"4-8 GB"})," for complex queries"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CPU Optimization"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use AVX2-capable instance types (Intel Xeon, AMD EPYC)"}),"\n",(0,i.jsx)(n.li,{children:"Avoid ARM instances for maximum SIMD benefit"}),"\n",(0,i.jsxs)(n.li,{children:["Set ",(0,i.jsx)("span",{className:"badge badge--primary highlight-badge",children:"spark.executor.cores = 4-8"})," for optimal vectorization"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"I/O Configuration"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Enable S3A fast upload: ",(0,i.jsx)(n.code,{children:"spark.hadoop.fs.s3a.fast.upload.buffer=disk"})]}),"\n",(0,i.jsxs)(n.li,{children:["Increase connection pool to ",(0,i.jsx)("span",{className:"badge badge--info highlight-badge",children:"200 connections"}),": ",(0,i.jsx)(n.code,{children:"spark.hadoop.fs.s3a.connection.maximum=200"})]}),"\n",(0,i.jsxs)(n.li,{children:["Use larger multipart sizes of ",(0,i.jsx)("span",{className:"badge badge--info highlight-badge",children:"128 MB"}),": ",(0,i.jsx)(n.code,{children:"spark.hadoop.fs.s3a.multipart.size=128M"})]}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,i.jsx)(n.h3,{id:"debugging-gluten-issues",children:"Debugging Gluten Issues"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Enable debug logging\n"spark.gluten.sql.debug": "true"\n"spark.sql.planChangeLog.level": "WARN"\n\n# Check for fallback operations\nkubectl logs <spark-pod> | grep -i "fallback"\n\n# Verify Velox library loading\nkubectl exec <spark-pod> -- find /opt/spark -name "*velox*"\n\n# Monitor off-heap memory usage\nkubectl top pod <spark-pod> --containers\n'})})}),"\n",(0,i.jsx)(n.h3,{id:"verifying-glutenvelox-execution-in-spark-history-server",children:"Verifying Gluten+Velox Execution in Spark History Server"}),"\n",(0,i.jsx)(n.p,{children:"When Gluten+Velox is working correctly, you'll see distinctive execution patterns in the Spark History Server that indicate native acceleration:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Indicators of Gluten+Velox Execution:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"VeloxSparkPlanExecApi.scala"})," references in stages and tasks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WholeStageCodegenTransformer"})," nodes in the DAG visualization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ColumnarBroadcastExchange"})," operations instead of standard broadcast"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GlutenWholeStageColumnarRDD"})," in the RDD lineage"]}),"\n",(0,i.jsxs)(n.li,{children:["Methods like ",(0,i.jsx)(n.code,{children:"executeColumnar"})," and ",(0,i.jsx)(n.code,{children:"mapPartitions"})," at VeloxSparkPlanExecApi.scala lines"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example DAG Pattern:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"AQEShuffleRead\n\u251C\u2500\u2500 ColumnarBroadcastExchange\n\u251C\u2500\u2500 ShuffledColumnarBatchRDD [Unordered]\n\u2502   \u2514\u2500\u2500 executeColumnar at VeloxSparkPlanExecApi.scala:630\n\u2514\u2500\u2500 MapPartitionsRDD [Unordered]\n    \u2514\u2500\u2500 mapPartitions at VeloxSparkPlanExecApi.scala:632\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"What This Means:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"VeloxSparkPlanExecApi"}),": Gluten's interface layer to the Velox execution engine"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Columnar operations"}),": Data processed in columnar format (more efficient than row-by-row)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WholeStageTransformer"}),": Multiple Spark operations fused into single native Velox operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Off-heap processing"}),": Memory management handled by Velox, not JVM garbage collector"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If you see traditional Spark operations like ",(0,i.jsx)(n.code,{children:"mapPartitions at <WholeStageCodegen>"})," without Velox references, Gluten may have fallen back to JVM execution for unsupported operations."]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["Apache Gluten with the Velox backend consistently accelerates Spark SQL workloads on Amazon EKS, delivering a ",(0,i.jsx)("span",{className:"badge badge--success highlight-badge",children:"1.72\xd7 overall speedup"})," and driving ",(0,i.jsx)("span",{className:"badge badge--success highlight-badge",children:"\u224842% lower compute spend"})," in our TPC-DS 1TB benchmark. The performance gains stem from offloading compute-intensive operators to a native, vectorized engine, reducing JVM overhead and improving CPU efficiency."]}),"\n",(0,i.jsx)(n.p,{children:"When planning your rollout:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Start by mirroring the configurations documented above, then tune off-heap memory and shuffle behavior based on workload shape."}),"\n",(0,i.jsx)(n.li,{children:"Use the Spark Operator deployment flow to A/B test native and Gluten runs so you can quantify gains and detect fallbacks early."}),"\n",(0,i.jsx)(n.li,{children:"Monitor Spark UI and metrics exports to build a data-backed case for production adoption or cluster right-sizing."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"With the Docker image, Spark defaults, and example manifests provided in this guide, you can reproduce the benchmark end-to-end and adapt the pattern for your own cost and performance goals."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["For complete implementation examples and benchmark results, see the ",(0,i.jsx)(n.a,{href:"https://github.com/awslabs/data-on-eks/tree/main/analytics/terraform/spark-k8s-operator/examples/benchmark/tpcds-benchmark-spark-gluten-velox",children:"GitHub repository"}),"."]})})]})}function m(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(j,{...e})}):j(e)}}}]);