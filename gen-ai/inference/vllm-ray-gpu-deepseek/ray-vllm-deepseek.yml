---
apiVersion: v1
kind: Namespace
metadata:
  name: rayserve-vllm

---
apiVersion: v1
kind: Secret
metadata:
  name: hf-token
  namespace: rayserve-vllm
data:
  hf-token: $HUGGING_FACE_HUB_TOKEN

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vllm-serve-script
  namespace: rayserve-vllm
data:
  vllm_serve.py: |
    import os
    import logging
    from typing import Optional

    from fastapi import FastAPI
    from starlette.requests import Request
    from starlette.responses import StreamingResponse, JSONResponse

    from ray import serve

    from vllm.engine.arg_utils import AsyncEngineArgs
    from vllm.engine.async_llm_engine import AsyncLLMEngine
    from vllm.entrypoints.openai.protocol import (
        ChatCompletionRequest,
        ChatCompletionResponse,
        ErrorResponse,
    )
    from vllm.entrypoints.openai.serving_chat import OpenAIServingChat
    from vllm.entrypoints.openai.serving_models import OpenAIServingModels, BaseModelPath
    from vllm.config import ModelConfig
    from vllm.logger import init_logger

    logger = init_logger(__name__)

    # Initialize FastAPI correctly
    app = FastAPI()

    @serve.deployment(name="VLLMDeployment", health_check_period_s=10)
    @serve.ingress(app)
    class VLLMDeployment:
        def __init__(
            self,
            model: str,
            tensor_parallel_size: int,
            max_num_seqs: int,
            block_size: int,
            max_model_len: int,
            response_role: str = "assistant",
            chat_template: Optional[str] = None,
        ):
            logger.info("VLLMDeployment is initializing...")

            self.model_config = ModelConfig(
                model=model,
                task="generate",  # Corrected to match supported tasks
                tokenizer=model,  # Use same model path for tokenizer
                tokenizer_mode="auto",  # Default to 'auto'
                trust_remote_code=True,  # Trust remote code for custom models
                dtype="bfloat16",  # Use model default torch_dtype=bfloat16
                seed=42,  # Default seed value
                max_model_len=max_model_len,  # Already provided
            )

            self.models = OpenAIServingModels(
                engine_client=None,  # Ensure it initializes later
                model_config=self.model_config,
                base_model_paths=[BaseModelPath(name=model, model_path=model)]
            )

            # Initialize VLLM Engine
            engine_args = AsyncEngineArgs(
                model=model,
                tensor_parallel_size=tensor_parallel_size,
                max_num_seqs=max_num_seqs,
                block_size=block_size,
                max_model_len=max_model_len,
                disable_log_requests=True,
                device="cuda",
                dtype="bfloat16",  # Matches model config
                trust_remote_code=True,
            )
            logger.info(f"Engine Args Initialized: {engine_args}")

            self.engine = AsyncLLMEngine.from_engine_args(engine_args)
            self.response_role = response_role
            self.chat_template = chat_template
            self.openai_serving_chat = None

        async def health_check(self):
            """Health check for Ray Serve deployment"""
            logger.info("Health check passed for VLLMDeployment.")
            return "OK"

        @app.get("/v1/models")
        async def get_models(self):
            """List available models in OpenAI format."""
            return JSONResponse(
                content={
                    "object": "list",
                    "data": [
                        {
                            "id": self.model_config.model,
                            "object": "model",
                            "owned_by": "organization",
                            "permission": [],
                        }
                    ],
                }
            )

        @app.post("/v1/chat/completions")
        async def create_chat_completion(
            self, request: ChatCompletionRequest, raw_request: Request
        ):
            """Handle chat requests with OpenAI-compatible response format."""
            if not self.openai_serving_chat:
                logger.info("Initializing OpenAIServingChat instance...")

                self.openai_serving_chat = OpenAIServingChat(
                    engine_client=self.engine,
                    model_config=self.model_config,
                    models=self.models,
                    response_role=self.response_role,
                    request_logger=None,
                    chat_template=self.chat_template,
                    chat_template_content_format="default",
                    return_tokens_as_token_ids=False,
                    enable_auto_tools=False,
                    tool_parser=None,
                    enable_prompt_tokens_details=False,
                )

            logger.info(f" Received request: {request}")
            generator = await self.openai_serving_chat.create_chat_completion(request, raw_request)

            if isinstance(generator, ErrorResponse):
                return JSONResponse(content=generator.model_dump(), status_code=generator.code)

            if request.stream:
                return StreamingResponse(content=generator, media_type="text/event-stream")
            else:
                assert isinstance(generator, ChatCompletionResponse)
                return JSONResponse(content=generator.model_dump())

    deployment = VLLMDeployment.bind(
        model=os.environ.get('MODEL_ID', 'deepseek-ai/DeepSeek-R1-Distill-Llama-8B'),
        tensor_parallel_size=int(os.environ.get('TENSOR_PARALLEL_SIZE', '1')),
        max_num_seqs=int(os.environ.get('MAX_NUM_SEQS', '32')),
        block_size=int(os.environ.get('BLOCK_SIZE', '4096')),
        max_model_len=int(os.environ.get('MAX_MODEL_LEN', '8192')),
    )

---
apiVersion: ray.io/v1
kind: RayService
metadata:
  name: vllm
  namespace: rayserve-vllm
spec:
  serviceUnhealthySecondThreshold: 1800
  deploymentUnhealthySecondThreshold: 1800
  serveConfigV2: |
    applications:
      - name: deepseek
        import_path: vllm_serve:deployment
        route_prefix: "/"
        runtime_env:
          env_vars:
            LD_LIBRARY_PATH: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
            MODEL_ID: "deepseek-ai/DeepSeek-R1-Distill-Llama-8B"
            GPU_MEMORY_UTILIZATION: "0.9"
            MAX_MODEL_LEN: "8192"
            MAX_NUM_SEQS: "4"
            MAX_NUM_BATCHED_TOKENS: "16384"
            TRUST_REMOTE_CODE: "True"
            TENSOR_PARALLEL_SIZE: "1"
        deployments:
          - name: VLLMDeployment
            autoscaling_config:
              metrics_interval_s: 0.2
              min_replicas: 1
              max_replicas: 4
              look_back_period_s: 2
              downscale_delay_s: 600
              upscale_delay_s: 30
              target_num_ongoing_requests_per_replica: 20
            graceful_shutdown_timeout_s: 5
            max_concurrent_queries: 100
            ray_actor_options:
              num_cpus: 1
              num_gpus: 1
  rayClusterConfig:
    rayVersion: '2.41.0'
    enableInTreeAutoscaling: true
    headGroupSpec:
      headService:
        metadata:
          name: vllm
          namespace: rayserve-vllm
      rayStartParams:
        dashboard-host: '0.0.0.0'
        num-cpus: "0"
      template:
        spec:
          containers:
            - name: ray-head
              image: public.ecr.aws/data-on-eks/ray-2.41.0-py310-cu118-vllm0.7.0:latest
              imagePullPolicy: IfNotPresent
              lifecycle:
                preStop:
                  exec:
                    command: ["/bin/sh", "-c", "ray stop"]
              ports:
                - containerPort: 6379
                  name: gcs
                - containerPort: 8265
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
              resources:
                limits:
                  cpu: 2
                  memory: "12G"
                requests:
                  cpu: 2
                  memory: "12G"
              env:
                - name: VLLM_PORT
                  value: "8004"
                - name: LD_LIBRARY_PATH
                  value: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
                - name: HUGGING_FACE_HUB_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: hf-token
                      key: hf-token
                - name: RAY_GRAFANA_HOST
                  value: http://kube-prometheus-stack-grafana.kube-prometheus-stack.svc:80
                - name: RAY_PROMETHEUS_HOST
                  value: http://kube-prometheus-stack-prometheus.kube-prometheus-stack.svc:9090
              volumeMounts:
                - mountPath: /tmp/ray
                  name: ray-logs
                - name: vllm-script
                  mountPath: /home/ray/vllm_serve.py
                  subPath: vllm_serve.py
          volumes:
            - name: ray-logs
              emptyDir: {}
            - name: vllm-script
              configMap:
                name: vllm-serve-script
          nodeSelector:
            NodeGroupType: x86-cpu-karpenter
            type: karpenter

    workerGroupSpecs:
      - replicas: 1
        minReplicas: 1
        maxReplicas: 4
        groupName: gpu-group
        rayStartParams: {}
        template:
          spec:
            containers:
              - name: ray-worker
                image: public.ecr.aws/data-on-eks/ray-2.41.0-py310-cu118-vllm0.7.0:latest
                imagePullPolicy: IfNotPresent
                lifecycle:
                  preStop:
                    exec:
                      command: ["/bin/sh", "-c", "ray stop"]
                resources:
                  limits:
                    cpu: 12
                    memory: "60G"
                    nvidia.com/gpu: 1
                  requests:
                    cpu: 12
                    memory: "60G"
                    nvidia.com/gpu: 1
                env:
                  - name: VLLM_PORT
                    value: "8004"
                  - name: LD_LIBRARY_PATH
                    value: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
                  - name: HUGGING_FACE_HUB_TOKEN
                    valueFrom:
                      secretKeyRef:
                        name: hf-token
                        key: hf-token
                volumeMounts:
                  - mountPath: /tmp/ray
                    name: ray-logs
                  - mountPath: /dev/shm
                    name: dshm
                  - name: vllm-script
                    mountPath: /home/ray/vllm_serve.py
                    subPath: vllm_serve.py
            volumes:
              - name: dshm
                emptyDir:
                  medium: Memory
              - name: ray-logs
                emptyDir: {}
              - name: vllm-script
                configMap:
                  name: vllm-serve-script
            nodeSelector:
              NodeGroupType: g5-gpu-karpenter
              type: karpenter
            tolerations:
              - key: "nvidia.com/gpu"
                operator: "Exists"
                effect: "NoSchedule"
