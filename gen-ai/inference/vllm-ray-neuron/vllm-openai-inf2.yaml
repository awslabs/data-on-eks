---
apiVersion: ray.io/v1
kind: RayService
metadata:
  name: vllm-llama3-inf2
  namespace: vllm
spec:
  serviceUnhealthySecondThreshold: 900
  deploymentUnhealthySecondThreshold: 300
  serveConfigV2: |
    applications:
      - name: vllm
        import_path: vllm_serve:deployment
        route_prefix: "/"
        runtime_env:
          env_vars:
            MODEL_ID: "NousResearch/Meta-Llama-3-8B-Instruct"
            TENSOR_PARALLELISM: "2"
            BLOCK_SIZE: "4096"
            MAX_MODEL_LEN: "4096"
            MAX_NUM_SEQS: "10"
            PORT: "8000"
            NEURON_CC_FLAGS: "-O1"
            LD_LIBRARY_PATH: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
            NEURON_CORES: "2"
        deployments:
          - name: VLLMDeployment
            autoscaling_config:
              min_replicas: 1
              max_replicas: 3
              target_num_ongoing_requests_per_replica: 1
            ray_actor_options:
              num_cpus: 2
              resources: {"neuron_cores": 2}
              runtime_env:
                env_vars:
                  LD_LIBRARY_PATH: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
  rayClusterConfig:
    rayVersion: '2.32.0'
    enableInTreeAutoscaling: true
    headGroupSpec:
      headService:
        metadata:
          name: vllm
          namespace: vllm
      rayStartParams:
        dashboard-host: '0.0.0.0'
        num-cpus: "0"
      template:
        spec:
          schedulerName: my-scheduler  # Correct placement
          containers:
            - name: head
              image: public.ecr.aws/data-on-eks/vllm-ray-neuron-mistral7b:latest
              imagePullPolicy: Always
              lifecycle:
                preStop:
                  exec:
                    command: ["/bin/sh", "-c", "ray stop"]
              ports:
                - containerPort: 6379
                  name: gcs
                - containerPort: 8265
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
              volumeMounts:
                - mountPath: /tmp/ray
                  name: ray-logs
                - name: vllm-script
                  mountPath: /home/ray/vllm_serve.py
                  subPath: vllm_serve.py
              resources:
                limits:
                  cpu: "2"
                  memory: "20G"
                requests:
                  cpu: "2"
                  memory: "20G"
              env:
                - name: MODEL_ID
                  value: "NousResearch/Meta-Llama-3-8B-Instruct"
                - name: PORT
                  value: "8000"
                - name: LD_LIBRARY_PATH
                  value: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
          volumes:
            - name: ray-logs
              emptyDir: {}
            - name: vllm-script
              configMap:
                name: vllm-serve-script
          nodeSelector:
            instanceType: mixed-x86
            workload: rayhead
    workerGroupSpecs:
      - groupName: inf2-group
        replicas: 1
        minReplicas: 1
        maxReplicas: 3
        rayStartParams:
          resources: '"{\"neuron_cores\": 2}"'
        template:
          spec:
            schedulerName: my-scheduler  # Correct placement
            containers:
              - name: worker
                image: public.ecr.aws/data-on-eks/vllm-ray-neuron-mistral7b:latest
                imagePullPolicy: Always
                lifecycle:
                  preStop:
                    exec:
                      command: ["/bin/sh", "-c", "ray stop"]
                resources:
                  # limits: # aiming for inf2.8xlarge; Takes 10 mins 40 secs to load Llama3 8b model with 21.3GB Accelerator memory
                  #   cpu: "4"
                  #   memory: "16G"
                  #   aws.amazon.com/neuron: "1"
                  # requests:
                  #   cpu: "2"
                  #   memory: "12G"
                  #   aws.amazon.com/neuron: "1"
                  limits: # aiming for inf2.8xlarge; Takes 10 mins 40 secs to load Llama3 8b model with 21.3GB Accelerator memory
                    cpu: "30"
                    memory: "110G"
                    aws.amazon.com/neuron: "1"
                  requests:
                    cpu: "30"
                    memory: "110G"
                    aws.amazon.com/neuron: "1"
                  # limits: # aiming for inf2.48xlarge; Takes 3 mins to load Llama3 8b model with 21.3GB Accelerator memory
                  #   cpu: "90"
                  #   memory: "360G"
                  #   aws.amazon.com/neuron: "12"
                  # requests:
                  #   cpu: "90"
                  #   memory: "360G"
                  #   aws.amazon.com/neuron: "12"
                env:
                  - name: MODEL_ID
                    value: "NousResearch/Meta-Llama-3-8B-Instruct"
                  - name: PORT
                    value: "8000"
                  - name: LD_LIBRARY_PATH
                    value: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
                  - name: NEURON_RT_LOG_LEVEL
                    value: "INFO"
                  # - name: NEURON_RT_NUM_CORES
                  #   value: "12"
                  # - name: NEURON_RT_VISIBLE_CORES
                  #   value: "0-11"
                volumeMounts:
                  - mountPath: /tmp/ray
                    name: ray-logs
                  - mountPath: /dev/shm
                    name: dshm
                  - name: vllm-script
                    mountPath: /home/ray/vllm_serve.py
                    subPath: vllm_serve.py
            volumes:
              - name: dshm
                emptyDir:
                  medium: Memory
              - name: ray-logs
                emptyDir: {}
              - name: vllm-script
                configMap:
                  name: vllm-serve-script
            nodeSelector:
              instanceType: inferentia-inf2
              provisionerType: Karpenter
            tolerations:
              - key: "aws.amazon.com/neuron"
                operator: "Exists"
                effect: "NoSchedule"
              - key: "hub.jupyter.org/dedicated"
                operator: "Equal"
                value: "user"
                effect: "NoSchedule"
