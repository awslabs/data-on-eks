# gradio-deploy.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: gradio-llama2-inf2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gradio-deployment
  namespace: gradio-llama2-inf2
  labels:
    app: gradio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gradio
  template:
    metadata:
      labels:
        app: gradio
    spec:
      containers:
        - name: gradio
          image: public.ecr.aws/data-on-eks/gradio-web-app-base:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 7860
          resources:
            requests:
              cpu: "512m"
              memory: "2048Mi"
            limits:
              cpu: "1"
              memory: "4096Mi"
          env:
            - name: MODEL_ENDPOINT
              value: "/infer"
            - name: SERVICE_NAME
              value: "http://llama2-serve-svc.llama2.svc.cluster.local:8000"
          volumeMounts:
            - name: gradio-app-script
              mountPath: /app/gradio-app.py
              subPath: gradio-app-llama2-inf2.py
      volumes:
        - name: gradio-app-script
          configMap:
            name: gradio-app-script
---
apiVersion: v1
kind: Service
metadata:
  name: gradio-service
  namespace: gradio-llama2-inf2
spec:
  selector:
    app: gradio
  ports:
    - name: http
      protocol: TCP
      port: 7860
      targetPort: 7860
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gradio-app-script
  namespace: gradio-llama2-inf2
data:
  gradio-app-llama2-inf2.py: |
    import gradio as gr
    import requests
    import os

    # Constants for model endpoint and service name
    model_endpoint = "/infer"
    service_name = os.environ.get("SERVICE_NAME", "http://localhost:8000")

    # Function to generate text
    def text_generation(message, history):
        prompt = message

        # Create the URL for the inference
        url = f"{service_name}{model_endpoint}"

        try:
            # Send the request to the model service
            response = requests.get(url, params={"sentence": prompt}, timeout=180)
            response.raise_for_status()  # Raise an exception for HTTP errors

            full_output = response.json()[0]
            # Removing the original question from the output
            answer_only = full_output.replace(prompt, "", 1).strip('["]?\n')

            # Safety filter to remove harmful or inappropriate content
            answer_only = filter_harmful_content(answer_only)
            return answer_only
        except requests.exceptions.RequestException as e:
            # Handle any request exceptions (e.g., connection errors)
            return f"AI: Error: {str(e)}"

    # Define the safety filter function (you can implement this as needed)
    def filter_harmful_content(text):
        # TODO: Implement a safety filter to remove any harmful or inappropriate content from the text

        # For now, simply return the text as-is
        return text

    # Define the Gradio ChatInterface
    chat_interface = gr.ChatInterface(
        text_generation,
        chatbot=gr.Chatbot(line_breaks=True),
        textbox=gr.Textbox(placeholder="Ask me a question", container=False, scale=7),
        title="Llama2/3 AI Chat",
        description="Ask me any question",
        theme="soft",
        examples=["How many languages are in India", "What is Generative AI?"],
        cache_examples=False,
        retry_btn=None,
        undo_btn="Delete Previous",
        clear_btn="Clear",
    )

    # Launch the ChatInterface
    chat_interface.launch(server_name="0.0.0.0")
