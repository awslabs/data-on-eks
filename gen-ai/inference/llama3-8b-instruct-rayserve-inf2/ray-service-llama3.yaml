apiVersion: v1
kind: Namespace
metadata:
  name: llama3
---
apiVersion: v1
kind: Secret
metadata:
  name: hf-token
  namespace: llama3
data:
  hf-token: $HUGGING_FACE_HUB_TOKEN
---
apiVersion: ray.io/v1
kind: RayService
metadata:
  name: llama3
  namespace: llama3
spec:
  serviceUnhealthySecondThreshold: 900
  deploymentUnhealthySecondThreshold: 900
  serveConfigV2: |
    applications:
      - name: llama3
        import_path: ray_serve_llama3:entrypoint
        runtime_env:
          env_vars:
            MODEL_ID: meta-llama/Meta-Llama-3-8B-Instruct
  rayClusterConfig:
    rayVersion: '2.21.0'
    headGroupSpec:
      headService:
        metadata:
          name: llama3
          namespace: llama3
      rayStartParams:
        dashboard-host: '0.0.0.0'
      template:
        spec:
          schedulerName: my-scheduler
          containers:
          - name: head
            image: public.ecr.aws/data-on-eks/ray-serve-inf2-llama3:latest # Image created using the Dockerfile attached in the folder
            imagePullPolicy: Always # Ensure the image is always pulled when updated
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "ray stop"]
            ports:
            - containerPort: 6379
              name: gcs
            - containerPort: 8265
              name: dashboard
            - containerPort: 10001
              name: client
            - containerPort: 8000
              name: serve
            volumeMounts:
            - mountPath: /tmp/ray
              name: ray-logs
            resources:
              limits:
                cpu: 4
                memory: 20Gi
              requests:
                cpu: 4
                memory: 20Gi
            env:
            - name: HUGGING_FACE_HUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hf-token
                  key: hf-token
            - name: LD_LIBRARY_PATH
              value: "/home/ray/anaconda3/lib"
          nodeSelector: # This is using Karpenter Nodes with the provisioner label
            instanceType: mixed-x86
            provisionerType: Karpenter
            workload: rayhead
          volumes:
          - name: ray-logs
            emptyDir: {}
    workerGroupSpecs:
    - groupName: inf2
      replicas: 1
      minReplicas: 1
      maxReplicas: 1
      rayStartParams: {}
      template:
        spec:
          schedulerName: my-scheduler
          containers:
          - name: worker
            image: public.ecr.aws/data-on-eks/ray-serve-inf2-llama3:latest
            imagePullPolicy: Always # Ensure the image is always pulled when updated
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "ray stop"]
            resources:
              limits:
                cpu: "180"
                memory: "700G"
                aws.amazon.com/neuron: "12"
              requests:
                cpu: "180"
                memory: "700G"
                aws.amazon.com/neuron: "12"
            env:
            - name: LD_LIBRARY_PATH
              value: /home/ray/anaconda3/lib
            - name: HUGGING_FACE_HUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hf-token
                  key: hf-token
          nodeSelector:
            instanceType: inferentia-inf2
            provisionerType: Karpenter
          tolerations:
          - key: "aws.amazon.com/neuron"
            operator: "Exists"
            effect: "NoSchedule"
          - key: "hub.jupyter.org/dedicated"
            operator: "Equal"
            value: "user"
            effect: "NoSchedule"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: llama3
  namespace: llama3
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/$1"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      # Ray Dashboard
      - path: /dashboard/(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: llama3
            port:
              number: 8265
      # Ray Serve
      - path: /serve/(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: llama3
            port:
              number: 8000
