#-------------------------------------------------------------------
# Deployment instructions
#-------------------------------------------------------------------
# pre-requisites
#-------------------------------------------------------------------
# Step1: Deploy this blueprint https://awslabs.github.io/data-on-eks/docs/blueprints/ai-ml/trainium
# Step2: Deploy Neuron Scheduler https://awsdocs-neuron.readthedocs-hosted.com/en/latest/containers/tutorials/k8s-neuron-scheduler.html
#-------------------------------------------------------------------
# Step1: cd gen-ai/inference/vllm-rayserve-inf2
# Step2 (Optional): Build a Docker image and push it to ECR and use the image in the yaml
# Step3: kubectl apply -f vllm-rayserve-deployment.yaml
# Step4.a: pip install openai
# Step 4.b: python3 openai-client.py
#-------------------------------------------------------------------

apiVersion: v1
kind: Namespace
metadata:
  name: vllm

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vllm-serve-script
  namespace: vllm
data:
  vllm_serve.py: |
    import os
    from typing import Dict, Optional, List
    import logging
    
    from fastapi import FastAPI
    from starlette.requests import Request
    from starlette.responses import StreamingResponse, JSONResponse
    
    from ray import serve
    
    from vllm.engine.arg_utils import AsyncEngineArgs
    from vllm.engine.async_llm_engine import AsyncLLMEngine
    from vllm.entrypoints.openai.protocol import (
        ChatCompletionRequest,
        ChatCompletionResponse,
        ErrorResponse,
    )
    from vllm.entrypoints.openai.serving_chat import OpenAIServingChat
    from vllm.entrypoints.openai.serving_engine import LoRAModulePath
    from vllm.transformers_utils.config import get_config
    
    logger = logging.getLogger("ray.serve")
    app = FastAPI()
    
    def get_model_config(model_path: str) -> dict:
        try:
            config = get_config(model_path)
            return {
                "architecture": config.architectures[0] if config.architectures else None,
                "vocab_size": config.vocab_size,
                "hidden_size": config.hidden_size,
                "num_hidden_layers": config.num_hidden_layers,
                "num_attention_heads": config.num_attention_heads,
            }
        except Exception as e:
            logger.warning(f"Error reading model config: {e}")
            return {}
    
    @serve.deployment(name="VLLMDeployment")
    @serve.ingress(app)
    class VLLMDeployment:
        def __init__(
            self,
            model: str,
            tensor_parallel_size: int,
            max_num_seqs: int,
            block_size: int,
            max_model_len: int,
            response_role: str = "assistant",
            lora_modules: Optional[List[LoRAModulePath]] = None,
            chat_template: Optional[str] = None,
        ):
            model_config = get_model_config(model)
            logger.info(f"Model config: {model_config}")
            
            engine_args = AsyncEngineArgs(
                model=model,
                tensor_parallel_size=tensor_parallel_size,
                max_num_seqs=max_num_seqs,
                block_size=block_size,
                max_model_len=max_model_len,
                disable_log_requests=True,
                device="neuron",
                dtype="auto",
                trust_remote_code=True,
                rope_scaling={"type": "linear", "factor": 1.0},
                max_seq_len_to_capture=2048,
            )
            logger.info(f"Starting with engine args: {engine_args}")
            self.openai_serving_chat = None
            self.engine_args = engine_args
            self.response_role = response_role
            self.lora_modules = lora_modules
            self.chat_template = chat_template or self.default_chat_template()
            self.engine = AsyncLLMEngine.from_engine_args(engine_args)
    
        def default_chat_template(self):
            return (
                "You are a helpful assistant. Provide a clear, concise, and relevant response "
                "to the following prompt. If the answer is short, that's fine. If it requires "
                "more explanation, provide it. Always aim for accuracy and completeness:\n"
                "Human: {{messages[-1]['content']}}\n"
                "Assistant: "
            )
    
        def clean_response(self, response: str) -> str:
            lines = response.split('\n')
            cleaned_lines = [line for line in lines if not line.strip().startswith(("Human:", "Assistant:", "Instructions:", "Response:"))]
            cleaned_response = '\n'.join(cleaned_lines).strip()
            return cleaned_response
    
        @app.get("/v1/models")
        async def get_models(self):
            model_info = {
                "object": "list",
                "data": [
                    {
                        "id": self.engine_args.model,
                        "object": "model",
                        "owned_by": "organization",
                        "permission": []
                    }
                ]
            }
            return JSONResponse(content=model_info)
    
        @app.post("/v1/chat/completions")
        async def create_chat_completion(
            self, request: ChatCompletionRequest, raw_request: Request
        ):
            if not self.openai_serving_chat:
                model_config = await self.engine.get_model_config()
                served_model_names = [self.engine_args.model]
                self.openai_serving_chat = OpenAIServingChat(
                    self.engine,
                    model_config,
                    served_model_names,
                    self.response_role,
                    self.lora_modules,
                    self.chat_template,
                )
            
            # Adjust temperature for potentially more coherent outputs
            request.temperature = min(request.temperature or 0.5, 0.5)
            
            # Add a system message to maintain context
            if not any(msg["role"] == "system" for msg in request.messages):
                request.messages.insert(0, {"role": "system", "content": "You are a helpful assistant. Provide complete and relevant answers. Be concise when appropriate, but don't hesitate to give longer explanations when necessary."})
            
            logger.info(f"Request: {request}")
            generator = await self.openai_serving_chat.create_chat_completion(
                request, raw_request
            )
            if isinstance(generator, ErrorResponse):
                return JSONResponse(
                    content=generator.model_dump(), status_code=generator.code
                )
            if request.stream:
                return StreamingResponse(content=generator, media_type="text/event-stream")
            else:
                assert isinstance(generator, ChatCompletionResponse)
                generator.choices[0].message.content = self.clean_response(generator.choices[0].message.content)
                return JSONResponse(content=generator.model_dump())
    
    deployment = VLLMDeployment.bind(
        model=os.environ.get('MODEL_ID', 'meta-llama/Llama-3.2-1B-Instruct'),
        tensor_parallel_size=int(os.environ.get('TENSOR_PARALLELISM', '1')),
        max_num_seqs=int(os.environ.get('MAX_NUM_SEQS', '16')),
        block_size=int(os.environ.get('BLOCK_SIZE', '2048')),
        max_model_len=int(os.environ.get('MAX_MODEL_LEN', '2048')),
    )
    

---
apiVersion: v1
kind: Secret
metadata:
  name: hf-token
  namespace: vllm
data:
  hf-token: $HUGGING_FACE_HUB_TOKEN

---
apiVersion: ray.io/v1
kind: RayService
metadata:
  name: vllm-llama3-inf2
  namespace: vllm
spec:
  serviceUnhealthySecondThreshold: 900
  deploymentUnhealthySecondThreshold: 300
  serveConfigV2: |
    applications:
      - name: vllm
        import_path: vllm_serve:deployment
        route_prefix: "/"
        runtime_env:
          env_vars:
            MODEL_ID: "meta-llama/Llama-3.2-1B-Instruct"
            TENSOR_PARALLELISM: "2"
            BLOCK_SIZE: "4096"
            MAX_MODEL_LEN: "4096"
            MAX_NUM_SEQS: "10"
            PORT: "8000"
            NEURON_CC_FLAGS: "-O1"
            LD_LIBRARY_PATH: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
            NEURON_CORES: "2"
        deployments:
          - name: VLLMDeployment
            autoscaling_config:
              min_replicas: 1
              max_replicas: 3
              target_num_ongoing_requests_per_replica: 1
            ray_actor_options:
              num_cpus: 2
              resources: {"neuron_cores": 2}
              runtime_env:
                env_vars:
                  LD_LIBRARY_PATH: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
  rayClusterConfig:
    rayVersion: '2.32.0'
    enableInTreeAutoscaling: true
    headGroupSpec:
      headService:
        metadata:
          name: vllm
          namespace: vllm
      rayStartParams:
        dashboard-host: '0.0.0.0'
        num-cpus: "0"
      template:
        spec:
          schedulerName: my-scheduler # Correct placement
          containers:
          - name: head
            image: public.ecr.aws/data-on-eks/vllm-ray2.32.0-inf2-llama3:latest
            imagePullPolicy: Always
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "ray stop"]
            ports:
            - containerPort: 6379
              name: gcs
            - containerPort: 8265
              name: dashboard
            - containerPort: 10001
              name: client
            - containerPort: 8000
              name: serve
            volumeMounts:
            - mountPath: /tmp/ray
              name: ray-logs
            - name: vllm-script
              mountPath: /home/ray/vllm_serve.py
              subPath: vllm_serve.py
            resources:
              limits:
                cpu: "2"
                memory: "20G"
              requests:
                cpu: "2"
                memory: "20G"
            env:
            - name: MODEL_ID
              value: "meta-llama/Llama-3.2-1B-Instruct"
            - name: PORT
              value: "8000"
            - name: LD_LIBRARY_PATH
              value: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
            - name: HUGGING_FACE_HUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hf-token
                  key: hf-token
          volumes:
          - name: ray-logs
            emptyDir: {}
          - name: vllm-script
            configMap:
              name: vllm-serve-script
          nodeSelector:
            instanceType: mixed-x86
            workload: rayhead
    workerGroupSpecs:
    - groupName: inf2-group
      replicas: 1
      minReplicas: 1
      maxReplicas: 3
      rayStartParams:
        # This setting is critical for inf2/Trn1 node autoscaling with RayServe
        resources: '"{\"neuron_cores\": 2}"'
      template:
        spec:
          schedulerName: my-scheduler # Correct placement
          containers:
          - name: worker
            image: public.ecr.aws/data-on-eks/vllm-ray2.32.0-inf2-llama3:latest
            imagePullPolicy: Always
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "ray stop"]
            resources:
              limits: 
                cpu: "2"
                memory: "12G"
                aws.amazon.com/neuron: "1"
              requests:
                cpu: "2"
                memory: "12G"
                aws.amazon.com/neuron: "1"
            env:
            - name: MODEL_ID
              value: "meta-llama/Llama-3.2-1B-Instruct"
            - name: PORT
              value: "8000"
            - name: LD_LIBRARY_PATH
              value: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
            - name: NEURON_RT_LOG_LEVEL
              value: "INFO"
            - name: HUGGING_FACE_HUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hf-token
                  key: hf-token
            volumeMounts:
            - mountPath: /tmp/ray
              name: ray-logs
            - mountPath: /dev/shm
              name: dshm
            - name: vllm-script
              mountPath: /home/ray/vllm_serve.py
              subPath: vllm_serve.py
          volumes:
          - name: dshm
            emptyDir:
              medium: Memory
          - name: ray-logs
            emptyDir: {}
          - name: vllm-script
            configMap:
              name: vllm-serve-script
          nodeSelector:
            instanceType: inferentia-inf2
            provisionerType: Karpenter
          tolerations:
          - key: "aws.amazon.com/neuron"
            operator: "Exists"
            effect: "NoSchedule"
          - key: "hub.jupyter.org/dedicated"
            operator: "Equal"
            value: "user"
            effect: "NoSchedule"