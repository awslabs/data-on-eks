#----------------------------------------------------------------------
# NOTE: For deployment instructions, refer to the DoEKS website.
#----------------------------------------------------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: mistral
---
apiVersion: v1
kind: Secret
metadata:
  name: hf-token
  namespace: mistral
data:
  hf-token: $HUGGING_FACE_HUB_TOKEN
---
apiVersion: ray.io/v1
kind: RayService
metadata:
  name: mistral
  namespace: mistral
spec:
  serviceUnhealthySecondThreshold: 900
  deploymentUnhealthySecondThreshold: 300
  serveConfigV2: |
    applications:
      - name: mistral-deployment
        import_path: "ray_serve_mistral:entrypoint"
        route_prefix: "/"
        runtime_env:
          env_vars:
            MODEL_ID: "mistralai/Mistral-7B-Instruct-v0.2"
            NEURON_CC_FLAGS: "-O1"
            LD_LIBRARY_PATH: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
            NEURON_CORES: "2"
        deployments:
          - name: mistral-7b
            autoscaling_config:
              metrics_interval_s: 0.2
              min_replicas: 2
              max_replicas: 12
              look_back_period_s: 2
              downscale_delay_s: 30
              upscale_delay_s: 2
              target_num_ongoing_requests_per_replica: 1
            graceful_shutdown_timeout_s: 5
            max_concurrent_queries: 100
            ray_actor_options:
              num_cpus: 10
              resources: {"neuron_cores": 2}
              runtime_env:
                env_vars:
                  LD_LIBRARY_PATH: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
  rayClusterConfig:
    rayVersion: '2.22.0'
    enableInTreeAutoscaling: true
    headGroupSpec:
      headService:
        metadata:
          name: mistral
          namespace: mistral
      rayStartParams:
        dashboard-host: '0.0.0.0'
        num-cpus: "0" # this is to ensure no tasks or actors are scheduled on the head Pod
      template:
        spec:
          schedulerName: my-scheduler
          containers:
          - name: head
            image: public.ecr.aws/data-on-eks/ray2.22.0-py310-mistral7b-neuron:latest
            imagePullPolicy: Always # Ensure the image is always pulled when updated
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "ray stop"]
            ports:
            - containerPort: 6379
              name: gcs
            - containerPort: 8265
              name: dashboard
            - containerPort: 10001
              name: client
            - containerPort: 8000
              name: serve
            volumeMounts:
            - mountPath: /tmp/ray
              name: ray-logs
            resources:
              limits:
                cpu: "2"
                memory: "20G"
              requests:
                cpu: "2"
                memory: "20G"
            env:
            - name: LD_LIBRARY_PATH
              value: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
            - name: HUGGING_FACE_HUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hf-token
                  key: hf-token
          nodeSelector:
            instanceType: mixed-x86
            provisionerType: Karpenter
            workload: rayhead
          volumes:
          - name: ray-logs
            emptyDir: {}
    workerGroupSpecs:
    - groupName: inf2
      replicas: 1
      minReplicas: 1
      maxReplicas: 5
      rayStartParams: {}
      template:
        spec:
          schedulerName: my-scheduler
          containers:
          - name: worker
            image: public.ecr.aws/data-on-eks/ray2.22.0-py310-mistral7b-neuron:latest
            imagePullPolicy: Always # Ensure the image is always pulled when updated
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "ray stop"]
            # We are using 2 Neuron cores per HTTP request hence this configuration handles 6 requests per second
            resources:
              limits:
                cpu: "90" # All vCPUs of inf2.24xlarge; 6vCPU daemonset overhead
                memory: "360G" # All memory of inf2.24xlarge; 24G for daemonset overhead
                aws.amazon.com/neuron: "6" # All Neuron cores of inf2.24xlarge
              requests:
                cpu: "90" # All vCPUs of inf2.24xlarge; 6vCPU daemonset overhead
                memory: "360G" # All memory of inf2.24xlarge; 24G for daemonset overhead
                aws.amazon.com/neuron: "6" # All Neuron cores of inf2.24xlarge
            env:
            - name: LD_LIBRARY_PATH
              value: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
            - name: HUGGING_FACE_HUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hf-token
                  key: hf-token
          nodeSelector:
            instanceType: inferentia-inf2
            provisionerType: Karpenter
          tolerations:
          - key: "aws.amazon.com/neuron"
            operator: "Exists"
            effect: "NoSchedule"
          - key: "hub.jupyter.org/dedicated"
            operator: "Equal"
            value: "user"
            effect: "NoSchedule"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mistral
  namespace: mistral
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/$1"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      # Ray Dashboard
      - path: /dashboard/(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: mistral
            port:
              number: 8265
      # Ray Serve
      - path: /serve/(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: mistral
            port:
              number: 8000
