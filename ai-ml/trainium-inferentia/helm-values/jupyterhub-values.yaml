hub:
  extraConfig:
    jupyterhub_config.py: |-
      c.KubeSpawner.start_timeout = 1200

proxy:
  https:
    enabled: false
    type: offload
  service:
    type: ClusterIP
singleuser:
  startTimeout: 1200 # 20 mins to spin up a notebook server for GPU including the image pull
  profileList:
    - display_name: Trainium (trn1)
      description: "Trainium | Karpenter AutoScaling"
      profile_options:
        image:
          display_name: "Image"
          choices:
            pytorch1131:
              display_name: "PyTorch 1.13.1 + torch-neuronx"
              default: true
              kubespawner_override:
                image: public.ecr.aws/data-on-eks/pytorch-neuronx:latest
            tflow2101:
              display_name: "Tensorflow 2.10.1 + tensorflow-neuronx"
              kubespawner_override:
                image: public.ecr.aws/data-on-eks/tensorflow-neuronx:latest
      kubespawner_override:
        node_selector:
          karpenter.sh/nodepool: trainium-trn1 # Label is added by the karpenter to the nodes. `trainium-trn1` is the nodepool name created by this blueprint
          hub.jupyter.org/node-purpose: user
        tolerations:
          - key: aws.amazon.com/neuroncore
            operator: Exists
            effect: NoSchedule
          - key: aws.amazon.com/neuron
            operator: Exists
            effect: NoSchedule
          - key: "hub.jupyter.org/dedicated"
            operator: "Equal"
            value: "user"
            effect: "NoSchedule"
        # trn1.32xlarge | 16 Neurons (32 cores) | 512 GB Accelerator memory | 128 vCPus and 512 GiB
        cpu_guarantee: 100
        mem_guarantee: 450G
        cpu_limit: 120
        mem_limit: 500G
        extra_resource_limits:
          aws.amazon.com/neuron: "16"
        cmd: "start-singleuser.sh"
    - display_name: Inferentia (inf2)
      description: "Inferentia | Karpenter AutoScaling"
      profile_options:
        image:
          display_name: "Image"
          choices:
            pytorch1131:
              display_name: "PyTorch 1.13.1 + torch-neuronx"
              default: true
              kubespawner_override:
                image: public.ecr.aws/data-on-eks/pytorch-neuronx:latest
            tflow2101:
              display_name: "Tensorflow 2.10.1 + tensorflow-neuronx"
              kubespawner_override:
                image: public.ecr.aws/data-on-eks/tensorflow-neuronx:latest
      kubespawner_override:
        node_selector:
          karpenter.sh/nodepool: inferentia-inf2 # Label is added by the karpenter to the nodes. `inferentia-inf2` is the nodepool name created by this blueprint
          hub.jupyter.org/node-purpose: user
        tolerations:
          - key: aws.amazon.com/neuroncore
            operator: Exists
            effect: NoSchedule
          - key: aws.amazon.com/neuron
            operator: Exists
            effect: NoSchedule
          - key: "hub.jupyter.org/dedicated" # According to optimization docs https://z2jh.jupyter.org/en/latest/administrator/optimization.html
            operator: "Equal"
            value: "user"
            effect: "NoSchedule"
        cpu_guarantee: 90     # 96 vCPU for inf2.24x large
        mem_guarantee: 300G   # 384Gib for inf2.24x large
        cpu_limit: 90
        mem_limit: 300G
        extra_resource_limits:
          aws.amazon.com/neuron: "6"   # 12 NeuronCores , 384 GB Memory, vCPU 192, Mem 768 GB
        cmd: null
  storage:
    type: "static"
    static:
      pvcName: "efs-persist"
      subPath: "home/{username}"
    extraVolumes:
    - name: jupyterhub-shared
      persistentVolumeClaim:
        claimName: efs-persist-shared
    extraVolumeMounts:
    - name: jupyterhub-shared
      mountPath: /home/shared
      readOnly: false
  serviceAccountName: ${jupyter_single_user_sa_name}
  allowPrivilegeEscalation: true
  extraPodConfig: # This is needed for Jovyan user running in every single pod, access the Service Account
    securityContext:
        fsGroup: 100
  extraEnv: # Sudo needed to configure the proper permissions to start the notebook instance
    GRANT_SUDO: "yes"
    NOTEBOOK_ARGS: "--allow-root"
    CHOWN_HOME: "yes"
    CHOWN_HOME_OPTS: "-R"
    CHOWN_EXTRA: "/home/shared"
  uid: 0
  fsGid: 0
  cmd: null

# Optimizations configured according to this doc https://z2jh.jupyter.org/en/latest/administrator/optimization.html
scheduling:
  userScheduler:
    enabled: true
  podPriority:
    enabled: true
  userPlaceholder:
    enabled: false
    replicas: 1
  userPods:
    nodeAffinity:
      matchNodePurpose: require # This will force single-user pods to use an specific karpenter provisioner

prePuller:
  hook:
    enabled: false
  continuous:
    # NOTE: if used with Karpenter, also add user-placeholders
    enabled: false

global:
  safeToShowValues: false
