{"searchDocs":[{"title":"Amazon EMR on Amazon EKS provides up to 61% lower costs and up to 68% performance improvement for Spark workloads","type":0,"sectionRef":"#","url":"/data-on-eks/docs/benchmarks/emr-on-eks","content":"","keywords":"","version":"Next"},{"title":"How does Amazon EMR on EKS reduce cost and improve performance?​","type":1,"pageTitle":"Amazon EMR on Amazon EKS provides up to 61% lower costs and up to 68% performance improvement for Spark workloads","url":"/data-on-eks/docs/benchmarks/emr-on-eks#how-does-amazon-emr-on-eks-reduce-cost-and-improve-performance","content":" The EMR runtime for Spark is a performance-optimized runtime for Apache Spark that is 100% API compatible with open-source Apache Spark. It’s enabled by default with Amazon EMR on EKS. It helps run Spark workloads faster, leading to lower running costs. It includes multiple performance optimization features, such as Adaptive Query Execution (AQE), dynamic partition pruning, flattening scalar subqueries, bloom filter join, and more.  In addition to the cost benefit brought by the EMR runtime for Spark, Amazon EMR on EKS can take advantage of other AWS features to further optimize cost. For example, you can run Amazon EMR on EKS jobs on Amazon Elastic Compute Cloud (Amazon EC2) Spot Instances, providing up to 90% cost savings when compared to On-Demand Instances. Also, Amazon EMR on EKS supports Arm-based Graviton EC2 instances, which creates a 15% performance improvement and up to 30% cost savings when compared a Graviton2-based M6g to M5 instance type.  The recent graceful executor decommissioning feature makes Amazon EMR on EKS workloads more robust by enabling Spark to anticipate Spot Instance interruptions. Without the need to recompute or rerun impacted Spark jobs, Amazon EMR on EKS can further reduce job costs via critical stability and performance improvements.  Additionally, through container technology, Amazon EMR on EKS offers more options to debug and monitor Spark jobs. For example, you can choose Spark History Server, Amazon CloudWatch, or Amazon Managed Prometheus and Amazon Managed Grafana (for more details, refer to the Monitoring and Logging workshop). Optionally, you can use familiar command line tools such as kubectl to interact with a job processing environment and observe Spark jobs in real time, which provides a fail-fast and productive development experience.  Amazon EMR on EKS supports multi-tenant needs and offers application-level security control via a job execution role. It enables seamless integrations to other AWS native services without a key-pair set up in Amazon EKS. The simplified security design can reduce your engineering overhead and lower the risk of data breach. Furthermore, Amazon EMR on EKS handles security and performance patches so you can focus on building your applications.  ","version":"Next","tagName":"h2"},{"title":"Benchmarking​","type":1,"pageTitle":"Amazon EMR on Amazon EKS provides up to 61% lower costs and up to 68% performance improvement for Spark workloads","url":"/data-on-eks/docs/benchmarks/emr-on-eks#benchmarking","content":" This post provides an end-to-end Spark benchmark solution so you can get hands-on with the performance test process. The solution uses unmodified TPC-DS data schema and table relationships, but derives queries from TPC-DS to support the Spark SQL test case. It is not comparable to other published TPC-DS benchmark results.  Key concepts Transaction Processing Performance Council-Decision Support (TPC-DS) is a decision support benchmark that is used to evaluate the analytical performance of big data technologies. Our test data is a TPC-DS compliant dataset based on the TPC-DS Standard Specification, Revision 2.4 document, which outlines the business model and data schema, relationship, and more. As the whitepaper illustrates, the test data contains 7 fact tables and 17 dimension tables, with an average of 18 columns. The schema consists of essential retailer business information, such as customer, order, and item data for the classic sales channels: store, catalog, and internet. This source data is designed to represent real-world business scenarios with common data skews, such as seasonal sales and frequent names. Additionally, the TPC-DS benchmark offers a set of discrete scaling points (scale factors) based on the approximate size of the raw data. In our test, we chose the 3 TB scale factor, which produces 17.7 billion records, approximately 924 GB compressed data in Parquet file format.  Test approach A single test session consists of 104 Spark SQL queries that were run sequentially. To get a fair comparison, each session of different deployment types, such as Amazon EMR on EKS, was run three times. The average runtime per query from these three iterations is what we analyze and discuss in this post. Most importantly, it derives two summarized metrics to represent our Spark performance:  Total execution time – The sum of the average runtime from three iterations Geomean – The geometric mean of the average runtime Test results In the test result summary (see the following figure), we discovered that the Amazon EMR-optimized Spark runtime used by Amazon EMR on EKS is approximately 2.1 times better than the open-source Spark on Amazon EKS in geometric mean and 3.5 times faster by the total runtime.    The following figure breaks down the performance summary by queries. We observed that EMR runtime for Spark was faster in every query compared to open-source Spark. Query q67 was the longest query in the performance test. The average runtime with open-source Spark was 1019.09 seconds. However, it took 150.02 seconds with Amazon EMR on EKS, which is 6.8 times faster. The highest performance gain in these long-running queries was q72—319.70 seconds (open-source Spark) vs. 26.86 seconds (Amazon EMR on EKS), a 11.9 times improvement.    For full blog link ","version":"Next","tagName":"h2"},{"title":"Running Spark Benchmark Tests on Amazon EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/running-the-benchmark","content":"","keywords":"","version":"Next"},{"title":"Deploying the Benchmark toolkit​","type":1,"pageTitle":"Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/running-the-benchmark#deploying-the-benchmark-toolkit","content":" In this example, you will provision the following resources required to run Spark Jobs with open source Spark Operator.  This example deploys an EKS Cluster running the Spark K8s Operator into a new VPC.  Creates a new sample VPC, 2 Private Subnets, 2 Public Subnets, and 2 subnets in the RFC6598 space (100.64.0.0/10) for EKS Pods.Creates Internet gateway for Public Subnets and NAT Gateway for Private SubnetsCreates EKS Cluster Control plane with public endpoint (for demo reasons only) with Managed Node Groups for benchmarking and core services, and Karpenter NodePools for Spark workloads.Deploys Metrics server, Spark-operator, Apache Yunikorn, Karpenter, Cluster Autoscaler, Grafana, AMP and Prometheus server.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/running-the-benchmark#prerequisites","content":" Ensure that you have installed the following tools on your machine.  aws clikubectlterraform  ","version":"Next","tagName":"h3"},{"title":"Deploy​","type":1,"pageTitle":"Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/running-the-benchmark#deploy","content":" Clone the repository.  git clone https://github.com/awslabs/data-on-eks.git cd data-on-eks export DOEKS_HOME=$(pwd)   If DOEKS_HOME is ever unset, you can always set it manually using export DATA_ON_EKS=$(pwd) from your data-on-eks directory.  Navigate into the following directory and run install.sh script.  cd ${DOEKS_HOME}/analytics/terraform/spark-k8s-operator chmod +x install.sh ./install.sh   Now create an S3_BUCKET variable that holds the name of the bucket created during the install. This bucket will be used in later examples to store output data. If S3_BUCKET is ever unset, you can run the following commands again.  export S3_BUCKET=$(terraform output -raw s3_bucket_id_spark_history_server) echo $S3_BUCKET   ","version":"Next","tagName":"h3"},{"title":"Create the Test Dataset for Running the TPCDS Benchmark​","type":1,"pageTitle":"Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/running-the-benchmark#create-the-test-dataset-for-running-the-tpcds-benchmark","content":" The Benchmark requires an S3 bucket with input data to query and save the results back to. If you don't have a data set in S3 you can use this same cluster to run the Data Generation job to create one.  Once you have an S3 bucket with the example data set, you can run the benchmark Job  ","version":"Next","tagName":"h3"},{"title":"Running the TPCDS Benchmark​","type":1,"pageTitle":"Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/running-the-benchmark#running-the-tpcds-benchmark","content":" ","version":"Next","tagName":"h2"},{"title":"Scale up the worker nodes​","type":1,"pageTitle":"Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/running-the-benchmark#scale-up-the-worker-nodes","content":" For these benchmarks we are not measuring the scaling speed but are focusing on the performance of the Spark SQL queries and the job runtime. To ensure the job is not interrupted by scaling activities or Spot interruptions we recommend using a Managed Node Group for the benchmarks, and scaling the capacity up before submitting the jobs  The blueprint creates two Managed Node Groups that we use for these benchmarks:  spark_benchmark_ebs - This nodegroup is configured for instances without NVMe storage such as r6g or c5spark_benchmark_ssd - This nodegroup will setup a RAID over NVMe devices available on the instances. This is perfect for instances with NVMe storage like r6gd, and c5d. These nodegroups are scaled to 0 by default to save on costs, but you can configure the instance type you would like to benchmark on and then set the min_size and desired_size for the node group.  tip The number of nodes required varies based on the size of the instance and the resource requests of the executot Pods used in the benchmark. Currently the benchmark requests 36 executors, each requesting 5vCPU and 26Gi memory, for a total of 180vCPU and 936Gi memory. This will fit on six r6g.12xlarge instances. You can compare the benchmark manifest against the instance types you'd like to use to find the required number of EC2 instances.  ","version":"Next","tagName":"h3"},{"title":"Set the S3 Bucket for input/output​","type":1,"pageTitle":"Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/running-the-benchmark#set-the-s3-bucket-for-inputoutput","content":" You will need to replace the &lt;S3_BUCKET&gt; placeholders in the benchmark file with the name of the bucket created earlier. You can get that value by running echo $S3_BUCKET.  To do this automatically you can run the following, which will create a .old backup file and do the replacement for you.  cd ${DOEKS_HOME}/analytics/terraform/spark-k8s-operator/examples/benchmark sed -i.old s/\\&lt;S3_BUCKET\\&gt;/${S3_BUCKET}/g ./tpcds-benchmark-1t-ebs.yaml   ","version":"Next","tagName":"h3"},{"title":"Submit the Benchmark Job​","type":1,"pageTitle":"Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/running-the-benchmark#submit-the-benchmark-job","content":" Then to begin the data generation execute the command below   kubectl apply -f tpcds-benchmark-1t-ebs.yaml   Once you apply the tpcds-benchmark-1t-ebs.yaml manifest, you should see the the driver and executor Pods coming up. It takes about an hour to finish the execution of a single iteration of the benchmark queries.  You can monitor the status of the job by checking the Spark driver Pod execution status and logs  kubectl get pod -n spark-team-a   Output:  NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES benchmark-exec-ebs-exec-1 1/1 Running 0 75s 100.64.251.188 ip-100-64-219-156.ec2.internal &lt;none&gt; &lt;none&gt; benchmark-exec-ebs-exec-10 1/1 Running 0 73s 100.64.213.1 ip-100-64-146-124.ec2.internal &lt;none&gt; &lt;none&gt; ... benchmark-exec-ebs-exec-8 1/1 Running 0 74s 100.64.202.23 ip-100-64-219-156.ec2.internal &lt;none&gt; &lt;none&gt; benchmark-exec-ebs-exec-9 1/1 Running 0 73s 100.64.238.20 ip-100-64-175-12.ec2.internal &lt;none&gt; &lt;none&gt; tpcds-benchmark-1tb-ebs-driver 1/1 Running 0 2m33s 100.64.228.162 ip-100-64-213-174.ec2.internal &lt;none&gt; &lt;none&gt;   The benchmark is also configured to export metrics and logs so you can review the benchmark using the Spark Observability tools explained here.  To get an idea how far along the benchmark is, you can use the Spark Web UI to review which query is currently being executed. Port forward to the Benchmark Driver to see the UI:  kubectl port-forward -n spark-team-a service/tpcds-benchmark-1tb-ebs-ui-svc 4040:4040   Then open browser and enter localhost:4040. You can review the jobs that are running and that have completed. The benchmark will run the SQL queries sequentially so you can estimate how far along the job is by checking the query number.    Once the benchmark has completed you can scale the Nodgroup back to zero to save costs, and you can delete the remaining SparkApplication with the commands below:  cd ${DOEKS_HOME}/analytics/terraform/spark-k8s-operator/examples/benchmark kubectl delete -f tpcds-benchmark-1t-ebs.yaml   ","version":"Next","tagName":"h3"},{"title":"Reviewing the Results​","type":1,"pageTitle":"Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/running-the-benchmark#reviewing-the-results","content":" When the benchmark completes it will place the results from the benchmark in the S3 bucket specified in the manifest file (default: s3a://&lt;S3_BUCKET&gt;/TPCDS-TEST-1T-RESULT). You can navigate to the S3 console for the corresponding S3 bucket and enter the directory:    When you enter the results directory you will see a list of folders which correspond to the timestamps the job was run:    You can find the latest result by selecting the timestamp that's largest, or find the folder that corresponds to the time of your test. Inside this folder you will see a file with a name like part-00000-000000000-0000-0000-0000-000000000-0000.json, this file includes the full spark configuration used for the job.  Inside the subfolder named summary.csv, the part-00000-000000000-0000-0000-0000-000000000-0000.csv file includes the results of the benchmark.  If you open this csv file you will see 4 columns of data which show the time taken to process each query. The file does not include column headers, the columns from left to right are:  the TPCDS Query numberthe median time that it took to process that querythe minimum time that it took to process that querythe maximum time that it took to process that query  tip If the benchmark ran for a single iiteration (as is the default) then all three columns will display the same times.  This image shows the output for 3 iterations with column headers added for clarity:  ","version":"Next","tagName":"h2"},{"title":"Cost Considerations​","type":1,"pageTitle":"Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/running-the-benchmark#cost-considerations","content":" When utilizing c5d instances for data generation, it's important to keep cost implications in mind. These compute-optimized instances with local NVMe storage offer high performance but can be more expensive than standard c5 instances. To optimize costs, it's crucial to carefully monitor usage and scale resources appropriately. The local NVMe storage provides fast I/O, but data persistence is not guaranteed, so you should factor in the cost of data transfer and backup solutions. Spot instances can offer significant savings for interruptible workloads. Additionally, reserving instances for long-term, predictable usage can lead to substantial discounts. Also, it's essential to terminate these instances when they're no longer needed by adjusting the nodegroup's minimum and desired size to 0. This practice helps avoid unnecessary costs from idle resources.  caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment  This script will cleanup the environment using -target option to ensure all the resources are deleted in correct order.  cd ${DOEKS_HOME}/analytics/terraform/spark-k8s-operator &amp;&amp; chmod +x cleanup.sh ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"Introduction to Spark Benchmarks on Amazon EKS 🚀","type":0,"sectionRef":"#","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/spark-operator-eks-benchmark","content":"","keywords":"","version":"Next"},{"title":"📊 TPC-DS Benchmark for Spark​","type":1,"pageTitle":"Introduction to Spark Benchmarks on Amazon EKS 🚀","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/spark-operator-eks-benchmark#-tpc-ds-benchmark-for-spark","content":" The TPC-DS benchmark is an industry-standard benchmark created by the Transaction Processing Performance Council (TPC) to evaluate the performance of decision support systems. It is widely used to assess the efficiency of SQL-based data processing engines in handling complex analytical queries. Databricks has optimized TPC-DS for Apache Spark, making it highly relevant for evaluating Spark workloads in cloud and on-premise environments.  The TPC-DS benchmark tests cover a range of complex, data-intensive queries that simulate realistic decision support systems, making it ideal for assessing Spark's performance with structured and semi-structured data.  📈 Some Details on TPC-DS Benchmarks for Spark  The TPC-DS benchmark for Spark on Databricks includes the following features and considerations:  Dataset Size: TPC-DS provides standardized datasets ranging from a few gigabytes to multiple terabytes, allowing users to test Spark's scalability.Query Suite: The benchmark includes 99 queries that simulate real-world decision support scenarios. These queries test Spark's ability to handle joins, aggregations, and complex nested queries efficiently.Optimization Techniques: Databricks has implemented various Spark-specific optimizations to improve TPC-DS query performance, such as Catalyst Optimizer, Adaptive Query Execution (AQE), and optimized shuffle operations.Execution Environment: The benchmark tests typically run in a distributed environment and cloud platform (such as Amazon EKS), leveraging optimized runtime for Apache Spark.  Note: The results of TPC-DS benchmarks on Spark can vary significantly depending on cluster configurations, instance types, and Spark settings.  ","version":"Next","tagName":"h2"},{"title":"✨ Why We Need the Benchmark Tests​","type":1,"pageTitle":"Introduction to Spark Benchmarks on Amazon EKS 🚀","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/spark-operator-eks-benchmark#-why-we-need-the-benchmark-tests","content":" Benchmark tests are crucial for the following reasons:  Performance Evaluation: They provide an objective measure to evaluate and compare the speed, efficiency, and scalability of Spark engines on various cloud and hardware configurations. Optimization Insights: By analyzing benchmark results, users can gain insights into specific areas where Spark might be optimized to handle large-scale, complex analytical queries. Infrastructure Comparison: Running TPC-DS on Spark on Amazon EKS allows teams to make data-driven decisions on the best platforms for their data workloads. Operational Readiness: Ensures that the Spark setup is ready to handle large datasets and complex analytical tasks, reducing risks in production environments.  ","version":"Next","tagName":"h3"},{"title":"🎁 What We Offer​","type":1,"pageTitle":"Introduction to Spark Benchmarks on Amazon EKS 🚀","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/spark-operator-eks-benchmark#-what-we-offer","content":" With Data-on-EKS blueprints, we offer  Ready to be deployed Infrastructure-as-Code(Terraform) templatesBenchmark Test Data Generation ToolkitBenchmark Execution Toolkit  ","version":"Next","tagName":"h3"},{"title":"💰 A Note on Cost​","type":1,"pageTitle":"Introduction to Spark Benchmarks on Amazon EKS 🚀","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/spark-operator-eks-benchmark#-a-note-on-cost","content":" To minimize costs, we recommend terminating the C5d instances once the benchmark data generation toolkit completes execution and the data has been successfully stored in the S3 bucket. This approach ensures that resources are only used when necessary, helping to keep expenses under control.  ","version":"Next","tagName":"h3"},{"title":"🔗 Additional Resources​","type":1,"pageTitle":"Introduction to Spark Benchmarks on Amazon EKS 🚀","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/spark-operator-eks-benchmark#-additional-resources","content":" TPCDS Specification ","version":"Next","tagName":"h2"},{"title":"Data Generation for Running Spark Benchmark Tests on Amazon EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/data-generation","content":"","keywords":"","version":"Next"},{"title":"Deploying the data generation toolkit​","type":1,"pageTitle":"Data Generation for Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/data-generation#deploying-the-data-generation-toolkit","content":" In this example, you will provision the following resources required to run Spark Jobs with open source Spark Operator.  This example deploys an EKS Cluster running the Spark K8s Operator into a new VPC.  Creates a new sample VPC, 2 Private Subnets, 2 Public Subnets, and 2 subnets in the RFC6598 space (100.64.0.0/10) for EKS Pods.Creates Internet gateway for Public Subnets and NAT Gateway for Private SubnetsCreates EKS Cluster Control plane with public endpoint (for demo reasons only) with Managed Node Groups for benchmarking and core services, and Karpenter NodePools for Spark workloads.Deploys Metrics server, Spark-operator, Apache Yunikorn, Karpenter, Cluster Autoscaler, Grafana, AMP and Prometheus server.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Data Generation for Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/data-generation#prerequisites","content":" Ensure that you have installed the following tools on your machine.  aws clikubectlterraform  ","version":"Next","tagName":"h3"},{"title":"Deploy​","type":1,"pageTitle":"Data Generation for Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/data-generation#deploy","content":" Clone the repository.  git clone https://github.com/awslabs/data-on-eks.git cd data-on-eks export DOEKS_HOME=$(pwd)   If DOEKS_HOME is ever unset, you can always set it manually using export DATA_ON_EKS=$(pwd) from your data-on-eks directory.  Export the following environment variables to set the minimum and desired number of ssd enabled c5d12xlarge instances. In our tests, we've set both of these to 6 based on the size of the dataset. Please adjust the number of instances as per your requirement and the size of the dataset you plan to run.  export TF_VAR_spark_benchmark_ssd_min_size=6 export TF_VAR_spark_benchmark_ssd_desired_size=6   Note : If you don't have access to c5d instances, feel free to use other EC2 instances that are equipped with local NVMe-based SSD block level storage. NVMe-based SSD instance storage enabled EC2 instances are a great fit for running the Spark benchmark data generation toolkit.  Navigate into the following directory and run install.sh script.  cd ${DOEKS_HOME}/analytics/terraform/spark-k8s-operator chmod +x install.sh ./install.sh   Now create an S3_BUCKET variable that holds the name of the bucket created during the install. This bucket will be used in later examples to store output data. If S3_BUCKET is ever unset, you can run the following commands again.  export S3_BUCKET=$(terraform output -raw s3_bucket_id_spark_history_server) echo $S3_BUCKET   ","version":"Next","tagName":"h3"},{"title":"Generating Test Dataset for Running the TPCDS Benchmark​","type":1,"pageTitle":"Data Generation for Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/data-generation#generating-test-dataset-for-running-the-tpcds-benchmark","content":" In order to generate the dataset for TPCDS benchmark tests, you will need to configure the S3 bucket name in the data generation manifest.  You will need to replace the &lt;S3_BUCKET&gt; placeholders in the benchmark file with the name of the bucket created earlier. You can get that value by running echo $S3_BUCKET.  To do this automatically you can run the following, which will create a .old backup file and do the replacement for you.  cd ${DOEKS_HOME}/analytics/terraform/spark-k8s-operator/examples/benchmark sed -i.old s/\\&lt;S3_BUCKET\\&gt;/${S3_BUCKET}/g ./tpcds-benchmark-data-generation-1t.yaml   Then to begin the data generation execute the command below   kubectl apply -f tpcds-benchmark-data-generation-1t.yaml   Once you apply the tpcds-benchmark-data-generation-1t.yaml manifest, you should see the the driver and executor Pods coming up. It takes about an hour to finish the execution of the test data generation script. Once the execution is completed, you can see go into the AWS S3 console and validate the bucket size.  Navigate to the S3 bucket that got created as part of running the blueprint. Tick the checkbox besides the folder named TPCDS-TEST-1TB and click on Actions dropdown and then click on Calculate total size option as shown below.    For our dataset, the total size is 310 GB.    Once you go inside the TPCDS-TEST-1TB folder, you should see lot of subfolders that got generated (as shown below).    Each subfolder should have a .parquet file inside it that contains the generated data.    Also, check the Spark driver Pod execution status and logs to see if there are any errors.  kubectl get pod -n spark-team-a   Output:  NAME READY STATUS RESTARTS AGE tpcds-data-generation-1tb-driver 0/1 Completed 0 59m   The log snippet of the tpcds-data-generation-1tb-driver pod should look like below  Driver Pod Log Snippet 👈  ","version":"Next","tagName":"h2"},{"title":"Cost Considerations​","type":1,"pageTitle":"Data Generation for Running Spark Benchmark Tests on Amazon EKS","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/data-generation#cost-considerations","content":" When utilizing c5d instances for data generation, it's important to keep cost implications in mind. These compute-optimized instances with local NVMe storage offer high performance but can be more expensive than standard c5 instances. To optimize costs, it's crucial to carefully monitor usage and scale resources appropriately. The local NVMe storage provides fast I/O, but data persistence is not guaranteed, so you should factor in the cost of data transfer and backup solutions. Spot instances can offer significant savings for interruptible workloads. Additionally, reserving instances for long-term, predictable usage can lead to substantial discounts. Also, it's essential to terminate these instances when they're no longer needed by adjusting the nodegroup's minimum and desired size to 0. This practice helps avoid unnecessary costs from idle resources.  caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment  This script will cleanup the environment using -target option to ensure all the resources are deleted in correct order.  cd ${DOEKS_HOME}/analytics/terraform/spark-k8s-operator &amp;&amp; chmod +x cleanup.sh ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"EKS Best Practices","type":0,"sectionRef":"#","url":"/data-on-eks/docs/bestpractices/eks-best-practices","content":"","keywords":"","version":"Next"},{"title":"EKS Best Practices Guides​","type":1,"pageTitle":"EKS Best Practices","url":"/data-on-eks/docs/bestpractices/eks-best-practices#eks-best-practices-guides","content":" The primary goal of this EKS Best practices is to offer a set of best practices for day 2 operations for Amazon EKS. We elected to publish this guidance to GitHub so we could iterate quickly, provide timely and effective recommendations for variety of concerns, and easily incorporate suggestions from the broader community.  Checkout the EKS Best practices GitHub docs here ","version":"Next","tagName":"h2"},{"title":"EMR on EKS Best Practices","type":0,"sectionRef":"#","url":"/data-on-eks/docs/bestpractices/emr-on-eks","content":"","keywords":"","version":"Next"},{"title":"EMR Containers Best Practices Guides​","type":1,"pageTitle":"EMR on EKS Best Practices","url":"/data-on-eks/docs/bestpractices/emr-on-eks#emr-containers-best-practices-guides","content":" Amazon EMR on Amazon EKS enables you to submit Apache Spark jobs on demand on Amazon Elastic Kubernetes Service (EKS) without provisioning clusters. With EMR on EKS, you can consolidate analytical workloads with your other Kubernetes-based applications on the same Amazon EKS cluster to improve resource utilization and simplify infrastructure management.  This link provides the best practices and templates to get started with Amazon EMR on EKS. We publish this guide on GitHub so we could iterate the content quickly, provide timely and effective recommendations for variety of concerns, and easily incorporate suggestions from the broader community.  Checkout the EMR on EKS Best practices GitHub docs here  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"EMR on EKS Best Practices","url":"/data-on-eks/docs/bestpractices/emr-on-eks#architecture","content":" The following diagram illustrates the solution architecture Amazon EMR on EKS.   ","version":"Next","tagName":"h3"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/data-on-eks/docs/bestpractices/intro","content":"Introduction info COMING SOON Please note that this section is currently a work in progress and will provide a collection of best practices for running Data and ML workloads on EKS. These best practices will cover various aspects, including cluster configuration, resource management, data storage, security, monitoring, and more. By following these recommended practices, you can optimize the performance, reliability, and security of your data and ML workloads on EKS. Stay tuned for valuable insights and guidance on how to achieve the best outcomes in your EKS environment. Through working with AWS customers, we’ve identified a number of Best Practices that we have recommended for Spark or other large data workloads. We continue to collect and post those recommendations here. Because this is an ongoing effort, please open an Issue or Pull Request if you find something outdated so we can update it. These Data on EKS Best Practices are meant to expand upon the EKS Best Practices Guide for data-centric use cases (e.g., batch processing, stream processing, and machine learning) and we recommend reviewing the EKS Best Practices as a primer before diving into these. The Data on EKS Best Practices are not comprehensive and we recommend you read through the guidance and determine what’s best for your environment. The recommendations here were built from working with customers one of two designs (listed below). Each data use case (e.g., batch processing, stream processing) aligns more closely to one of the two cluster designs, which we will call out in our recommendations. The first design is dynamic clusters that scale, or “churn”, a lot. These clusters run batch processing with Spark, or other workloads that create pods for a relatively short time but can vary greatly on the scale at any given time. These clusters create and delete resources like pods and nodes, or churn, at a high rate which adds unique pressures to Kubernetes and critical components.The other design is “static” clusters. These clusters are often large but have less volatile scaling behavior and are generally running longer-lived jobs, like streaming or training. Avoid interruptions for these workloads is a key concern and care must be taken when making changes. When we talk about large clusters or high rates of churn, it’s difficult to put a specific number to those phrases because of the complexity of kubernetes scalability. In general, these clusters have &gt;500 nodes and &gt;5000 pods, or are creating/destroying hundreds of resources a minute; however, the scalability constraints are different for every workload (even between two different Spark jobs).","keywords":"","version":"Next"},{"title":"Preload container images into data volumes with EBS Snapshots","type":0,"sectionRef":"#","url":"/data-on-eks/docs/bestpractices/preload-container-images","content":"","keywords":"","version":"Next"},{"title":"Overview of this script​","type":1,"pageTitle":"Preload container images into data volumes with EBS Snapshots","url":"/data-on-eks/docs/bestpractices/preload-container-images#overview-of-this-script","content":"   Launch an EC2 instance with Bottlerocket for EKS AMI.Access to instance via Amazon System ManagerPull images to be cached in this EC2 using Amazon System Manager Run Command.Shut down the instance, build the EBS snapshot for the data volume.Terminate the instance.  ","version":"Next","tagName":"h2"},{"title":"Usage Example​","type":1,"pageTitle":"Preload container images into data volumes with EBS Snapshots","url":"/data-on-eks/docs/bestpractices/preload-container-images#usage-example","content":" git clone https://github.com/aws-samples/bottlerocket-images-cache/ cd bottlerocket-images-cache/ # Using nohup in terminals to avoid disconnections ❯ nohup ./snapshot.sh --snapshot-size 150 -r us-west-2 \\ docker.io/rayproject/ray-ml:2.10.0-py310-gpu,public.ecr.aws/data-on-eks/ray2.11.0-py310-gpu-stablediffusion:latest &amp; ❯ tail -f nohup.out 2024-07-15 17:18:53 I - [1/8] Deploying EC2 CFN stack ... 2024-07-15 17:22:07 I - [2/8] Launching SSM . 2024-07-15 17:22:08 I - SSM launched in instance i-07d10182abc8a86e1. 2024-07-15 17:22:08 I - [3/8] Stopping kubelet.service .. 2024-07-15 17:22:10 I - Kubelet service stopped. 2024-07-15 17:22:10 I - [4/8] Cleanup existing images .. 2024-07-15 17:22:12 I - Existing images cleaned 2024-07-15 17:22:12 I - [5/8] Pulling images: 2024-07-15 17:22:12 I - Pulling docker.io/rayproject/ray-ml:2.10.0-py310-gpu - amd64 ... 2024-07-15 17:27:50 I - docker.io/rayproject/ray-ml:2.10.0-py310-gpu - amd64 pulled. 2024-07-15 17:27:50 I - Pulling docker.io/rayproject/ray-ml:2.10.0-py310-gpu - arm64 ... 2024-07-15 17:27:58 I - docker.io/rayproject/ray-ml:2.10.0-py310-gpu - arm64 pulled. 2024-07-15 17:27:58 I - Pulling public.ecr.aws/data-on-eks/ray2.11.0-py310-gpu-stablediffusion:latest - amd64 ... 2024-07-15 17:31:34 I - public.ecr.aws/data-on-eks/ray2.11.0-py310-gpu-stablediffusion:latest - amd64 pulled. 2024-07-15 17:31:34 I - Pulling public.ecr.aws/data-on-eks/ray2.11.0-py310-gpu-stablediffusion:latest - arm64 ... 2024-07-15 17:31:36 I - public.ecr.aws/data-on-eks/ray2.11.0-py310-gpu-stablediffusion:latest - arm64 pulled. 2024-07-15 17:31:36 I - [6/8] Stopping instance ... 2024-07-15 17:32:25 I - Instance i-07d10182abc8a86e1 stopped 2024-07-15 17:32:25 I - [7/8] Creating snapshot ... 2024-07-15 17:38:36 I - Snapshot snap-0c6d965cf431785ed generated. 2024-07-15 17:38:36 I - [8/8] Cleanup. 2024-07-15 17:38:37 I - Stack deleted. 2024-07-15 17:38:37 I - -------------------------------------------------- 2024-07-15 17:38:37 I - All done! Created snapshot in us-west-2: snap-0c6d965cf431785ed   You can copy the snapshot ID snap-0c6d965cf431785ed and configure it as a snapshot for worker nodes.  Using Snapshot with Amazon EKS and Karpenter  You can specify snapshotID in a Karpenter node class. Add the content on EC2NodeClass:  apiVersion: karpenter.k8s.aws/v1beta1 kind: EC2NodeClass metadata: name: default spec: amiFamily: Bottlerocket # Ensure OS is BottleRocket blockDeviceMappings: - deviceName: /dev/xvdb ebs: volumeSize: 150Gi volumeType: gp3 kmsKeyID: &quot;arn:aws:kms:&lt;REGION&gt;:&lt;ACCOUNT_ID&gt;:key/1234abcd-12ab-34cd-56ef-1234567890ab&quot; # Specify KMS ID if you use custom KMS key snapshotID: snap-0123456789 # Specify your snapshot ID here   End-to-End deployment example  An end-to-end deployment example can be found in Stable Diffusion on GPU. ","version":"Next","tagName":"h2"},{"title":"AI/ML Platforms on Amazon EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/ai-ml","content":"","keywords":"","version":"Next"},{"title":"Key Advantages of AI/ML Platforms on Amazon EKS​","type":1,"pageTitle":"AI/ML Platforms on Amazon EKS","url":"/data-on-eks/docs/blueprints/ai-ml#key-advantages-of-aiml-platforms-on-amazon-eks","content":" ","version":"Next","tagName":"h2"},{"title":"1. Scalability and Flexibility​","type":1,"pageTitle":"AI/ML Platforms on Amazon EKS","url":"/data-on-eks/docs/blueprints/ai-ml#1-scalability-and-flexibility","content":" Amazon EKS enables organizations to scale AI/ML workloads seamlessly. Whether you're training large language models that require vast amounts of compute power or deploying inference pipelines that need to handle unpredictable traffic patterns, EKS scales up and down efficiently, optimizing resource use and cost.  ","version":"Next","tagName":"h3"},{"title":"2. High Performance with GPUs and Neuron Instances​","type":1,"pageTitle":"AI/ML Platforms on Amazon EKS","url":"/data-on-eks/docs/blueprints/ai-ml#2-high-performance-with-gpus-and-neuron-instances","content":" Amazon EKS supports a wide range of compute options, including GPUs and AWS Neuron instances, which are essential for accelerating AI/ML workloads. This support allows for high-performance training and low-latency inference, ensuring that models run efficiently in production environments.  ","version":"Next","tagName":"h3"},{"title":"3. Integration with AI/ML Tools​","type":1,"pageTitle":"AI/ML Platforms on Amazon EKS","url":"/data-on-eks/docs/blueprints/ai-ml#3-integration-with-aiml-tools","content":" Amazon EKS integrates seamlessly with popular AI/ML tools and frameworks like TensorFlow, PyTorch, and Ray, providing a familiar and robust ecosystem for data scientists and engineers. These integrations enable users to leverage existing tools while benefiting from the scalability and management capabilities of Kubernetes.  ","version":"Next","tagName":"h3"},{"title":"4. Automation and Management​","type":1,"pageTitle":"AI/ML Platforms on Amazon EKS","url":"/data-on-eks/docs/blueprints/ai-ml#4-automation-and-management","content":" Kubernetes on Amazon EKS automates many of the operational tasks associated with managing AI/ML workloads. Features like automatic scaling, rolling updates, and self-healing ensure that your applications remain highly available and resilient, reducing the overhead of manual intervention.  ","version":"Next","tagName":"h3"},{"title":"5. Security and Compliance​","type":1,"pageTitle":"AI/ML Platforms on Amazon EKS","url":"/data-on-eks/docs/blueprints/ai-ml#5-security-and-compliance","content":" Running AI/ML workloads on Amazon EKS provides robust security features, including fine-grained IAM roles, encryption, and network policies, ensuring that sensitive data and models are protected. EKS also adheres to various compliance standards, making it suitable for enterprises with strict regulatory requirements.  ","version":"Next","tagName":"h3"},{"title":"Why Choose Amazon EKS for AI/ML?​","type":1,"pageTitle":"AI/ML Platforms on Amazon EKS","url":"/data-on-eks/docs/blueprints/ai-ml#why-choose-amazon-eks-for-aiml","content":" Amazon EKS offers a comprehensive, managed environment that simplifies the deployment of AI/ML models while providing the performance, scalability, and security needed for production workloads. With its ability to integrate with a variety of AI/ML tools and its support for advanced compute resources, EKS empowers organizations to accelerate their AI/ML initiatives and deliver innovative solutions at scale.  By choosing Amazon EKS, you gain access to a robust infrastructure that can handle the complexities of modern AI/ML workloads, allowing you to focus on innovation and value creation rather than managing underlying systems. Whether you are deploying simple models or complex AI systems, Amazon EKS provides the tools and capabilities needed to succeed in a competitive and rapidly evolving field.  ","version":"Next","tagName":"h2"},{"title":"Deploying Generative AI Models on Amazon EKS​","type":1,"pageTitle":"AI/ML Platforms on Amazon EKS","url":"/data-on-eks/docs/blueprints/ai-ml#deploying-generative-ai-models-on-amazon-eks","content":" Deploying Generative AI models on Amazon EKS is supported through two major blueprints:  For GPUs: Use the JARK stack blueprint.For Neuron: Start with the Trainium on EKS blueprint.  In addition to these, this section provides other valuable ML blueprints:  NVIDIA Spark RAPIDS: For Spark on GPU workloads, refer to the NVIDIA Spark RAPIDS blueprint. JupyterHub on EKS: Explore the JupyterHub blueprint, which showcases Time Slicing and MIG features, as well as multi-tenant configurations with profiles. This is ideal for deploying large-scale JupyterHub platforms on EKS. Additional Patterns: For other patterns using NVIDIA Triton server, NVIDIA NGC, and more, refer to the Gen AI page. ","version":"Next","tagName":"h2"},{"title":"Networking for Data","type":0,"sectionRef":"#","url":"/data-on-eks/docs/bestpractices/networking","content":"","keywords":"","version":"Next"},{"title":"VPC and IP Considerations​","type":1,"pageTitle":"Networking for Data","url":"/data-on-eks/docs/bestpractices/networking#vpc-and-ip-considerations","content":" ","version":"Next","tagName":"h2"},{"title":"Plan for a large amount of IP address usage in your EKS clusters.​","type":1,"pageTitle":"Networking for Data","url":"/data-on-eks/docs/bestpractices/networking#plan-for-a-large-amount-of-ip-address-usage-in-your-eks-clusters","content":" The AWS VPC CNI maintains a “warm pool” of IP addresses on the EKS worker nodes to assign to Pods. When more IP addresses are needed for your Pods, the CNI must communicate with EC2 APIs to assign the addresses to your nodes. During periods of high churn or large scale out these EC2 API calls can be rate throttled, which will delay the provisioning of Pods and thus delay the execution of workloads. When designing the VPC for your environment plan for more IP addresses than just your pods to accommodate this warm pool.  With the default VPC CNI configuration larger nodes will consume more IP addresses. For example a m5.8xlarge node that is running 10 pods will hold 60 IPs total (to satisfy WARM_ENI=1). However a m5.16xlarge node would hold 100 IPs. Configuring the VPC CNI to minimize this warm pool can increase the EC2 API calls from your nodes and increase the risk of rate throttling. Planning for this extra IP address usage can avoid rate throttling problems and managing the IP address usage.  ","version":"Next","tagName":"h3"},{"title":"Consider using a secondary CIDR if your IP space is constrained.​","type":1,"pageTitle":"Networking for Data","url":"/data-on-eks/docs/bestpractices/networking#consider-using-a-secondary-cidr-if-your-ip-space-is-constrained","content":" If you are working with a network that spans multiple connected VPCs or sites the routable address space may be limited. For example, your VPC may be limited to small subnets like below. In this VPC we wouldn’t be able to run more than one m5.16xlarge node without adjusting the CNI configuration.    You can add additional VPC CIDRs from a range that is not routable across VPCs (such as the RFC 6598 range, 100.64.0.0/10). In this case we added 100.64.0.0/16, 100.65.0.0/16, and 100.66.0.0/16 to the VPC (as this is the maximum CIDR size), then created new subnets with those CIDRs. Finally we recreated the node groups in the new subnets, leaving the existing EKS cluster control plane in place.    With this configuration you can still communicate with the EKS cluster control plane from connected VPCs but your nodes and pods have plenty of IP addresses to accommodate your workloads and the warm pool.  ","version":"Next","tagName":"h3"},{"title":"Tuning the VPC CNI​","type":1,"pageTitle":"Networking for Data","url":"/data-on-eks/docs/bestpractices/networking#tuning-the-vpc-cni","content":" ","version":"Next","tagName":"h2"},{"title":"VPC CNI and EC2 Rate Throttling​","type":1,"pageTitle":"Networking for Data","url":"/data-on-eks/docs/bestpractices/networking#vpc-cni-and-ec2-rate-throttling","content":" When an EKS worker node is launched it initially has a single ENI with a single IP address attached for the EC2 instance to communicate. As the VPC CNI launches it tries to provision a Warm Pool of IP addresses that can be assigned to Kubernetes Pods (More details in the EKS Best Practices Guide).  The VPC CNI must make AWS EC2 API calls (like AssignPrivateIpV4Address and DescribeNetworkInterfaces) to assign those additional IPs and ENIs to the worker node. When the EKS cluster scales out the number of Nodes or Pods there could be a spike in the number of these EC2 API calls. This surge of calls could encounter rate throttling from the EC2 API to help the performance of the service, and to ensure fair usage for all Amazon EC2 customers. This rate throttling can cause the pool of IP address to be exhausted while the CNI tries to allocate more IPs.  These failures will cause errors like the one below, indicating that the provisioning of the container network namespace has failed because the VPC CNI could not provision an IP address.  Failed to create pod sandbox: rpc error: code = Unknown desc = failed to set up sandbox container &quot;xxxxxxxxxxxxxxxxxxxxxx&quot; network for pod &quot;test-pod&quot;: networkPlugin cni failed to set up pod test-pod_default&quot; network: add cmd: failed to assign an IP address to container   This failure delays the launch of the Pod and adds pressure to the kubelet and worker node as this action is retried until the IP address is assigned. To avoid this delay you can configure the CNI to reduce the number of EC2 API calls needed.  ","version":"Next","tagName":"h3"},{"title":"Avoid using WARM_IP_TARGET in large clusters, or cluster with a lot of churn​","type":1,"pageTitle":"Networking for Data","url":"/data-on-eks/docs/bestpractices/networking#avoid-using-warm_ip_target-in-large-clusters-or-cluster-with-a-lot-of-churn","content":" WARM_IP_TARGET can help limit the “wasted” IPs for small clusters, or clusters that has very low pod churn. However, this environment variable on the VPC CNI needs to be carefully configured in large clusters as it may increase the number of EC2 API calls, increasing the risk and impact of rate throttling.  For clusters that have a lot of Pod churn, it is recommended to set MINIMUM_IP_TARGET to a value slightly higher than the expected number of pods you plan to run on each node. This will allow the CNI to provision all of those IP addresses in a single (or few) calls.   [...] # EKS Addons cluster_addons = { vpc-cni = { configuration_values = jsonencode({ env = { MINIMUM_IP_TARGET = &quot;30&quot; } }) } } [...]   ","version":"Next","tagName":"h3"},{"title":"Limit the number of IPs per node on large instance types with MAX_ENI and max-pods​","type":1,"pageTitle":"Networking for Data","url":"/data-on-eks/docs/bestpractices/networking#limit-the-number-of-ips-per-node-on-large-instance-types-with-max_eni-and-max-pods","content":" When using larger instance types such as 16xlarge or 24xlarge the number of IP addresses that can be assigned per ENI can be fairly large. For example, a c5.18xlarge instance type with the default CNI configuration of WARM_ENI=1 would end up holding 100 IP addresses (50 IPs per ENI * 2 ENIs) when running a handful of pods.  For some workloads the CPU, Memory, or other resource will limit the number of Pods on that c5.18xlarge before we need more than 50 IPs. In this case you may want to be able to run 30-40 pods maximum on that instance.   [...] # EKS Addons cluster_addons = { vpc-cni = { configuration_values = jsonencode({ env = { MAX_ENI = &quot;1&quot; } }) } } [...]   Setting the MAX_ENI=1 option on the CNI and that this will limit the number of IP addresses each node is able to provision, but it does not limit the number of pod that kubernetes will try to schedule to the nodes. This can lead to a situation where pods are scheduled to nodes that are unable to provision more IP addresses.  To limit the IPs and stop k8s from scheduling too many pods you will need to:  Update the CNI configuration environment variables to set MAX_ENI=1Update the --max-pods option for the kubelet on the worker nodes.  To configure the --max-pods option you can update the userdata for your worker nodes to set this option via the --kubelet -extra-args in the bootstrap.sh script. By default this script configures the max-pods value for the kubelet, the --use-max-pods false` option disables this behavior when providing your own value:   eks_managed_node_groups = { system = { instance_types = [&quot;m5.xlarge&quot;] min_size = 0 max_size = 5 desired_size = 3 pre_bootstrap_user_data = &lt;&lt;-EOT EOT bootstrap_extra_args = &quot;--use-max-pods false --kubelet-extra-args '--max-pods=&lt;your_value&gt;'&quot; }   One problem is the number of IPs per ENI is different based on the Instance type (for example a m5d.2xlarge can have 15 IPs per ENI, where a m5d.4xlarge can hold 30 IPs per ENI). This means hard-coding a value for max-pods may cause problems if you change instance types or in mixed-instance environments.  In the EKS Optimized AMI releases there is a script included that can be used to help calculate the AWS Recommended max-pods value. If you’d like to automate this calculation for mixed instances you will also need to update the userdata for your instances to use the --instance-type-from-imds flag to autodiscover the instance type from instance metadata.   eks_managed_node_groups = { system = { instance_types = [&quot;m5.xlarge&quot;] min_size = 0 max_size = 5 desired_size = 3 pre_bootstrap_user_data = &lt;&lt;-EOT /etc/eks/max-pod-calc.sh --instance-type-from-imds —cni-version 1.13.4 —cni-max-eni 1 EOT bootstrap_extra_args = &quot;--use-max-pods false --kubelet-extra-args '--max-pods=&lt;your_value&gt;'&quot; }   Maxpods with Karpenter​  By default, Nodes provisioned by Karpenter will have the max pods on a node based on the node instance type. To configure the --max-pods option as mentioned above by defining at the Provisioner level by specifying maxPods within the .spec.kubeletConfiguration . This value will be used during Karpenter pod scheduling and passed through to --max-pods on kubelet startup.  Below is the example Provisioner spec:  apiVersion: karpenter.sh/v1alpha5 kind: Provisioner metadata: name: default spec: providerRef: name: default requirements: - key: &quot;karpenter.k8s.aws/instance-category&quot; operator: In values: [&quot;c&quot;, &quot;m&quot;, &quot;r&quot;] - key: &quot;karpenter.sh/capacity-type&quot; # If not included, the webhook for the AWS cloud provider will default to on-demand operator: In values: [&quot;spot&quot;, &quot;on-demand&quot;] # Karpenter provides the ability to specify a few additional Kubelet args. # These are all optional and provide support for additional customization and use cases. kubeletConfiguration: maxPods: 30   ","version":"Next","tagName":"h3"},{"title":"Application​","type":1,"pageTitle":"Networking for Data","url":"/data-on-eks/docs/bestpractices/networking#application","content":" ","version":"Next","tagName":"h2"},{"title":"DNS Lookups and ndots​","type":1,"pageTitle":"Networking for Data","url":"/data-on-eks/docs/bestpractices/networking#dns-lookups-and-ndots","content":" In Kubernetes Pods with the default DNS configuration have a resolv.conf file like so:  nameserver 10.100.0.10 search namespace.svc.cluster.local svc.cluster.local cluster.local ec2.internal options ndots:5   The domain names listed in the search line are appended to DNS names that are not fully qualified domain names (FQDN). For example, if a pod tries to connect to a Kubernetes service using servicename.namespace the domains would be appended in order until the DNS name matched the full kubernetes service name:  servicename.namespace.namespace.svc.cluster.local &lt;--- Fails with NXDOMAIN servicename.namespace.svc.cluster.local &lt;-- Succeed   Whether or not a domain is fully qualified is determined by the ndots option in the resolv.conf. This option defines the number of dots that must be in a domain name before the search domains are skipped. These additional searches can add latency to connections to external resources like S3 and RDS endpoints.  The default ndots setting in Kubernetes is five, if your application isn’t talking to other pods in the cluster, we can set the ndots to a low value like “2”. This is a good starting point, because it still allows your application to do service discovery within the same namespace and in other namespaces within the cluster, but allows a domain like s3.us-east-2.amazonaws.com to be recognized as a FQDN (skipping the search domains).  Here’s an example pod manifest from the Kubernetes documentation with ndots set to “2”:  apiVersion: v1 kind: Pod metadata: namespace: default name: dns-example spec: containers: - name: test image: nginx dnsConfig: options: - name: ndots value: &quot;2&quot;   info While setting ndots to “2” in your pod deployment is a reasonable place to start, this will not universally work in all situations and shouldn’t be applied across the entire cluster. The ndots configuration needs to be configured at the Pod or Deployment level. Reducing this setting at the Cluster level CoreDNS configuration is not recommended.  ","version":"Next","tagName":"h3"},{"title":"Inter AZ Network Optimization​","type":1,"pageTitle":"Networking for Data","url":"/data-on-eks/docs/bestpractices/networking#inter-az-network-optimization","content":" Some workloads may need to exchange data between Pods in the cluster, like Spark executors during the shuffle stage. If the Pods are spread across multiple Availability Zones (AZs), this shuffle operation can turn out to be very expensive, especially on Network I/O front. Hence, for these workloads, it is recommended to colocate executors or worker pods in the same AZ. Colocating workloads in the same AZ serves two main purposes:  Reduce inter-AZ traffic costsReduce network latency between executors/Pods  To have pods co-located on the same AZ, we can use podAffinity based scheduling constraints. The scheduling constraint preferredDuringSchedulingIgnoredDuringExecution can be enforced in the Pod spec. For example, ins Spark we can use a custom template for our driver and executor pods:  spec: executor: affinity: podAffinity: preferredDuringSchedulingIgnoredDuringExecution: - labelSelector: matchExpressions: - key: sparkoperator.k8s.io/app-name operator: In values: - &lt;&lt;spark-app-name&gt;&gt; topologyKey: topology.kubernetes.io/zone ...   You can also leverage Kubernetes Topology Aware Routing to have Kubernetes services route traffic in more efficient means once pods have been created: https://aws.amazon.com/blogs/containers/exploring-the-effect-of-topology-aware-hints-on-network-traffic-in-amazon-elastic-kubernetes-service/  info Having all executors located in a single AZ, means that AZ will be a single point of failure. This is a trade off you should consider between lowering network cost and latency, and the event of an AZ failure interrupting workloads. If your workload is running on instances with constrained capacity you may consider using multiple AZs to avoid Insufficient Capacity errors. ","version":"Next","tagName":"h3"},{"title":"TPCDS Spark Benchmark Results for Graviton R6g, R7g, and R8g","type":0,"sectionRef":"#","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/graviton-r-data","content":"","keywords":"","version":"Next"},{"title":"Results​","type":1,"pageTitle":"TPCDS Spark Benchmark Results for Graviton R6g, R7g, and R8g","url":"/data-on-eks/docs/benchmarks/spark-operator-benchmark/graviton-r-data#results","content":" When reviewing the results for the TPCDS benchmark we are interested in the time it takes for the Spark SQL queries to complete, the faster those queries complete the better. The graph below shows the cumulative runtime in seconds for all of the queries for each instance type we tested:    We can similarly display the time for each query per instance, you can see the improvements in runtime for the newer generations.:    In the table below we have taken the Median times from the output for each instance type from a benchmark with 3 iterations of the queries and calculated the performance gained. You can view the raw output data in the raw_data folder here.  To calculate the performance increase we are calculating a ratio of the query times. For example, to determine how much faster the r8g instances were compared to the r6g instances:  Find the times corresponding to each query, using q20-v2.4 as an example the r6g.12xlarge took 2.81s and the r8g.12xlarge took 1.69s.We then divide r5g.12xlarge/r8g.12xlarge, for q20-v2.4 that's 2.81s/1.69s = 1.66. So for this query the r8g.12xlarge was able to complete the queries 1.66 times faster (or a ~66% percent improvement)  The data has been sorted by the last column, showing the performance increase r8g.12xlarge has over the r6g.12xlarge.  Query\tr6g.12xlarge\tr7g.12xlarge\tr8g.12xlarge r7g times faster than r6g\tr8g times faster than r7g\tr8g times faster than r6gq20-v2.4\t2.81\t1.94\t1.69 1.45\t1.14\t1.66 q39b-v2.4\t5.75\t4.26\t3.56 1.35\t1.20\t1.61 q45-v2.4\t7.66\t5.69\t4.92 1.35\t1.15\t1.56 q8-v2.4\t6.77\t5.19\t4.37 1.31\t1.19\t1.55 q73-v2.4\t5.08\t3.96\t3.31 1.28\t1.20\t1.54 q39a-v2.4\t6.60\t4.84\t4.36 1.36\t1.11\t1.51 q81-v2.4\t22.41\t20.14\t14.93 1.11\t1.35\t1.50 q69-v2.4\t7.81\t5.74\t5.26 1.36\t1.09\t1.48 q34-v2.4\t5.80\t4.76\t3.96 1.22\t1.20\t1.47 q97-v2.4\t19.76\t15.13\t13.60 1.31\t1.11\t1.45 q95-v2.4\t48.14\t38.24\t33.14 1.26\t1.15\t1.45 q22-v2.4\t9.79\t7.57\t6.81 1.29\t1.11\t1.44 q24b-v2.4\t71.09\t59.12\t49.64 1.20\t1.19\t1.43 q15-v2.4\t7.62\t6.30\t5.34 1.21\t1.18\t1.43 q58-v2.4\t5.05\t4.12\t3.57 1.22\t1.16\t1.41 q18-v2.4\t10.43\t8.45\t7.44 1.23\t1.14\t1.40 q14b-v2.4\t53.73\t40.88\t38.33 1.31\t1.07\t1.40 q72-v2.4\t22.29\t17.19\t16.08 1.30\t1.07\t1.39 q98-v2.4\t3.78\t3.26\t2.73 1.16\t1.20\t1.39 q46-v2.4\t13.37\t11.00\t9.65 1.21\t1.14\t1.39 q83-v2.4\t2.39\t1.95\t1.73 1.22\t1.12\t1.38 q6-v2.4\t11.11\t8.83\t8.08 1.26\t1.09\t1.37 q31-v2.4\t12.19\t11.12\t8.87 1.10\t1.25\t1.37 q11-v2.4\t23.95\t19.30\t17.72 1.24\t1.09\t1.35 q29-v2.4\t18.91\t15.29\t14.00 1.24\t1.09\t1.35 q61-v2.4\t5.26\t4.62\t3.92 1.14\t1.18\t1.34 q91-v2.4\t3.63\t3.05\t2.71 1.19\t1.12\t1.34 q5-v2.4\t20.57\t16.72\t15.42 1.23\t1.08\t1.33 q54-v2.4\t6.61\t5.61\t4.99 1.18\t1.12\t1.32 q23b-v2.4\t152.46\t130.94\t115.37 1.16\t1.14\t1.32 q51-v2.4\t11.90\t9.90\t9.06 1.20\t1.09\t1.31 q57-v2.4\t7.62\t6.19\t5.81 1.23\t1.06\t1.31 q10-v2.4\t8.38\t6.70\t6.41 1.25\t1.05\t1.31 q24a-v2.4\t75.07\t63.24\t57.78 1.19\t1.09\t1.30 q64-v2.4\t64.48\t53.92\t49.69 1.20\t1.09\t1.30 q3-v2.4\t3.39\t2.44\t2.62 1.39\t0.93\t1.29 q14a-v2.4\t61.18\t50.12\t47.37 1.22\t1.06\t1.29 q65-v2.4\t17.30\t14.65\t13.49 1.18\t1.09\t1.28 q17-v2.4\t6.95\t5.54\t5.44 1.25\t1.02\t1.28 q79-v2.4\t5.12\t4.14\t4.01 1.24\t1.03\t1.28 q47-v2.4\t8.45\t7.56\t6.62 1.12\t1.14\t1.28 q60-v2.4\t4.30\t3.72\t3.38 1.16\t1.10\t1.27 ss_max-v2.4\t10.48\t9.13\t8.29 1.15\t1.10\t1.26 q35-v2.4\t15.90\t13.96\t12.65 1.14\t1.10\t1.26 q68-v2.4\t7.93\t6.64\t6.32 1.19\t1.05\t1.25 q77-v2.4\t2.39\t1.95\t1.92 1.23\t1.02\t1.25 q75-v2.4\t38.27\t32.63\t30.71 1.17\t1.06\t1.25 q42-v2.4\t2.19\t1.96\t1.76 1.11\t1.11\t1.24 q25-v2.4\t5.64\t4.84\t4.55 1.17\t1.06\t1.24 q93-v2.4\t160.84\t142.63\t130.45 1.13\t1.09\t1.23 q38-v2.4\t16.80\t14.77\t13.66 1.14\t1.08\t1.23 q74-v2.4\t19.57\t16.73\t15.97 1.17\t1.05\t1.23 q82-v2.4\t14.10\t12.66\t11.55 1.11\t1.10\t1.22 q4-v2.4\t55.36\t49.70\t45.47 1.11\t1.09\t1.22 q23a-v2.4\t116.74\t101.45\t95.94 1.15\t1.06\t1.22 q30-v2.4\t15.69\t15.56\t12.91 1.01\t1.21\t1.22 q94-v2.4\t20.87\t17.87\t17.18 1.17\t1.04\t1.21 q71-v2.4\t3.83\t3.08\t3.16 1.24\t0.98\t1.21 q86-v2.4\t3.19\t2.89\t2.64 1.10\t1.10\t1.21 q26-v2.4\t5.94\t5.67\t4.91 1.05\t1.15\t1.21 q59-v2.4\t15.73\t14.35\t13.03 1.10\t1.10\t1.21 q27-v2.4\t7.15\t6.26\t5.93 1.14\t1.06\t1.21 q41-v2.4\t1.24\t1.09\t1.03 1.14\t1.06\t1.20 q36-v2.4\t6.15\t5.27\t5.11 1.17\t1.03\t1.20 q56-v2.4\t4.00\t3.46\t3.32 1.15\t1.04\t1.20 q87-v2.4\t15.46\t14.13\t12.96 1.09\t1.09\t1.19 q21-v2.4\t2.31\t2.11\t1.94 1.09\t1.08\t1.19 q32-v2.4\t2.04\t1.83\t1.73 1.11\t1.06\t1.18 q78-v2.4\t82.43\t75.70\t70.26 1.09\t1.08\t1.17 q88-v2.4\t40.39\t36.38\t34.44 1.11\t1.06\t1.17 q48-v2.4\t7.89\t7.24\t6.74 1.09\t1.07\t1.17 q33-v2.4\t4.06\t3.67\t3.47 1.11\t1.06\t1.17 q99-v2.4\t9.36\t8.36\t8.02 1.12\t1.04\t1.17 q16-v2.4\t28.35\t24.72\t24.41 1.15\t1.01\t1.16 q12-v2.4\t2.60\t2.64\t2.24 0.98\t1.18\t1.16 q28-v2.4\t41.47\t37.51\t35.84 1.11\t1.05\t1.16 q76-v2.4\t23.72\t21.55\t20.66 1.10\t1.04\t1.15 q1-v2.4\t6.24\t5.33\t5.43 1.17\t0.98\t1.15 q37-v2.4\t7.81\t7.18\t6.85 1.09\t1.05\t1.14 q90-v2.4\t9.91\t8.97\t8.77 1.10\t1.02\t1.13 q80-v2.4\t22.63\t20.72\t20.13 1.09\t1.03\t1.12 q66-v2.4\t8.09\t7.54\t7.23 1.07\t1.04\t1.12 q67-v2.4\t145.51\t140.91\t130.01 1.03\t1.08\t1.12 q7-v2.4\t7.82\t6.61\t7.00 1.18\t0.94\t1.12 q50-v2.4\t71.71\t70.06\t64.46 1.02\t1.09\t1.11 q19-v2.4\t4.61\t3.98\t4.16 1.16\t0.96\t1.11 q89-v2.4\t4.71\t4.53\t4.27 1.04\t1.06\t1.10 q13-v2.4\t8.75\t8.30\t7.98 1.05\t1.04\t1.10 q63-v2.4\t4.51\t4.36\t4.12 1.03\t1.06\t1.10 q85-v2.4\t14.98\t13.86\t13.72 1.08\t1.01\t1.09 q70-v2.4\t8.20\t8.28\t7.55 0.99\t1.10\t1.09 q62-v2.4\t8.97\t8.60\t8.28 1.04\t1.04\t1.08 q44-v2.4\t19.24\t18.94\t17.78 1.02\t1.07\t1.08 q84-v2.4\t9.72\t9.51\t9.01 1.02\t1.05\t1.08 q96-v2.4\t8.92\t8.26\t8.29 1.08\t1.00\t1.08 q9-v2.4\t34.46\t32.49\t32.07 1.06\t1.01\t1.07 q2-v2.4\t14.12\t13.05\t13.21 1.08\t0.99\t1.07 q52-v2.4\t2.00\t1.97\t1.87 1.01\t1.05\t1.07 q43-v2.4\t4.39\t4.14\t4.13 1.06\t1.00\t1.06 q92-v2.4\t1.53\t1.56\t1.46 0.98\t1.07\t1.05 q40-v2.4\t12.33\t11.43\t11.82 1.08\t0.97\t1.04 q49-v2.4\t26.01\t26.02\t25.04 1.00\t1.04\t1.04 q53-v2.4\t4.53\t4.64\t4.42 0.98\t1.05\t1.03 q55-v2.4\t2.36\t2.15\t2.50 1.10\t0.86\t0.94 ","version":"Next","tagName":"h2"},{"title":"Kubeflow Spark Operator Benchmarks 🚀","type":0,"sectionRef":"#","url":"/data-on-eks/docs/benchmarks/spark-operator-eks-benchmark","content":"","keywords":"","version":"Next"},{"title":"✨ Why We Need the Benchmark Tests​","type":1,"pageTitle":"Kubeflow Spark Operator Benchmarks 🚀","url":"/data-on-eks/docs/benchmarks/spark-operator-eks-benchmark#-why-we-need-the-benchmark-tests","content":" Benchmark testing is a critical step in assessing the efficiency and reliability of the Spark Operator when handling large-scale job submissions. These tests provide valuable insights into:  Identifying performance bottlenecks: Pinpointing areas where the system struggles under heavy loads.Ensuring optimized resource utilization: Ensuring that CPU, memory, and other resources are used efficiently.Evaluating system stability under heavy workloads: Testing the system’s ability to maintain performance and reliability under extreme conditions.  By conducting these tests, you can ensure that the Spark Operator is capable of handling real-world, high-demand scenarios effectively.  ","version":"Next","tagName":"h3"},{"title":"Prerequisites​","type":1,"pageTitle":"Kubeflow Spark Operator Benchmarks 🚀","url":"/data-on-eks/docs/benchmarks/spark-operator-eks-benchmark#prerequisites","content":" Before running the benchmark tests, ensure you have deployed the Spark Operator EKS cluster by following the instructions here.Access to the necessary AWS resources and permissions to modify EKS configurations.Familiarity with Terraform, Kubernetes, and Locust for load testing.  ","version":"Next","tagName":"h3"},{"title":"Updates to the Cluster​","type":1,"pageTitle":"Kubeflow Spark Operator Benchmarks 🚀","url":"/data-on-eks/docs/benchmarks/spark-operator-eks-benchmark#updates-to-the-cluster","content":" To prepare the cluster for benchmark testing, apply the following modifications:  Step 1: Update Spark Operator Helm Configuration  Uncomment the specified Spark Operator Helm values in the file analytics/terraform/spark-k8s-operator/addons.tf (from the -- Start to -- End section). Then, run terraform apply to apply the changes.  These updates ensure that:  The Spark Operator and webhook pods are deployed on a dedicated c5.9xlarge instance using Karpenter.The instance provides 36 vCPUs to handle 6000 application submissions.High CPU and memory resources are allocated for both the Controller pod and Webhook pods.  Here’s the updated configuration:  enable_spark_operator = true spark_operator_helm_config = { version = &quot;2.1.0&quot; timeout = &quot;120&quot; values = [ &lt;&lt;-EOT controller: replicas: 1 # -- Reconcile concurrency, higher values might increase memory usage. # -- Increased from 10 to 20 to leverage more cores from the instance workers: 20 # -- Change this to True when YuniKorn is deployed batchScheduler: enable: false # default: &quot;yunikorn&quot; # -- Start: Uncomment this section in the code for Spark Operator scale test # -- Spark Operator is CPU bound so add more CPU or use compute optimized instance for handling large number of job submissions nodeSelector: NodeGroupType: spark-operator-benchmark resources: requests: cpu: 33000m memory: 50Gi webhook: nodeSelector: NodeGroupType: spark-operator-benchmark resources: requests: cpu: 1000m memory: 10Gi # -- End: Uncomment this section in the code for Spark Operator scale test spark: jobNamespaces: - default - spark-team-a - spark-team-b - spark-team-c serviceAccount: create: false rbac: create: false prometheus: metrics: enable: true port: 8080 portName: metrics endpoint: /metrics prefix: &quot;&quot; podMonitor: create: true labels: {} jobLabel: spark-operator-podmonitor podMetricsEndpoint: scheme: http interval: 5s EOT ] }   Step 2: Prometheus Best practices for Large scale clusters  To efficiently monitor 32,000+ pods across 200 nodes, Prometheus should run on a dedicated node with increased CPU and memory allocation. Ensure Prometheus is deployed on core node groups using NodeSelectors in the Prometheus Helm chart. This prevents interference from workload pods.At scale, Prometheus can consume significant CPU and memory, so running it on dedicated infrastructure ensures it doesn’t compete with your apps. It’s common to dedicate a node or node pool solely to monitoring components (Prometheus, Grafana, etc.) using node selectors or taints.Prometheus is memory-intensive and, when monitoring hundreds or thousands of pods, will also demand substantial CPU​Allocating dedicated resources (and even using Kubernetes priority classes or QoS to favor Prometheus) helps keep your monitoring reliable under stress.Please note that full observability stack (metrics, logs, tracing) might consume roughly one-third of your infrastructure resources at scale​, so plan capacity accordingly.Allocate ample memory and CPU from the start, and prefer requests without strict low limits for Prometheus. For example, if you estimate Prometheus needs ~8 GB, don’t cap it at 4 GB. It’s better to reserve an entire node or a large chunk of one for Prometheus.  Step 3: Configure VPC CNI for High Pod Density:  Modify analytics/terraform/spark-k8s-operator/eks.tf to enable prefix delegation in the vpc-cni addon. This increases the pod capacity per node from 110 to 200.  cluster_addons = { vpc-cni = { configuration_values = jsonencode({ env = { ENABLE_PREFIX_DELEGATION = &quot;true&quot; WARM_PREFIX_TARGET = &quot;1&quot; } }) } }   Important Note: After making these changes, run terraform apply to update the VPC CNI configuration.  Step 4: Create a Dedicated Node Group for Spark Load Testing  We have created a dedicated Managed node group called spark_operator_bench for placing the Spark Jobs pods. Configured a 200-node managed node group with m6a.4xlarge instances for Spark load test pods. The user-data has been modified to allow up to 220 pods per node.  Note: This step is informational only, and no changes need to be applied manually.  spark_operator_bench = { name = &quot;spark_operator_bench&quot; description = &quot;Managed node group for Spark Operator Benchmarks with EBS using x86 or ARM&quot; min_size = 0 max_size = 200 desired_size = 0 ... cloudinit_pre_nodeadm = [ { content_type = &quot;application/node.eks.aws&quot; content = &lt;&lt;-EOT --- apiVersion: node.eks.aws/v1alpha1 kind: NodeConfig spec: kubelet: config: maxPods: 220 EOT } ] ... }   Step 5: Manually Update Node Group Min Size to 200  caution Running 200 nodes can incur significant costs. If you plan to run this test independently, carefully estimate the expenses in advance to ensure budget feasibility.  Initially, set min_size = 0. Before starting the load test, update min_size and desired_size to 200 in the AWS console. This pre-creates all nodes required for the load test, ensuring all DaemonSets are running.  ","version":"Next","tagName":"h3"},{"title":"Load Test Configuration and Execution​","type":1,"pageTitle":"Kubeflow Spark Operator Benchmarks 🚀","url":"/data-on-eks/docs/benchmarks/spark-operator-eks-benchmark#load-test-configuration-and-execution","content":" To simulate high-scale concurrent job submissions, we developed Locust scripts that dynamically create Spark Operator templates and submit jobs concurrently by simulating multiple users.  Step 1: Set Up a Python Virtual EnvironmentOn your local machine (Mac or desktop), create a Python virtual environment and install the required dependencies:  cd analytics/terraform/spark-k8s-operator/examples/benchmark/spark-operator-benchmark-kit python3.12 -m venv venv source venv/bin/activate pip install -r requirements.txt   Step 2: Run the Load TestExecute the following command to start the load test:  locust --headless --only-summary -u 3 -r 1 \\ --job-limit-per-user 2000 \\ --jobs-per-min 1000 \\ --spark-namespaces spark-team-a,spark-team-b,spark-team-c   This command:  Starts a test with 3 concurrent users. Each user submits 2000 jobs at a rate of 1000 jobs per minute. Total of 6000 jobs are submitted by this command. Each Spark job consists of 6 pods (1 Driver and 5 executor pods) Generates 36,000 pods across 200 nodes using 3 namespaces. Locust script uses the Spark job template located at: analytics/terraform/spark-k8s-operator/examples/benchmark/spark-operator-benchmark-kit/spark-app-with-webhook.yaml. Spark job uses a simple spark-pi-sleep.jar that sleeps for a specified duration. The testing image is available at: public.ecr.aws/data-on-eks/spark:pi-sleep-v0.0.2  ","version":"Next","tagName":"h3"},{"title":"Results Verification​","type":1,"pageTitle":"Kubeflow Spark Operator Benchmarks 🚀","url":"/data-on-eks/docs/benchmarks/spark-operator-eks-benchmark#results-verification","content":" The load test runs for approximately 1 hour. During this time, you can monitor the Spark Operator metrics, cluster performance and resource utilization using Grafana. Follow the steps below to access the monitoring dashboard:  Step1: Port-forward Grafana ServiceRun the following command to create a local port-forward, making Grafana accessible from your local machine:  kubectl port-forward svc/kube-prometheus-stack-grafana 3000:80 -n kube-prometheus-stack   This maps port 3000 on your local system to Grafana's service inside the cluster.  Step2: Access GrafanaTo log into Grafana, retrieve the secret name storing the admin credentials:  terraform output grafana_secret_name   Then, use the retrieved secret name to fetch credentials from AWS Secrets Manager:  aws secretsmanager get-secret-value --secret-id &lt;grafana_secret_name_output&gt; --region $AWS_REGION --query &quot;SecretString&quot; --output text   Step 3: Access Grafana Dashboard  Open a web browser and navigate to http://localhost:3000.Enter username as admin and password as the retrieved password from the previous command.Navigate to the Spark Operator Load Test Dashboard to visualize:  The number of Spark jobs submitted.Cluster-wide CPU and memory consumption.Pod scaling behavior and resource allocation.  ","version":"Next","tagName":"h3"},{"title":"Summary of Results​","type":1,"pageTitle":"Kubeflow Spark Operator Benchmarks 🚀","url":"/data-on-eks/docs/benchmarks/spark-operator-eks-benchmark#summary-of-results","content":" tip For a detailed analysis, refer to the Kubeflow Spark Operator Website  CPU Utilization:  The Spark Operator controller pod is CPU-bound, utilizing all 36 cores during peak processing.CPU constraints limit job processing speed, making compute power a key factor for scalability.  Memory Usage:  Memory consumption remains stable, regardless of the number of applications processed.This indicates that memory is not a bottleneck, and increasing RAM would not improve performance.  Job Processing Rate:  The Spark Operator processes applications at ~130 apps per minute.The processing rate is capped by CPU limitations, preventing further scaling without additional compute resources.  Time to Process Jobs:  ~15 minutes to process 2,000 applications.~30 minutes to process 4,000 applications.These numbers align with the observed 130 apps per minute processing rate.  Work Queue Duration Metric Reliability:  The default work queue duration metric becomes unreliable once it exceeds 16 minutes.Under high concurrency, this metric fails to provide accurate insights into queue processing times.  API Server Performance Impact:  Kubernetes API request duration increases significantly under high workload conditions.This is caused by Spark querying executor pods frequently, not a limitation of the Spark Operator itself.The increased API server load affects job submission latency and monitoring performance across the cluster.  ","version":"Next","tagName":"h2"},{"title":"Cleanup​","type":1,"pageTitle":"Kubeflow Spark Operator Benchmarks 🚀","url":"/data-on-eks/docs/benchmarks/spark-operator-eks-benchmark#cleanup","content":" Step 1: Scale Down Node Group  To avoid unnecessary costs, first scale down the spark_operator_bench node group by setting its minimum and desired node count to zero:  Log in to the AWS Console.Navigate to the EKS section.Locate and select the spark_operator_bench node group.Edit the node group and update the Min Size and Desired Size to 0.Save the changes to scale down the nodes.  Step 2: Destroy the ClusterOnce the nodes have been scaled down, you can proceed with cluster teardown using the following script:  cd ${DOEKS_HOME}/analytics/terraform/spark-k8s-operator &amp;&amp; chmod +x cleanup.sh ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"EMR on EKS NVIDIA RAPIDS Accelerator for Apache Spark","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/ai-ml/emr-spark-rapids","content":"","keywords":"","version":"Next"},{"title":"EMR support for NVIDIA RAPIDS Accelerator for Apache Spark​","type":1,"pageTitle":"EMR on EKS NVIDIA RAPIDS Accelerator for Apache Spark","url":"/data-on-eks/docs/blueprints/ai-ml/emr-spark-rapids#emr-support-for-nvidia-rapids-accelerator-for-apache-spark","content":" Integration of Amazon EMR with NVIDIA RAPIDS Accelerator for Apache Spark​ Amazon EMR on EKS now extends its support to include the use of GPU instance types with the NVIDIA RAPIDS Accelerator for Apache Spark. As the use of artificial intelligence (AI) and machine learning (ML) continues to expand in the realm of data analytics, there's an increasing demand for rapid and cost-efficient data processing, which GPUs can provide. The NVIDIA RAPIDS Accelerator for Apache Spark enables users to harness the superior performance of GPUs, leading to substantial infrastructure cost savings.  ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"EMR on EKS NVIDIA RAPIDS Accelerator for Apache Spark","url":"/data-on-eks/docs/blueprints/ai-ml/emr-spark-rapids#features","content":" Highlighted Features​ Experience a performance boost in data preparation tasks, allowing you to transition quickly to the subsequent stages of your pipeline. This not only accelerates model training but also liberates data scientists and engineers to concentrate on priority tasks. Spark 3 ensures seamless coordination of end-to-end pipelines - from data ingestion, through model training, to visualization. The same GPU-accelerated setup can serve both Spark and machine learning or deep learning frameworks. This obviates the need for discrete clusters and provides GPU acceleration to the entire pipeline. Spark 3 extends support for columnar processing in the Catalyst query optimizer. The RAPIDS Accelerator can plug into this system to speed up SQL and DataFrame operators. When the query plan is actioned, these operators can then utilize the GPUs within the Spark cluster for improved performance. NVIDIA has introduced an innovative Spark shuffle implementation designed to optimize data exchange between Spark tasks. This shuffle system is built on GPU-boosted communication libraries, including UCX, RDMA, and NCCL, which significantly enhance data transfer rates and overall performance.-  Deploying the Solution 👈  ","version":"Next","tagName":"h3"},{"title":"Launching XGBoost Spark Job​","type":1,"pageTitle":"EMR on EKS NVIDIA RAPIDS Accelerator for Apache Spark","url":"/data-on-eks/docs/blueprints/ai-ml/emr-spark-rapids#launching-xgboost-spark-job","content":" Training Dataset​  Fannie Mae’s Single-Family Loan Performance Data has a comprehensive dataset starting from 2013. It provides valuable insights into the credit performance of a portion of Fannie Mae’s single-family book of business. This dataset is designed to assist investors in better understanding the credit performance of single-family loans owned or guaranteed by Fannie Mae.  Step 1: Building a Custom Docker Image​  To pull the Spark Rapids base image from the EMR on EKS ECR repository located in us-west-2, log in:  aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 895885662937.dkr.ecr.us-west-2.amazonaws.com   If you're located in a different region, please refer to: this guide.  To build your Docker image locally, use the following command:  Build the custom Docker image using the provided Dockerfile. Choose a tag for the image, such as 0.10.  info Please note that the build process may take some time, depending on your network speed. Keep in mind that the resulting image size will be approximately 23.5GB.  cd ~/data-on-eks/ai-ml/emr-spark-rapids/examples/xgboost docker build -t emr-6.10.0-spark-rapids-custom:0.10 -f Dockerfile .   Replace &lt;ACCOUNTID&gt; with your AWS account ID. Log in to your ECR repository with the following command:  aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin &lt;ACCOUNTID&gt;.dkr.ecr.us-west-2.amazonaws.com   To push your Docker image to your ECR, use:  $ docker tag emr-6.10.0-spark-rapids-custom:0.10 &lt;ACCOUNT_ID&gt;.dkr.ecr.us-west-2.amazonaws.com/emr-6.10.0-spark-rapids-custom:0.10 $ docker push &lt;ACCOUNT_ID&gt;.dkr.ecr.us-west-2.amazonaws.com/emr-6.10.0-spark-rapids-custom:0.10   You can use this image during the job execution in Step3 .  ","version":"Next","tagName":"h3"},{"title":"Step2: Acquire the Input Data (Fannie Mae’s Single-Family Loan Performance Data)​","type":1,"pageTitle":"EMR on EKS NVIDIA RAPIDS Accelerator for Apache Spark","url":"/data-on-eks/docs/blueprints/ai-ml/emr-spark-rapids#step2-acquire-the-input-data-fannie-maes-single-family-loan-performance-data","content":" This dataset is sourced from Fannie Mae’s Single-Family Loan Performance Data. All rights are held by Fannie Mae.  Go to the Fannie Mae websiteClick on Single-Family Loan Performance Data Register as a new user if you are using the website for the first timeUse the credentials to login Select HPClick on Download Data and choose Single-Family Loan Performance DataYou will find a tabular list of Acquisition and Performance` files sorted based on year and quarter. Click on the file to download. You can download three years(2020, 2021 and 2022 - 4 files for each year and one for each quarter) worth of data that will be used in our example job. e.g.,: 2017Q1.zipUnzip the download file to extract the csv file to your local machine. e.g.,: 2017Q1.csvCopy only the CSV files to an S3 bucket under ${S3_BUCKET}/${EMR_VIRTUAL_CLUSTER_ID}/spark-rapids-emr/input/fannie-mae-single-family-loan-performance/. The example below uses three years of data (one file for each quarter, 12 files in total). Note: ${S3_BUCKET} and ${EMR_VIRTUAL_CLUSTER_ID} values can be extracted from Terraform outputs.   aws s3 ls s3://emr-spark-rapids-&lt;aws-account-id&gt;-us-west-2/949wt7zuphox1beiv0i30v65i/spark-rapids-emr/input/fannie-mae-single-family-loan-performance/ 2023-06-24 21:38:25 2301641519 2000Q1.csv 2023-06-24 21:38:25 9739847213 2020Q2.csv 2023-06-24 21:38:25 10985541111 2020Q3.csv 2023-06-24 21:38:25 11372073671 2020Q4.csv 2023-06-23 16:38:36 9603950656 2021Q1.csv 2023-06-23 16:38:36 7955614945 2021Q2.csv 2023-06-23 16:38:36 5365827884 2021Q3.csv 2023-06-23 16:38:36 4390166275 2021Q4.csv 2023-06-22 19:20:08 2723499898 2022Q1.csv 2023-06-22 19:20:08 1426204690 2022Q2.csv 2023-06-22 19:20:08 595639825 2022Q3.csv 2023-06-22 19:20:08 180159771 2022Q4.csv   ","version":"Next","tagName":"h3"},{"title":"Step3: Run the EMR Spark XGBoost Job​","type":1,"pageTitle":"EMR on EKS NVIDIA RAPIDS Accelerator for Apache Spark","url":"/data-on-eks/docs/blueprints/ai-ml/emr-spark-rapids#step3-run-the-emr-spark-xgboost-job","content":" Here, we will utilize a helper shell script to execute the job. This script requires user input.  This script will ask for certain inputs that you can obtain from Terraform outputs. See the example below.  cd ai-ml/emr-spark-rapids/examples/xgboost/ &amp;&amp; chmod +x execute_spark_rapids_xgboost.sh ./execute_spark_rapids_xgboost.sh # Example inputs shown below Did you copy the fannie-mae-single-family-loan-performance data to S3 bucket(y/n): y Enter the customized Docker image URI: public.ecr.aws/o7d8v7g9/emr-6.10.0-spark-rapids:0.11 Enter EMR Virtual Cluster AWS Region: us-west-2 Enter the EMR Virtual Cluster ID: 949wt7zuphox1beiv0i30v65i Enter the EMR Execution Role ARN: arn:aws:iam::&lt;ACCOUNTID&gt;:role/emr-spark-rapids-emr-eks-data-team-a Enter the CloudWatch Log Group name: /emr-on-eks-logs/emr-spark-rapids/emr-ml-team-a Enter the S3 Bucket for storing PySpark Scripts, Pod Templates, Input data and Output data.&lt;bucket-name&gt;: emr-spark-rapids-&lt;ACCOUNTID&gt;-us-west-2 Enter the number of executor instances (4 to 8): 8   Verify the pod status    info Note that the first execution might take longer as it needs to download the image for the EMR Job Pod, Driver, and Executor pods. Each pod may take up to 8 minutes to download the Docker image. Subsequent runs should be faster (usually under 30 seconds), thanks to image caching  ","version":"Next","tagName":"h3"},{"title":"Step4: Verify the Job results​","type":1,"pageTitle":"EMR on EKS NVIDIA RAPIDS Accelerator for Apache Spark","url":"/data-on-eks/docs/blueprints/ai-ml/emr-spark-rapids#step4-verify-the-job-results","content":" Log in to check the Spark driver pod logs from either CloudWatch logs or your S3 bucket.  Here's a sample output from the log file:  /emr-on-eks-logs/emr-spark-rapids/emr-ml-team-a spark-rapids-emr/949wt7zuphox1beiv0i30v65i/jobs/0000000327fe50tosa4/containers/spark-0000000327fe50tosa4/spark-0000000327fe50tosa4-driver/stdout   The following is a sample output from the above log file:  Raw Dataframe CSV Rows count : 215386024 Raw Dataframe Parquet Rows count : 215386024 ETL takes 222.34674382209778  Training takes 95.90932035446167 seconds If features_cols param set, then features_col param is ignored.  Transformation takes 63.999391317367554 seconds +--------------+--------------------+--------------------+----------+ |delinquency_12| rawPrediction| probability|prediction| +--------------+--------------------+--------------------+----------+ | 0|[10.4500541687011...|[0.99997103214263...| 0.0| | 0|[10.3076572418212...|[0.99996662139892...| 0.0| | 0|[9.81707763671875...|[0.99994546175003...| 0.0| | 0|[9.10498714447021...|[0.99988889694213...| 0.0| | 0|[8.81903457641601...|[0.99985212087631...| 0.0| +--------------+--------------------+--------------------+----------+ only showing top 5 rows  Evaluation takes 3.8372223377227783 seconds Accuracy is 0.996563056111921  ","version":"Next","tagName":"h3"},{"title":"ML Pipeline for Fannie Mae Single Loan Performance Dataset​","type":1,"pageTitle":"EMR on EKS NVIDIA RAPIDS Accelerator for Apache Spark","url":"/data-on-eks/docs/blueprints/ai-ml/emr-spark-rapids#ml-pipeline-for-fannie-mae-single-loan-performance-dataset","content":" Step1: Preprocess and clean the dataset to handle missing values, categorical variables, and other data inconsistencies.This may involve techniques like data imputation,one-hot encoding, and data normalization.  Step2: Create additional features from the existing ones that might provide more useful information for predicting loan performance. For example, you could extract features like loan-to-value ratio, borrower's credit score range, or loan origination year.  Step3: Divide the dataset into two parts: one for training the XGBoost model and one for evaluating its performance. This allows you to assess how well the model generalizes to unseen data.  Step4: Feed the training dataset into XGBoost to train the model. XGBoost will analyze the loan attributes and their corresponding loan performance labels to learn the patterns and relationships between them. The objective is to predict whether a loan is likely to default or perform well based on the given features.  Step5: Once the model is trained, use the evaluation dataset to assess its performance. This involves analyzing metrics such as accuracy, precision, recall, or area under the receiver operating characteristic curve (AUC-ROC) to measure how well the model predicts loan performance  Step6: If the performance is not satisfactory, you can tune the XGBoost hyperparameters, such as the learning rate, tree depth, or regularization parameters, to improve the model's accuracy or address issues like overfitting.  Step7: Finally, with a trained and validated XGBoost model, you can use it to make predictions on new, unseen loan data. These predictions can help in identifying potential risks associated with loan default or evaluating loan performance.    ","version":"Next","tagName":"h3"},{"title":"GPU Monitoring with DCGM Exporter, Prometheus and Grafana​","type":1,"pageTitle":"EMR on EKS NVIDIA RAPIDS Accelerator for Apache Spark","url":"/data-on-eks/docs/blueprints/ai-ml/emr-spark-rapids#gpu-monitoring-with-dcgm-exporter-prometheus-and-grafana","content":" Observability plays a crucial role in managing and optimizing hardware resources such as GPUs, particularly in machine learning workloads where the GPU utilization is high. The ability to monitor GPU usage in real-time, identify trends, and detect anomalies can significantly impact performance tuning, troubleshooting, and efficient resource utilization.  NVIDIA GPU Operator plays a key role in GPU observability. It automates the deployment of the necessary components to run GPU workloads on Kubernetes. One of its components, the DCGM (Data Center GPU Manager) Exporter, is an open-source project that exports GPU metrics in a format that can be ingested by Prometheus, a leading open-source monitoring solution. These metrics include GPU temperature, memory usage, GPU utilization, and more. The DCGM Exporter allows you to monitor these metrics on a per-GPU basis, providing granular visibility into your GPU resources.  The NVIDIA GPU Operator, in combination with the DCGM Exporter, exports GPU metrics to a Prometheus server. With its flexible query language, Prometheus allows you to slice and dice data to generate insights into resource usage patterns.  However, Prometheus is not designed for long-term data storage. This is where the Amazon Managed Service for Prometheus (AMP) comes into play. It provides a fully-managed, secure, and scalable service for Prometheus that makes it easy to analyze operational data at scale without having to manage the underlying infrastructure.  Visualizing these metrics and creating informative dashboards is where Grafana excels. Grafana is an open-source platform for monitoring and observability, offering rich visualizations to represent collected metrics intuitively. When combined with Prometheus, Grafana can display the GPU metrics collected by the DCGM Exporter in a user-friendly manner.  The NVIDIA GPU Operator is configured to export metrics to the Prometheus server, which then remote-writes these metrics to Amazon Managed Prometheus (AMP). As a user, you can log into the Grafana WebUI, deployed as part of the blueprint, and add AMP as a data source. Following this, you can import the open-source GPU monitoring dashboard that presents GPU metrics in an easily digestible format, facilitating real-time performance monitoring and resource optimization.  NVIDIA GPU Operator: Installed on your Kubernetes cluster, the NVIDIA GPU Operator is responsible for managing the lifecycle of GPU resources. It deploys NVIDIA drivers and the DCGM Exporter on each GPU-equipped node.DCGM Exporter: The DCGM Exporter runs on each node, collecting GPU metrics and exposing them to Prometheus.Prometheus: Prometheus is a time-series database that collects metrics from various sources, including the DCGM Exporter. It pulls metrics from the exporter at regular intervals and stores them. In this setup, you would configure Prometheus to remote-write the collected metrics to AMP.Amazon Managed Service for Prometheus (AMP): AMP is a fully-managed Prometheus service provided by AWS. It takes care of long-term storage, scalability, and security of your Prometheus data.Grafana: Grafana is a visualization tool that can query AMP for the collected metrics, and display them on informative dashboards.  In this blueprint, we leverage DCGM to write GPU metrics to both Prometheus and Amazon Managed Prometheus (AMP). To verify the GPU metrics, you can use Grafana by running the following command:  kubectl port-forward svc/grafana 3000:80 -n grafana `` Login to Grafana using `admin` as the username, and retrieve the password from Secrets Manager using the following AWS CLI command: ```bash aws secretsmanager get-secret-value --secret-id emr-spark-rapids-grafana --region us-west-2   Once logged in, add the AMP datasource to Grafana and import the Open Source GPU monitoring dashboard. You can then explore the metrics and visualize them using the Grafana dashboard, as shown in the screenshot below.    Cleanup 👈  caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment ","version":"Next","tagName":"h3"},{"title":"JARK on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/ai-ml/jark","content":"","keywords":"","version":"Next"},{"title":"What is JARK?​","type":1,"pageTitle":"JARK on EKS","url":"/data-on-eks/docs/blueprints/ai-ml/jark#what-is-jark","content":" JARK is a powerful stack composed of JupyterHub, Argo Workflows, Ray, and Kubernetes, designed to streamline the deployment and management of Generative AI models on Amazon EKS. This stack brings together some of the most effective tools in the AI and Kubernetes ecosystem, offering a robust solution for training, fine-tuning, and inference large Gen AI models.  ","version":"Next","tagName":"h3"},{"title":"Key Features and Benefits​","type":1,"pageTitle":"JARK on EKS","url":"/data-on-eks/docs/blueprints/ai-ml/jark#key-features-and-benefits","content":" JupyterHub: Provides a collaborative environment for running notebooks, crucial for model development and prompt engineering.  Argo Workflows: Automates the entire AI model pipeline—from data preparation to model deployment—ensuring a consistent and efficient process.  Ray: Scales AI model training and inference across multiple nodes, making it easier to handle large datasets and reduce training time.  Kubernetes: Powers the stack by providing the necessary orchestration to run, scale, and manage containerized AI models with high availability and resource efficiency.  ","version":"Next","tagName":"h3"},{"title":"Why Use JARK?​","type":1,"pageTitle":"JARK on EKS","url":"/data-on-eks/docs/blueprints/ai-ml/jark#why-use-jark","content":" The JARK stack is ideal for teams and organizations looking to simplify the complex process of deploying and managing AI models. Whether you're working on cutting-edge generative models or scaling existing AI workloads, JARK on Amazon EKS offers the flexibility, scalability, and control you need to succeed.    ","version":"Next","tagName":"h3"},{"title":"Ray on Kubernetes​","type":1,"pageTitle":"JARK on EKS","url":"/data-on-eks/docs/blueprints/ai-ml/jark#ray-on-kubernetes","content":" Ray is an open-source framework for building scalable and distributed applications. It is designed to make it easy to write parallel and distributed Python applications by providing a simple and intuitive API for distributed computing. It has a growing community of users and contributors, and is actively maintained and developed by the Ray team at Anyscale, Inc.    Source: https://docs.ray.io/en/latest/cluster/key-concepts.html  To deploy Ray in production across multiple machines users must first deploy Ray Cluster. A Ray Cluster consists of head nodes and worker nodes which can be autoscaled using the built-in Ray Autoscaler.  Deploying Ray Cluster on Kubernetes including on Amazon EKS is supported via the KubeRay Operator. The operator provides a Kubernetes-native way to manage Ray clusters. The installation of KubeRay Operator involves deploying the operator and the CRDs for RayCluster, RayJob and RayService as documented here.  Deploying Ray on Kubernetes can provide several benefits:  Scalability: Kubernetes allows you to scale your Ray cluster up or down based on your workload requirements, making it easy to manage large-scale distributed applications. Fault tolerance: Kubernetes provides built-in mechanisms for handling node failures and ensuring high availability of your Ray cluster. Resource allocation: With Kubernetes, you can easily allocate and manage resources for your Ray workloads, ensuring that they have access to the necessary resources for optimal performance. Portability: By deploying Ray on Kubernetes, you can run your workloads across multiple clouds and on-premises data centers, making it easy to move your applications as needed. Monitoring: Kubernetes provides rich monitoring capabilities, including metrics and logging, making it easy to troubleshoot issues and optimize performance.  Overall, deploying Ray on Kubernetes can simplify the deployment and management of distributed applications, making it a popular choice for many organizations that need to run large-scale machine learning workloads.  Before moving forward with the deployment please make sure you have read the pertinent sections of the official documentation.    Source: https://docs.ray.io/en/latest/cluster/kubernetes/index.html  Deploying the Solution 👈  Verify Deployment 👈  Clean Up 👈 ","version":"Next","tagName":"h3"},{"title":"Amazon EMR on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks","content":"","keywords":"","version":"Next"},{"title":"Benefits of EMR on EKS​","type":1,"pageTitle":"Amazon EMR on EKS","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks#benefits-of-emr-on-eks","content":" ","version":"Next","tagName":"h2"},{"title":"Simplify management​","type":1,"pageTitle":"Amazon EMR on EKS","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks#simplify-management","content":" You get the same EMR benefits for Apache Spark on EKS that you get on EC2 today. This includes fully managed versions of Apache Spark 2.4 and 3.0, automatic provisioning, scaling, performance optimized runtime, and tools like EMR Studio for authoring jobs and an Apache Spark UI for debugging.  ","version":"Next","tagName":"h3"},{"title":"Reduce Costs​","type":1,"pageTitle":"Amazon EMR on EKS","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks#reduce-costs","content":" With EMR on EKS, your compute resources can be shared between your Apache Spark applications and your other Kubernetes applications. Resources are allocated and removed on-demand to eliminate over-provisioning or under-utilization of these resources, enabling you to lower costs as you only pay for the resources you use.  ","version":"Next","tagName":"h3"},{"title":"Optimize Performance​","type":1,"pageTitle":"Amazon EMR on EKS","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks#optimize-performance","content":" By running analytics applications on EKS, you can reuse existing EC2 instances in your shared Kubernetes cluster and avoid the startup time of creating a new cluster of EC2 instances dedicated for analytics. You can also get 3x faster performance running performance optimized Spark with EMR on EKS compared to standard Apache Spark on EKS.  ","version":"Next","tagName":"h3"},{"title":"EMR on EKS Deployment patterns with Terraform​","type":1,"pageTitle":"Amazon EMR on EKS","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks#emr-on-eks-deployment-patterns-with-terraform","content":" The following Terraform templates are available to deploy.  EMR on EKS with Karpenter: 👈:skin-tone-3: Start Here if you are new to EMR on EKS. This template deploys EMR on EKS cluster and uses Karpenter to scale Spark jobs.ACK controller for EMR on EKS: This template deploys EMR on EKS cluster and uses ACK controller to manage Spark jobs ","version":"Next","tagName":"h2"},{"title":"JupyterHub on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/ai-ml/jupyterhub","content":"","keywords":"","version":"Next"},{"title":"JupyterHub on EKS​","type":1,"pageTitle":"JupyterHub on EKS","url":"/data-on-eks/docs/blueprints/ai-ml/jupyterhub#jupyterhub-on-eks-1","content":" Deploying JupyterHub on Amazon Elastic Kubernetes Service (EKS) combines the versatility of JupyterHub with the scalability and flexibility of Kubernetes. This blueprint enables users to build a multi-tenant JupyterHub platform on EKS with the help of JupyterHub profiles. By leveraging EFS shared filesystems for each user, it facilitates easy sharing of notebooks and provides individual EFS storage so that user pods can securely store data, even if the user pod is deleted or expired. When users log in, they can access all their scripts and data under the existing EFS volume.  By leveraging the capabilities of EKS, you can seamlessly scale your JupyterHub environment to meet the needs of your users, ensuring efficient resource utilization and optimal performance. With EKS, you can take advantage of Kubernetes features such as automated scaling, high availability, and easy deployment of updates and upgrades. This enables you to provide a reliable and robust JupyterHub experience for your users, empowering them to collaborate, explore, and analyze data effectively.  To get started with JupyterHub on EKS, follow the instructions in this guide to set up and configure your JupyterHub environment.  Deploying the Solution 👈  Verify the resources 👈  ","version":"Next","tagName":"h2"},{"title":"Type1 deployment: Login to JupyterHub​","type":1,"pageTitle":"JupyterHub on EKS","url":"/data-on-eks/docs/blueprints/ai-ml/jupyterhub#type1-deployment-login-to-jupyterhub","content":" Exposing JupyterHub with port-forward:  Execute the command below to make the JupyterHub service accessible for viewing the Web User Interface locally. It’s important to note that our current dummy deployment only establishes a Web UI service with a ClusterIP. Should you wish to customize this to an internal or internet-facing load balancer, you can make the necessary adjustments in the JupyterHub Helm chart values file.  kubectl port-forward svc/proxy-public 8080:80 -n jupyterhub   Sign-in: Navigate to http://localhost:8080/ in your web browser. Input user-1 as the username and choose any password.  Select server options: Upon sign-in, you’ll be presented with a variety of Notebook instance profiles to choose from. The Data Engineering (CPU) server is for traditional, CPU based notebook work. The Elyra server provides Elyra functionality, allowing you to quickly develop pipelines: . Trainium and Inferentia servers will deploy the notebook server onto Trainium and Inferentia nodes, allowing accelerated workloads. Time Slicing and MIG are two different strategies for GPU sharing. Finally, the Data Science (GPU) server is a traditional server running on an NVIDIA GPU.  For this time-slicing feature demonstration, we’ll be using the Data Science (GPU + Time-Slicing – G5) profile. Go ahead and select this option and choose the Start button.    The new node created by Karpenter with the g5.2xlarge instance type has been configured to leverage the timeslicing feature provided by the NVIDIA device plugin. This feature allows for efficient GPU utilization by dividing a single GPU into multiple allocatable units. In this case, we have defined 4 allocatable GPUs in the NVIDIA device plugin Helm chart config map. Below is the status of the node:  GPUs: The node is configured with 4 GPUs through the NVIDIA device plugin's timeslicing feature. This allows the node to allocate GPU resources more flexibly to different workloads.  status: capacity: cpu: '8' # The node has 8 CPUs available ephemeral-storage: 439107072Ki # The node has a total ephemeral storage capacity of 439107072 KiB hugepages-1Gi: '0' # The node has 0 1Gi hugepages hugepages-2Mi: '0' # The node has 0 2Mi hugepages memory: 32499160Ki # The node has a total memory capacity of 32499160 KiB nvidia.com/gpu: '4' # The node has a total of 4 GPUs, configured through timeslicing pods: '58' # The node can accommodate up to 58 pods allocatable: cpu: 7910m # 7910 millicores of CPU are allocatable ephemeral-storage: '403607335062' # 403607335062 KiB of ephemeral storage is allocatable hugepages-1Gi: '0' # 0 1Gi hugepages are allocatable hugepages-2Mi: '0' # 0 2Mi hugepages are allocatable memory: 31482328Ki # 31482328 KiB of memory is allocatable nvidia.com/gpu: '4' # 4 GPUs are allocatable pods: '58' # 58 pods are allocatable   Setting up second user (user-2) environment:  To demonstrate GPU time-slicing in action, we’ll provision another Jupyter Notebook instance. This time, we’ll validate that the second user’s pod is scheduled on the same node as the first user’s, taking advantage of the GPU time-slicing configuration we set up earlier. Follow the steps below to achieve this:  Open JupyterHub in an Incognito browser window: Navigate to http://localhost:8080/ in the new incognito window in web browser. Input user-2 as the username and choose any password.  Choose server options: After logging in, you’ll see the server options page. Ensure that you select the Data Science (GPU + Time-Slicing – G5) radio button and select Start.    Verify pod placement: Notice that this pod placement takes only few seconds unlike the user-1. It’s because the Kubernetes scheduler is able to place the pod on the existing g5.2xlarge node created by the user-1 pod. user-2 is also using the same docker image so there is no delay in pulling the docker image and it leveraged local cache.  Open a terminal and execute the following command to check where the new Jupyter Notebook pod has been scheduled:  kubectl get pods -n jupyterhub -owide | grep -i user   Observe that both the user-1 and user-2 pods are running on the same node. This confirms that our GPU time-slicing configuration is functioning as expected.  info Checkout the AWS blog: Building multi-tenant JupyterHub Platforms on Amazon EKS for more details  ","version":"Next","tagName":"h3"},{"title":"Type2 deployment(Optional): Login into JupyterHub via Amazon Cognito​","type":1,"pageTitle":"JupyterHub on EKS","url":"/data-on-eks/docs/blueprints/ai-ml/jupyterhub#type2-deploymentoptional-login-into-jupyterhub-via-amazon-cognito","content":" Add the CNAME DNS record in ChangeIP for the JupyterHub domain with the load balancer DNS name.    info When adding the load balancer DNS name in the value field of CNAME in ChangeIP make sure to add a dot(.) at the end of the load-balancer DNS name.  Now typing the domain url in the browser should redirect to the Jupyterhub login page.    Follow the Cognito sign-up and sign-in process to login.    Successful sign-in will open up the JupyterHub environment for the logged in user.    To test the setup of the shared and personal directories in JupyterHub, you can follow these steps:  Open a terminal window from the launcher dashboard.    execute the command  df -h   Verify EFS mounts created. Each user's private home directory is available at /home/jovyan. The shared directory is available at /home/shared  ","version":"Next","tagName":"h3"},{"title":"Type3 deployment(Optional): Login into JupyterHub via OAuth (Keycloak)​","type":1,"pageTitle":"JupyterHub on EKS","url":"/data-on-eks/docs/blueprints/ai-ml/jupyterhub#type3-deploymentoptional-login-into-jupyterhub-via-oauth-keycloak","content":" Note: This will look a little different depending on your OAuth provider.  Add the CNAME DNS record in ChangeIP for the JupyterHub domain with the load balancer DNS name.    info When adding the load balancer DNS name in the value field of CNAME in ChangeIP make sure to add a dot(.) at the end of the load-balancer DNS name.  Now typing the domain url in the browser should redirect to the Jupyterhub login page.    Follow the Keycloak sign-up and sign-in process to login.    Successful sign-in will open up the JupyterHub environment for the logged in user.    Cleanup 👈 ","version":"Next","tagName":"h3"},{"title":"Ray on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/ai-ml/ray","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Ray on EKS","url":"/data-on-eks/docs/blueprints/ai-ml/ray#introduction","content":" Ray is an open-source framework for building scalable and distributed applications. It is designed to make it easy to write parallel and distributed Python applications by providing a simple and intuitive API for distributed computing. It has a growing community of users and contributors, and is actively maintained and developed by the Ray team at Anyscale, Inc.  To deploy Ray in production across multiple machines users must first deploy Ray Cluster. A Ray Cluster consists of head nodes and worker nodes which can be autoscaled using the built-in Ray Autoscaler.    Source: https://docs.ray.io/en/latest/cluster/key-concepts.html  ","version":"Next","tagName":"h2"},{"title":"Ray on Kubernetes​","type":1,"pageTitle":"Ray on EKS","url":"/data-on-eks/docs/blueprints/ai-ml/ray#ray-on-kubernetes","content":" Deploying Ray Cluster on Kubernetes including on Amazon EKS is supported via the KubeRay Operator. The operator provides a Kubernetes-native way to manage Ray clusters. The installation of KubeRay Operator involves deploying the operator and the CRDs for RayCluster, RayJob and RayService as documented here.  Deploying Ray on Kubernetes can provide several benefits:  Scalability: Kubernetes allows you to scale your Ray cluster up or down based on your workload requirements, making it easy to manage large-scale distributed applications. Fault tolerance: Kubernetes provides built-in mechanisms for handling node failures and ensuring high availability of your Ray cluster. Resource allocation: With Kubernetes, you can easily allocate and manage resources for your Ray workloads, ensuring that they have access to the necessary resources for optimal performance. Portability: By deploying Ray on Kubernetes, you can run your workloads across multiple clouds and on-premises data centers, making it easy to move your applications as needed. Monitoring: Kubernetes provides rich monitoring capabilities, including metrics and logging, making it easy to troubleshoot issues and optimize performance.  Overall, deploying Ray on Kubernetes can simplify the deployment and management of distributed applications, making it a popular choice for many organizations that need to run large-scale machine learning workloads.  Before moving forward with the deployment please make sure you have read the pertinent sections of the official documentation.    Source: https://docs.ray.io/en/latest/cluster/kubernetes/index.html  ","version":"Next","tagName":"h2"},{"title":"Deploying the Example​","type":1,"pageTitle":"Ray on EKS","url":"/data-on-eks/docs/blueprints/ai-ml/ray#deploying-the-example","content":" In this example, you will provision Ray Cluster on Amazon EKS using the KubeRay Operator. The example also demonstrates the use of Karpenter of autoscaling of worker nodes for job specific Ray Clusters.    Pre-requisites 👈  Deploy the EKS Cluster with KubeRay Operator 👈  Verify Deployment 👈  Deploy Ray Clusters and Workloads 👈  Teardown 👈 ","version":"Next","tagName":"h2"},{"title":"ACK Controller for EMR on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-ack","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"ACK Controller for EMR on EKS","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-ack#introduction","content":" In this post, we will learn to build EMR on EKS Spark workloads by using AWS Controllers for Kubernetes (ACK). We will also build a end-to-end observability for Spark workloads by leveraging Amazon Managed Service for Prometheus to collect and store the metrics generated by Spark Applications and then use Amazon Managed Grafana to build dashboards for monitoring use cases.  Deploying the Solution 👈  ","version":"Next","tagName":"h2"},{"title":"Setup Amazon Managed Grafana with SSO​","type":1,"pageTitle":"ACK Controller for EMR on EKS","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-ack#setup-amazon-managed-grafana-with-sso","content":" Currently, this step is manual. Please follow the steps in this blog to create Amazon Managed Grafana with SSO enabled in your account. You can visualize the Spark jobs runs and metrics using Amazon Managed Prometheus and Amazon Managed Grafana.  Execute Sample Spark job - EMR Virtual Cluster 👈  Cleanup 👈  caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment ","version":"Next","tagName":"h3"},{"title":"EMR Virtual Cluster on EKS Fargate","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-fargate","content":"","keywords":"","version":"Next"},{"title":"Prerequisites:​","type":1,"pageTitle":"EMR Virtual Cluster on EKS Fargate","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-fargate#prerequisites","content":" Ensure that you have the following tools installed locally:  aws clikubectlterraform  ","version":"Next","tagName":"h2"},{"title":"Deploy​","type":1,"pageTitle":"EMR Virtual Cluster on EKS Fargate","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-fargate#deploy","content":" Clone the repository  git clone https://github.com/awslabs/data-on-eks.git   Navigate into one of the example directories and run terraform init  cd data-on-eks/analytics/emr-eks-fargate terraform init   Set AWS_REGION and Runterraform plan to verify the resources created by this execution.  export AWS_REGION=&quot;us-west-2&quot; # Change according to your need terraform plan   Deploy the pattern  terraform apply   Enter yes at command prompt to apply  ","version":"Next","tagName":"h3"},{"title":"Validate​","type":1,"pageTitle":"EMR Virtual Cluster on EKS Fargate","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-fargate#validate","content":" The following command will update the kubeconfig on your local machine and allow you to interact with your EKS Cluster using kubectl.  Run update-kubeconfig command:  aws eks --region &lt;REGION&gt; update-kubeconfig --name &lt;CLUSTER_NAME&gt;   Test by listing all the pods running currently. Note: the EMR on EKS virtual cluster(s) will create pods as needed to execute jobs and the pods shown will vary depending on how long after deploying the example you run the kubectl get pods -A command:  kubectl get pods -A # Output should look like below NAMESPACE NAME READY STATUS RESTARTS AGE kube-system cluster-proportional-autoscaler-coredns-6ccfb4d9b5-sjb8m 1/1 Running 0 8m27s kube-system coredns-7c8d74d658-9cmn2 1/1 Running 0 8m27s kube-system coredns-7c8d74d658-pmf5l 1/1 Running 0 7m38s   Execute the sample EMR on EKS job. This will calculate the value of Pi using sample PySpark job.  cd analytics/terraform/emr-eks-fargate/examples ./basic-pyspark-job '&lt;ENTER_EMR_EMR_VIRTUAL_CLUSTER_ID&gt;' '&lt;EMR_JOB_EXECUTION_ROLE_ARN&gt;'   Once the job is complete, navigate to the CloudWatch log console and find the log group created by this example /emr-on-eks-logs/emr-workload/emr-workload. Click Search Log Group and enter roughly into the search field. You should see a log entry that has the returned results from the job.  { &quot;message&quot;: &quot;Pi is roughly 3.146360&quot;, &quot;time&quot;: &quot;2022-11-20T16:46:59+00:00&quot; }   ","version":"Next","tagName":"h2"},{"title":"Destroy​","type":1,"pageTitle":"EMR Virtual Cluster on EKS Fargate","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-fargate#destroy","content":" To teardown and remove the resources created in this example:  kubectl delete all --all -n emr-workload -n emr-custom # ensure all jobs resources are cleaned up first terraform destroy -target=&quot;module.eks_blueprints_kubernetes_addons&quot; -auto-approve terraform destroy -target=&quot;module.eks&quot; -auto-approve terraform destroy -auto-approve   If the EMR virtual cluster fails to delete and the following error is shown:  Error: waiting for EMR Containers Virtual Cluster (xwbc22787q6g1wscfawttzzgb) delete: unexpected state 'ARRESTED', wanted target ''. last error: %!s(&lt;nil&gt;)   You can clean up any of the clusters in the ARRESTED state with the following:  aws emr-containers list-virtual-clusters --region us-west-2 --states ARRESTED \\ --query 'virtualClusters[0].id' --output text | xargs -I{} aws emr-containers delete-virtual-cluster \\ --region us-west-2 --id {}  ","version":"Next","tagName":"h2"},{"title":"AWS Trainium on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/ai-ml/trainium","content":"","keywords":"","version":"Next"},{"title":"Solution Architecture​","type":1,"pageTitle":"AWS Trainium on EKS","url":"/data-on-eks/docs/blueprints/ai-ml/trainium#solution-architecture","content":"   Deploying the Solution 👈  ","version":"Next","tagName":"h3"},{"title":"Observability with AWS CloudWatch and Neuron Monitor​","type":1,"pageTitle":"AWS Trainium on EKS","url":"/data-on-eks/docs/blueprints/ai-ml/trainium#observability-with-aws-cloudwatch-and-neuron-monitor","content":" This blueprint deploys the CloudWatch Observability Agent as a managed add-on, providing comprehensive monitoring for containerized workloads. It includes container insights for tracking key performance metrics such as CPU and memory utilization. Additionally, the blueprint integrates GPU metrics using NVIDIA's DCGM plugin, which is essential for monitoring high-performance GPU workloads. For machine learning models running on AWS Inferentia or Trainium, the Neuron Monitor plugin is added to capture and report Neuron-specific metrics.  All metrics, including container insights, GPU performance, and Neuron metrics, are sent to Amazon CloudWatch, where you can monitor and analyze them in real-time. After the deployment is complete, you should be able to access these metrics directly from the CloudWatch console, allowing you to manage and optimize your workloads effectively.  ","version":"Next","tagName":"h3"},{"title":"EMR on EKS with CDK blueprint","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-cdk","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"EMR on EKS with CDK blueprint","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-cdk#introduction","content":" In this post, we will learn how to use EMR on EKS AddOn and Teams in the cdk-eks-blueprints to deploy a an infrasturcture on EKS to submit Spark Job. The cdk-eks-blueprints allows you deploy an EKS cluster and enable it to be used by EMR on EKS service with minimal setup. The architecture below shows a conceptual view of the infrastructure you will deploy through this blueprint.    ","version":"Next","tagName":"h2"},{"title":"Deploying the Solution​","type":1,"pageTitle":"EMR on EKS with CDK blueprint","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-cdk#deploying-the-solution","content":" In this example, you will provision the following:  Creates EKS Cluster Control plane with public endpoint (for demo purpose only)Two managed node groups Core Node group with 3 AZs for running system critical pods. e.g., Cluster Autoscaler, CoreDNS, Logging etc.Spark Node group with single AZ for running Spark jobs Enable EMR on EKS and create one Data teams (emr-data-team-a) Creates new namespace for each teamCreates Kubernetes role and role binding(emr-containers user) for the above namespaceNew IAM role for the team execution roleUpdate AWS_AUTH config map with emr-containers user and AWSServiceRoleForAmazonEMRContainers roleCreate a trust relationship between the job execution role and the identity of the EMR managed service account EMR Virtual Cluster for emr-data-team-aIAM policy for emr-data-team-aDeploys the following Kubernetes Add-ons Managed Add-ons VPC CNI, CoreDNS, KubeProxy, AWS EBS CSi Driver Self Managed Add-ons Metrics server with HA, Cluster Autoscaler, CertManager and AwsLoadBalancerController  This blueprint can also take an EKS cluster that you defined using the cdk-blueprints-library.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"EMR on EKS with CDK blueprint","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-cdk#prerequisites","content":" Ensure that you have installed the following tools on your machine.  aws clikubectlCDK  NOTE: You need to have an AWS account and region that are bootstrapped by AWS CDK.  ","version":"Next","tagName":"h3"},{"title":"Customize​","type":1,"pageTitle":"EMR on EKS with CDK blueprint","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-cdk#customize","content":" The the entry point for this cdk blueprint is /bin/emr-eks.ts which instantiate a stack defined in lib/emr-eks-blueprint-stack.ts. This stack must be provided with a VPC and a list of EMR on EKS team definition and the role that will be admin of the EKS cluster. It can also take as options an EKS cluster defined through cdk-blueprints-library and the EKS cluster name.  The properties that are passed to the emr on eks blueprint stack are defined as such:  export interface EmrEksBlueprintProps extends StackProps { clusterVpc: IVpc, clusterAdminRoleArn: ArnPrincipal dataTeams: EmrEksTeamProps[], eksClusterName?: string, //Default eksBlueprintCluster eksCluster?: GenericClusterProvider, }   In this example we define a VPC in lib/vpc.ts and is instantiated in bin/emr-eks.ts. We also define a team called emr-data-team-a and which has an execution role called myBlueprintExecRole. The blueprint will deploy by default an EKS cluster with the managed nodegroups defined in the section Deploying the Solution.  ","version":"Next","tagName":"h3"},{"title":"Deploy​","type":1,"pageTitle":"EMR on EKS with CDK blueprint","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-cdk#deploy","content":" Before you run the solution, you MUST change the clusterAdminRoleArn of the props object in lib/emr-eks.ts. This role allows you to interact manage EKS cluster and should have be allowed at least the IAM action eks:AccessKubernetesApi.  Clone the repository  git clone https://github.com/awslabs/data-on-eks.git   Navigate into one of the example directories and run cdk synth  cd analytics/cdk/emr-eks npm install cdk synth --profile YOUR-AWS-PROFILE   Deploy the pattern  cdk deploy --all   Enter yes to deploy.  ","version":"Next","tagName":"h3"},{"title":"Verify the resources​","type":1,"pageTitle":"EMR on EKS with CDK blueprint","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-cdk#verify-the-resources","content":" Let’s verify the resources created by cdk deploy.  Verify the Amazon EKS Cluster  aws eks describe-cluster --name eksBlueprintCluster # Update the name cluster name if you supplied your own   Verify EMR on EKS Namespaces batchjob and Pod status for Metrics Server and Cluster Autoscaler.  aws eks --region &lt;ENTER_YOUR_REGION&gt; update-kubeconfig --name eksBlueprintCluster # Creates k8s config file to authenticate with EKS Cluster. Update the name cluster name if you supplied your own kubectl get nodes # Output shows the EKS Managed Node group nodes kubectl get ns | grep batchjob # Output shows batchjob kubectl get pods --namespace=kube-system | grep metrics-server # Output shows Metric Server pod kubectl get pods --namespace=kube-system | grep cluster-autoscaler # Output shows Cluster Autoscaler pod   ","version":"Next","tagName":"h2"},{"title":"Execute Sample Spark job on EMR Virtual Cluster​","type":1,"pageTitle":"EMR on EKS with CDK blueprint","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-cdk#execute-sample-spark-job-on-emr-virtual-cluster","content":" Execute the Spark job using the below shell script.  Once you deploy the blueprint you will have as output the Virtual Cluster id. You can use the id and the execution role for which you supplied a policy to submit jobs. Below you can find an example of a job you can submit with AWS CLI.   export EMR_ROLE_ARN=arn:aws:iam::&lt;YOUR-ACCOUNT-ID&gt;:role/myBlueprintExecRole aws emr-containers start-job-run \\ --virtual-cluster-id=&lt;VIRTUAL-CLUSTER-ID-IN-CDK-OUTPUT&gt; \\ --name=pi-2 \\ --execution-role-arn=$EMR_ROLE_ARN \\ --release-label=emr-6.8.0-latest \\ --job-driver='{ &quot;sparkSubmitJobDriver&quot;: { &quot;entryPoint&quot;: &quot;local:///usr/lib/spark/examples/src/main/python/pi.py&quot;, &quot;sparkSubmitParameters&quot;: &quot;--conf spark.executor.instances=1 --conf spark.executor.memory=2G --conf spark.executor.cores=1 --conf spark.driver.cores=1 --conf spark.kubernetes.node.selector.app=spark&quot; } }'   Verify the job execution  kubectl get pods --namespace=batchjob -w   ","version":"Next","tagName":"h2"},{"title":"Cleanup​","type":1,"pageTitle":"EMR on EKS with CDK blueprint","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-cdk#cleanup","content":" To clean up your environment, you call the command below. This will destroy the Kubernetes Add-ons, EKS cluster with Node groups and VPC  cdk destroy --all   caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment ","version":"Next","tagName":"h2"},{"title":"EMR on EKS Observability","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-observability","content":"","keywords":"","version":"Next"},{"title":"Monitoring Amazon EMR on EKS with Amazon Managed Prometheus and Amazon Managed Grafana​","type":1,"pageTitle":"EMR on EKS Observability","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-observability#monitoring-amazon-emr-on-eks-with-amazon-managed-prometheus-and-amazon-managed-grafana","content":" In this post, we will learn to build end-to-end observability for EMR on EKS Spark workloads by leveraging Amazon Managed Service for Prometheus to collect and store the metrics generated by Spark Applications. We will then use Amazon Managed Grafana to build dashboards for monitoring use cases  Checkout the full blog here  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"EMR on EKS Observability","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-observability#architecture","content":" The following diagram illustrates the solution architecture for scraping Spark Driver and Executors’ metrics, as well as writing to Amazon Managed Service for Prometheus.    ","version":"Next","tagName":"h3"},{"title":"Grafana Dashboard for Spark​","type":1,"pageTitle":"EMR on EKS Observability","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-observability#grafana-dashboard-for-spark","content":" The following Grafana dashboard displays the EMR on EKS Spark job metrics with Driver and Executor details.   ","version":"Next","tagName":"h3"},{"title":"Distributed PyTorch Training on Trainium with TorchX and EKS​","type":1,"pageTitle":"AWS Trainium on EKS","url":"/data-on-eks/docs/blueprints/ai-ml/trainium#distributed-pytorch-training-on-trainium-with-torchx-and-eks","content":" In this example, we will perform DataParallel-based phase1 pretraining on the BERT-large model using the WikiCorpus dataset. To execute the task, we will use TorchX to initiate the job on two trn1.32xlarge instances, with 32 workers per instance. You can also run the same job on trn1n.32xlarge node group.  We have created three Shell scripts to automate the job execution as much as possible.  Step1: Create a Docker image for PyTorch Neuron container for BERT-large model pre-training​  This step creates a new Docker image and push this image to ECR repo. The Dockerfile handles the installation of necessary software packages, such as AWS Neuron repos, Python dependencies, and other essential tools for PyTorch and BERT pre-training. It configures various environment variables to ensure smooth execution and optimal performance. The image contains crucial components like a BERT pretraining script and requirements.txt file sourced from GitHub, both vital for the BERT pretraining process. Furthermore, it includes a basic environment test script for validation purposes. Together, this Docker image provides a comprehensive environment for efficient BERT pre-training with PyTorch while incorporating AWS Neuron optimizations.  caution This step generates an AMD64 (x86-64) Docker image with a size of 7GB or more. Therefore, it is strongly advised to utilize an AWS Cloud9/EC2 AMD64 (x86-64) instance with Docker client installed, ensuring sufficient storage capacity for this process.  caution If you are executing this script on a Cloud9 IDE/EC2 instance different from the one where the EKS Cluster is deployed, it is essential to ensure that the same IAM role is used or attached to the Cloud9 IDE/EC2 instance. Should you prefer a distinct IAM role for Cloud9 IDE/EC2, it must be added to the EKS Cluster's aws-auth config map to grant the role authorization for authenticating with the EKS Cluster. Taking these precautions will enable smooth communication between the instances and the EKS Cluster, ensuring the script functions as intended.  cd ai-ml/trainium-inferentia/examples/dp-bert-large-pretrain chmod +x 1-bert-pretrain-build-image.sh ./1-bert-pretrain-build-image.sh   Admin:~/environment/data-on-eks/ai-ml/trainium-inferentia/examples/dp-bert-large-pretrain (trainium-part2) $ ./1-bert-pretrain-build-image.sh Did you install docker on AMD64(x86-64) machine (y/n): y Enter the ECR region: us-west-2 ECR repository 'eks_torchx_test' already exists. Repository URL: &lt;YOUR_ACCOUNT_ID&gt;.dkr.ecr.us-west-2.amazonaws.com/eks_torchx_test Building and Tagging Docker image... &lt;YOUR_ACCOUNT_ID&gt;.dkr.ecr.us-west-2.amazonaws.com/eks_torchx_test:bert_pretrain [+] Building 2.4s (26/26) FINISHED =&gt; [internal] load build definition from Dockerfile.bert_pretrain 0.0s =&gt; =&gt; transferring dockerfile: 5.15kB 0.0s =&gt; [internal] load .dockerignore 0.0s =&gt; =&gt; transferring context: 2B 0.0s =&gt; [internal] load metadata for docker.io/library/ubuntu:20.04 0.7s =&gt; [ 1/22] FROM docker.io/library/ubuntu:20.04@sha256:c9820a44b950956a790c354700c1166a7ec648bc0d215fa438d3a339812f1d01 0.0s ... bert_pretrain: digest: sha256:1bacd5233d1a87ca1d88273c5a7cb131073c6f390f03198a91dc563158485941 size: 4729   Login to AWS Console and verify the ECR repo(&lt;YOUR_ACCOUNT_ID&gt;.dkr.ecr.&lt;REGION&gt;.amazonaws.com/eks_torchx_test) and the image tag(bert_pretrain) in ECR.  Step2: Copy WikiCorpus pre-training dataset for BERT model to FSx for Lustre filesystem​  In this step, we make it easy to transfer the WikiCorpus pre-training dataset, which is crucial for training the BERT model in distributed mode by multiple Trainium instances, to the FSx for Lustre filesystem. To achieve this, we will login to cmd-shell pod which includes an AWS CLI container, providing access to the filesystem.  Once you're inside the container, Copy the WikiCorpus dataset from S3 bucket (s3://neuron-s3/training_datasets/bert_pretrain_wikicorpus_tokenized_hdf5/bert_pretrain_wikicorpus_tokenized_hdf5_seqlen128.tar). The dataset is then unpacked, giving you access to its contents, ready for use in the subsequent BERT model pre-training process.  kubectl exec -i -t -n default cmd-shell -c app -- sh -c &quot;clear; (bash || ash || sh)&quot; # Once logged into the container yum install tar cd /data aws s3 cp s3://neuron-s3/training_datasets/bert_pretrain_wikicorpus_tokenized_hdf5/bert_pretrain_wikicorpus_tokenized_hdf5_seqlen128.tar . --no-sign-request chmod 744 bert_pretrain_wikicorpus_tokenized_hdf5_seqlen128.tar tar xvf bert_pretrain_wikicorpus_tokenized_hdf5_seqlen128.tar   Step3: Precompile the BERT graphs using neuron_parallel_compile​  PyTorch Neuron introduces a valuable tool known as neuron_parallel_compile, which significantly reduces graph compilation time by extracting model graphs and compiling them in parallel. This optimization technique expedites the process and results in faster model compilation. The compiled graphs are then stored on the Fsx for Lustre shared storage volume, accessible by worker nodes during model training. This efficient approach streamlines the training process and improves overall performance, making the most of PyTorch Neuron's capabilities.  Execute the following commands.This script prompts the user to configure their kubeconfig and verifies the presence of the lib folder with trn1_dist_ddp.py. It sets up Docker credentials, installs the TorchX client for Kubernetes. Using TorchX, the script runs a Kubernetes job to compile BERT graphs with optimized performance. Additionally, TorchX creates another Docker image and pushes it to the ECR repository within the same repo. This image is utilized in the subsequent pre-compiling pods, optimizing the overall BERT model training process.  cd ai-ml/trainium-inferentia/examples/dp-bert-large-pretrain chmod +x 2-bert-pretrain-precompile.sh ./2-bert-pretrain-precompile.sh   You can verify the pods status by running kubectl get pods or kubectl get vcjob. Successful output looks like below.    You can also verify the logs for the Pod once they are Succeeded. The precompilation job will run for ~15 minutes. Once complete, you will see the following in the output:  2023-07-29 09:42:42.000310: INFO ||PARALLEL_COMPILE||: Starting parallel compilations of the extracted graphs2023-07-29 09:42:42.000312: INFO ||PARALLEL_COMPILE||: Compiling /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.406_16969875447143373016.hlo.pb using following command: neuronx-cc compile —target=trn1 —framework XLA /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.406_16969875447143373016.hlo.pb —model-type=transformer —verbose=35 —output /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.406_16969875447143373016.neff 2023-07-29 09:42:42.000313: INFO ||PARALLEL_COMPILE||: Compiling /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.22250_9219523464496887986.hlo.pb using following command: neuronx-cc compile —target=trn1 —framework XLA /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.22250_9219523464496887986.hlo.pb —model-type=transformer —verbose=35 —output /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.22250_9219523464496887986.neff 2023-07-29 09:42:42.000314: INFO ||PARALLEL_COMPILE||: Compiling /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.25434_3000743782456078279.hlo.pb using following command: neuronx-cc compile —target=trn1 —framework XLA /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.25434_3000743782456078279.hlo.pb —model-type=transformer —verbose=35 —output /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.25434_3000743782456078279.neff 2023-07-29 09:42:42.000315: INFO ||PARALLEL_COMPILE||: Compiling /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.25637_13822314547392343350.hlo.pb using following command: neuronx-cc compile —target=trn1 —framework XLA /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.25637_13822314547392343350.hlo.pb —model-type=transformer —verbose=35 —output /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.25637_13822314547392343350.neff 2023-07-29 09:42:42.000316: INFO ||PARALLEL_COMPILE||: Compiling /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.21907_15179678551789598088.hlo.pb using following command: neuronx-cc compile —target=trn1 —framework XLA /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.21907_15179678551789598088.hlo.pb —model-type=transformer —verbose=35 —output /tmp/parallel_compile_workdir/MODULE_SyncTensorsGraph.21907_15179678551789598088.neff ..... Compiler status PASS   New pre-training cache files are stored under FSx for Lustre.    Step4: Launch BERT pretraining job using 64 Neuron cores with two trn1.32xlarge instances​  We are now in the final step of training the BERT-large model with WikiCorpus data.  cd ai-ml/trainium-inferentia/examples/dp-bert-large-pretrain chmod +x 3-bert-pretrain.sh ./3-bert-pretrain.sh   Monitor the job with the following commands. This job may take several hours as its training 30GB+ worth of the data.  kubectl get vcjob kubectl get pods # Two pods will be running in default namespace   To monitor Neuron usage, you can log in to one of the Trainium EC2 instances using SSM (Systems Manager) from the EC2 console. Once logged in, run the command neuron-ls, and you will receive an output similar to the following.  [root@ip-100-64-229-201 aws-efa-installer]# neuron-ls instance-type: trn1.32xlarge instance-id: i-04b476a6a0e686980 +--------+--------+--------+---------------+---------+--------+------------------------------------------+---------+ | NEURON | NEURON | NEURON | CONNECTED | PCI | PID | COMMAND | RUNTIME | | DEVICE | CORES | MEMORY | DEVICES | BDF | | | VERSION | +--------+--------+--------+---------------+---------+--------+------------------------------------------+---------+ | 0 | 2 | 32 GB | 12, 3, 4, 1 | 10:1c.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 1 | 2 | 32 GB | 13, 0, 5, 2 | 10:1d.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 2 | 2 | 32 GB | 14, 1, 6, 3 | a0:1c.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 3 | 2 | 32 GB | 15, 2, 7, 0 | a0:1d.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 4 | 2 | 32 GB | 0, 7, 8, 5 | 20:1b.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 5 | 2 | 32 GB | 1, 4, 9, 6 | 20:1c.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 6 | 2 | 32 GB | 2, 5, 10, 7 | 90:1b.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 7 | 2 | 32 GB | 3, 6, 11, 4 | 90:1c.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 8 | 2 | 32 GB | 4, 11, 12, 9 | 20:1d.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 9 | 2 | 32 GB | 5, 8, 13, 10 | 20:1e.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 10 | 2 | 32 GB | 6, 9, 14, 11 | 90:1d.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 11 | 2 | 32 GB | 7, 10, 15, 8 | 90:1e.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 12 | 2 | 32 GB | 8, 15, 0, 13 | 10:1e.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 13 | 2 | 32 GB | 9, 12, 1, 14 | 10:1b.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 14 | 2 | 32 GB | 10, 13, 2, 15 | a0:1e.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | | 15 | 2 | 32 GB | 11, 14, 3, 12 | a0:1b.0 | 109459 | python3 -m torch_neuronx.distributed.... | 2.15.11 | +--------+--------+--------+---------------+---------+--------+------------------------------------------+---------+   You can also run neuron-top which provides the live usage of neuron cores. The below shows the usage of all 32 neuron cores.    If you wish to terminate the job, you can execute the following commands:  kubectl get vcjob # Get a job name kubectl delete &lt;ENTER_JOB_NAME&gt;   Cleanup 👈  caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment ","version":"Next","tagName":"h3"},{"title":"EMR on EKS with Karpenter","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-karpenter","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"EMR on EKS with Karpenter","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-karpenter#introduction","content":" In this pattern, you will deploy an EMR on EKS cluster and use Karpenter Nodepools for scaling Spark jobs.  Architecture  This pattern uses opinionated defaults to keep the deployment experience simple but also keeps it flexible so that you can pick and choose necessary add-ons during deployment. We recommend keeping the defaults if you are new to EMR on EKS and only customize if you have viable alternative option available for replacement.  In terms of infrastructure, here are the resources that are created by this pattern  Creates an EKS Cluster Control plane with public endpoint (recommended for demo/poc environment)One managed node group Core Node group with 3 instances spanning multi-AZs for running system critical pods. e.g., Cluster Autoscaler, CoreDNS, Observability, Logging etc. Enables EMR on EKS Creates two namespaces (emr-data-team-a, emr-data-team-b) for data teamsCreates Kubernetes role and role binding(emr-containers user) for both namespacesIAM roles for both teams needed for job executionUpdate AWS_AUTH config map with emr-containers user and AWSServiceRoleForAmazonEMRContainers roleCreate a trust relationship between the job execution role and the identity of the EMR managed service accountCreate EMR Virtual Cluster for emr-data-team-a &amp; emr-data-team-b and IAM policies for both  You can see the list of add-ons available below.  tip We recommend running all the default system add-ons on a dedicated EKS managed nodegroup such as core-node-group as provided by this pattern.  danger We don't recommend removing critical add-ons (Amazon VPC CNI, CoreDNS, Kube-proxy).  Add-on\tEnabled by default?\tBenefits\tLinkAmazon VPC CNI\tYes\tVPC CNI is available as an EKS add-on and is responsible for creating ENI's and IPv4 or IPv6 addresses for your spark application pods\tVPC CNI Documentation CoreDNS\tYes\tCoreDNS is available as an EKS add-on and is responsible for resolving DNS queries for spark application and for Kubernetes cluster\tEKS CoreDNS Documentation Kube-proxy\tYes\tKube-proxy is available as an EKS add-on and it maintains network rules on your nodes and enables network communication to your spark application pods\tEKS kube-proxy Documentation Amazon EBS CSI driver\tYes\tEBS CSI driver is available as an EKS add-on and it allows EKS clusters to manage the lifecycle of EBS volumes\tEBS CSI Driver Documentation Karpenter\tYes\tKarpenter is nodegroup-less autoscaler that provides just-in-time compute capacity for spark applications on Kubernetes clusters\tKarpenter Documentation Cluster Autoscaler\tYes\tKubernetes Cluster Autoscaler automatically adjusts the size of Kubernetes cluster and is available for scaling nodegroups (such as core-node-group) in the cluster\tCluster Autoscaler Documentation Cluster proportional autoscaler\tYes\tThis is responsible for scaling CoreDNS pods in your Kubernetes cluster\tCluster Proportional Autoscaler Documentation Metrics server\tYes\tKubernetes metrics server is responsible for aggregating cpu, memory and other container resource usage within your cluster\tEKS Metrics Server Documentation Prometheus\tYes\tPrometheus is responsible for monitoring EKS cluster including spark applications in your EKS cluster. We use Prometheus deployment for scraping and ingesting metrics into Amazon Managed Prometheus and Kubecost\tPrometheus Documentation Amazon Managed Prometheus\tYes\tThis is responsible for storing and scaling of EKS cluster and spark application metrics\tAmazon Managed Prometheus Documentation Kubecost\tYes\tKubecost is responsible for providing cost break down by Spark application. You can monitor costs based on per job, namespace or labels\tEKS Kubecost Documentation CloudWatch metrics\tNo\tCloudWatch container insights metrics shows simple and standardized way to monitor not only AWS resources but also EKS resources on CloudWatch dashboard\tCloudWatch Container Insights Documentation AWS for Fluent-bit\tNo\tThis can be used to publish EKS cluster and worker node logs to CloudWatch Logs or 3rd party logging system\tAWS For Fluent-bit Documentation FSx for Lustre CSI driver\tNo\tThis can be used for running Spark application using FSx for Lustre\tFSx for Lustre CSI Driver Documentation  Customizing Add-ons 👈  Deploying the Solution 👈  ","version":"Next","tagName":"h2"},{"title":"Run Sample Spark job​","type":1,"pageTitle":"EMR on EKS with Karpenter","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-karpenter#run-sample-spark-job","content":" The pattern shows how to run spark jobs in a multi-tenant EKS cluster. The examples showcases two data teams using namespaces emr-data-team-a and emr-data-team-b mapped to their EMR virtual clusters. You can use different Karpenter Nodepools for each team so that they can submit jobs that are unique to their workload. Teams can also use different storage requirements to run their Spark jobs. For example, you can use compute optimized Nodepool that has taints and specify tolerations using pod templates so that you can run spark on compute optimized EC2 instances. In terms of storage, you can decide whether to use EC2 instance-store or EBS or FSx for lustre volumes for data processing. The default storage that is used in these examples is EC2 instance store because of performance benefit  spark-compute-optimized Nodepool to run spark jobs on c5d instances.spark-memory-optimized Nodepool to run spark jobs on r5d instances.spark-graviton-memory-optimized Nodepool to run spark jobs on r6gd Graviton instances(ARM64).  spark-compute-optimizedspark-memory-optimizedspark-graviton-memory-optimized In this tutorial, you will use Karpenter Nodepool that uses compute optimized instances. This template leverages the Karpenter AWSNodeTemplates. To view Karpenter Nodepool for compute optimized instances, Click to toggle content! Verify the Karpenter NodeClass and Nodepool code here To run Spark Jobs that can use this Nodepool, you need to submit your jobs by adding tolerations to your pod templates For example, spec: tolerations: - key: &quot;spark-compute-optimized&quot; operator: &quot;Exists&quot; effect: &quot;NoSchedule&quot; Execute the sample PySpark Job to trigger compute optimized Karpenter Nodepool The following script requires four input parameters virtual_cluster_id, job_execution_role_arn, cloudwatch_log_group_name &amp; S3_Bucket to store PySpark scripts, Pod templates and Input data. You can get these values terraform apply output values or by running terraform output. For S3_BUCKET, Either create a new S3 bucket or use an existing S3 bucket. caution This shell script downloads the test data to your local machine and uploads to S3 bucket. Verify the shell script before running the job. cd data-on-eks/analytics/terraform/emr-eks-karpenter/examples/nvme-ssd/karpenter-compute-provisioner/ ./execute_emr_eks_job.sh Enter the EMR Virtual Cluster ID: 4ucrncg6z4nd19vh1lidna2b3 Enter the EMR Execution Role ARN: arn:aws:iam::123456789102:role/emr-eks-karpenter-emr-eks-data-team-a Enter the CloudWatch Log Group name: /emr-on-eks-logs/emr-eks-karpenter/emr-data-team-a Enter the S3 Bucket for storing PySpark Scripts, Pod Templates and Input data. For e.g., s3://&lt;bucket-name&gt;: s3://example-bucket Karpenter may take between 1 and 2 minutes to spin up a new compute node as specified in the Nodepool templates before running the Spark Jobs. Nodes will be drained with once the job is completed Verify the job execution kubectl get pods --namespace=emr-data-team-a -w   ","version":"Next","tagName":"h2"},{"title":"Execute the sample PySpark job that uses EBS volumes and compute optimized Karpenter Nodepool​","type":1,"pageTitle":"EMR on EKS with Karpenter","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-karpenter#execute-the-sample-pyspark-job-that-uses-ebs-volumes-and-compute-optimized-karpenter-nodepool","content":" This pattern uses EBS volumes for data processing and compute optimized Nodepool. You can modify the Nodepool by changing nodeselector in driver and executor pod templates. In order to change Nodepools, simply update your pod templates to desired Nodepool   nodeSelector: NodeGroupType: &quot;SparkComputeOptimized&quot;   You can also update EC2 instances that doesn't include instance store volumes (for example c5.xlarge) and remove c5d's if needed for this exercise  We will create Storageclass that will be used by drivers and executors. We'll create static Persistent Volume Claim (PVC) for the driver pod but we'll use dynamically created ebs volumes for executors.  Create StorageClass and PVC using example provided  cd data-on-eks/analytics/terraform/emr-eks-karpenter/examples/ebs-pvc/karpenter-compute-provisioner-ebs/ kubectl apply -f ebs-storageclass-pvc.yaml   Let's run the job  cd data-on-eks/analytics/terraform/emr-eks-karpenter/examples/ebs-pvc/karpenter-compute-provisioner-ebs/ ./execute_emr_eks_job.sh Enter the EMR Virtual Cluster ID: 4ucrncg6z4nd19vh1lidna2b3 Enter the EMR Execution Role ARN: arn:aws:iam::123456789102:role/emr-eks-karpenter-emr-eks-data-team-a Enter the CloudWatch Log Group name: /emr-on-eks-logs/emr-eks-karpenter/emr-data-team-a Enter the S3 Bucket for storing PySpark Scripts, Pod Templates and Input data. For e.g., s3://&lt;bucket-name&gt;: s3://example-bucket   You'll notice the PVC spark-driver-pvc will be used by driver pod but Spark will create multiple ebs volumes for executors mapped to Storageclass emr-eks-karpenter-ebs-sc. All dynamically created ebs volumes will be deleted once the job completes  ","version":"Next","tagName":"h3"},{"title":"Running Sample Spark job using FSx for Lustre​","type":1,"pageTitle":"EMR on EKS with Karpenter","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-karpenter#running-sample-spark-job-using-fsx-for-lustre","content":" Amazon FSx for Lustre is a fully managed shared storage option built on the world’s most popular high-performance file system. You can use FSx to store shuffle files and also to store intermediate data processing tasks in a data pipeline. You can read more about FSX for Lustre in documentation and learn how to use this storage with EMR on EKS in our best practices guide  In this example, you will learn how to deploy, configure and use FSx for Lustre as a shuffle storage. There are two ways to use FSx for Lustre  using static FSx for Lustre volumesusing dynamically created FSx for Lustre volumes  fsx-staticfsx-dynamic Execute Spark Job by using FSx for Lustre with statically provisioned volume and compute optimized Karpenter Nodepool. Fsx for Lustre Terraform module is disabled by default. Follow the customizing add-ons steps before running Spark jobs. Execute the Spark job using the below shell script. This script requires input parameters which can be extracted from terraform apply output values. caution This shell script downloads the test data to your local machine and uploads to S3 bucket. Verify the shell script before running the job. cd analytics/terraform/emr-eks-karpenter/examples/fsx-for-lustre/fsx-static-pvc-shuffle-storage ./fsx-static-spark.sh Karpetner may take between 1 and 2 minutes to spin up a new compute node as specified in the Nodepool templates before running the Spark Jobs. Nodes will be drained with once the job is completed Verify the job execution events kubectl get pods --namespace=emr-data-team-a -w This will show the mounted /data directory with FSx DNS name kubectl exec -ti taxidata-exec-1 -c spark-kubernetes-executor -n emr-data-team-a -- df -h kubectl exec -ti taxidata-exec-1 -c spark-kubernetes-executor -n emr-data-team-a -- ls -lah /static   ","version":"Next","tagName":"h3"},{"title":"Running Sample Spark job using Apache YuniKorn Batch Scheduler​","type":1,"pageTitle":"EMR on EKS with Karpenter","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-karpenter#running-sample-spark-job-using-apache-yunikorn-batch-scheduler","content":" Apache YuniKorn is an open-source, universal resource scheduler for managing distributed big data processing workloads such as Spark, Flink, and Storm. It is designed to efficiently manage resources across multiple tenants in a shared, multi-tenant cluster environment. Some of the key features of Apache YuniKorn include:  Flexibility: YuniKorn provides a flexible and scalable architecture that can handle a wide variety of workloads, from long-running services to batch jobs.Dynamic Resource Allocation: YuniKorn uses a dynamic resource allocation mechanism to allocate resources to workloads on an as-needed basis, which helps to minimize resource wastage and improve overall cluster utilization.Priority-based Scheduling: YuniKorn supports priority-based scheduling, which allows users to assign different levels of priority to their workloads based on business requirements.Multi-tenancy: YuniKorn supports multi-tenancy, which enables multiple users to share the same cluster while ensuring resource isolation and fairness.Pluggable Architecture: YuniKorn has a pluggable architecture that allows users to extend its functionality with custom scheduling policies and pluggable components.  Apache YuniKorn is a powerful and versatile resource scheduler that can help organizations efficiently manage their big data workloads while ensuring high resource utilization and workload performance.  Apache YuniKorn Architecture  Apache YuniKorn Gang Scheduling with Karpenter  Apache YuniKorn Scheduler add-on is disabled by default. Follow the steps to deploy the Apache YuniKorn add-on and execute the Spark job.  Update the analytics/terraform/emr-eks-karpenter/variables.tf file with the following  variable &quot;enable_yunikorn&quot; { default = true description = &quot;Enable Apache YuniKorn Scheduler&quot; type = bool }   Execute terrafrom apply again. This will deploy FSx for Lustre add-on and all the necessary resources.  terraform apply -auto-approve   This example demonstrates the Apache YuniKorn Gang Scheduling with Karpenter Autoscaler.  cd analytics/terraform/emr-eks-karpenter/examples/nvme-ssd/karpenter-yunikorn-gangscheduling ./execute_emr_eks_job.sh   Verify the job executionApache YuniKorn Gang Scheduling will create pause pods for total number of executors requested.  kubectl get pods --namespace=emr-data-team-a -w   Verify the driver and executor pods prefix with tg- indicates the pause pods. These pods will be replaced with the actual Spark Driver and Executor pods once the Nodes are scaled and ready by the Karpenter.    Delta Lake Table Format 👈  ","version":"Next","tagName":"h3"},{"title":"Run Interactive Workload with Managed Endpoint​","type":1,"pageTitle":"EMR on EKS with Karpenter","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-karpenter#run-interactive-workload-with-managed-endpoint","content":" Managed endpoint is a gateway that provides connectivity from EMR Studio to EMR on EKS so that you can run interactive workloads. You can find out more information about it here.  ","version":"Next","tagName":"h2"},{"title":"Creating a managed endpoint​","type":1,"pageTitle":"EMR on EKS with Karpenter","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-karpenter#creating-a-managed-endpoint","content":" In this example, we will create a managed endpoint under one of the data teams.  Navigate to folder and execute script: cd analytics/terraform/emr-eks-karpenter/examples/managed-endpoints ./create-managed-endpoint.sh   Enter the EMR Virtual Cluster Id: 4ucrncg6z4nd19vh1lidna2b3 Provide your EMR on EKS team (emr-data-team-a or emr-data-team-b): emr-eks-data-team-a Enter your AWS Region: us-west-2 Enter a name for your endpoint: emr-eks-team-a-endpoint Provide an S3 bucket location for logging (i.e. s3://my-bucket/logging/): s3://&lt;bucket-name&gt;/logs Enter the EMR Execution Role ARN (i.e. arn:aws:00000000000000000:role/EMR-Execution-Role): arn:aws:iam::181460066119:role/emr-eks-karpenter-emr-data-team-a   The script will provide the following:  JSON configuration file for the Managed EndpointConfiguration settings: Default 8G Spark DriverCloudWatch monitoring, with logs stored in the S3 bucket provided Proper endpoint creation with appropriate security group to allow using KarpenterOutputs: Managed Endpoint ID and Load Balancer ARN.  Once you have created a managed endpoint, you can follow the instructions here to configure EMR Studio and associate the Managed endpoint to a workspace.  ","version":"Next","tagName":"h3"},{"title":"Cleanup of Endpoint resources​","type":1,"pageTitle":"EMR on EKS with Karpenter","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-karpenter#cleanup-of-endpoint-resources","content":" To delete the managed endpoint, simply run the following command:  aws emr-containers delete-managed-endpoint --id &lt;Managed Endpoint ID&gt; --virtual-cluster-id &lt;Virtual Cluster ID&gt;   ","version":"Next","tagName":"h3"},{"title":"Cleanup​","type":1,"pageTitle":"EMR on EKS with Karpenter","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-karpenter#cleanup","content":" Cleanup 👈  caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment ","version":"Next","tagName":"h2"},{"title":"EMR Runtime with Spark Operator","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-spark-operator","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"EMR Runtime with Spark Operator","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-spark-operator#introduction","content":" In this post, we will learn to deploy EKS with EMR Spark Operator and execute sample Spark job with EMR runtime.  In this example, you will provision the following resources required to run Spark Applications using the Spark Operator and EMR runtime.  Creates EKS Cluster Control plane with public endpoint (for demo purpose only)Two managed node groups Core Node group with 3 AZs for running system critical pods. e.g., Cluster Autoscaler, CoreDNS, Observability, Logging etc.Spark Node group with single AZ for running Spark jobs Creates one Data team (emr-data-team-a) Creates new namespace for the teamNew IAM role for the team execution role IAM policy for emr-data-team-aSpark History Server Live UI is configured for monitoring running Spark jobs through an NLB and NGINX ingress controllerDeploys the following Kubernetes Add-ons Managed Add-ons VPC CNI, CoreDNS, KubeProxy, AWS EBS CSi Driver Self Managed Add-ons Metrics server with HA, CoreDNS Cluster proportional Autoscaler, Cluster Autoscaler, Prometheus Server and Node Exporter, AWS for FluentBit, CloudWatchMetrics for EKS  EMR Spark Operator 👈  Deploying the Solution 👈  Execute Sample Spark job with Karpenter 👈  Cleanup 👈  caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment ","version":"Next","tagName":"h2"},{"title":"Data Analytics on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/data-analytics","content":"Data Analytics on EKS Running data analytics tools on Kubernetes can provide a number of benefits for organizations looking to extract insights from large and complex data sets. Tools such as Apache Spark and DASK are designed to run on a cluster of machines, making them well-suited for deployment on Kubernetes. The Spark Operator for Kubernetes is a popular Kubernetes operator that simplifies the deployment and management of Apache Spark on Kubernetes. By using the Spark Operator, organizations can take advantage of features such as automatic scaling, rolling updates, and self-healing capabilities to ensure high availability and reliability of their data analytics pipelines. This can greatly simplify and automate the deployment, scaling, and management of these complex applications, freeing up data scientists and engineers to focus on the analysis and interpretation of the data. With its growing ecosystem of tools and support for a wide range of use cases, Kubernetes is becoming an increasingly popular choice for running data analytics platforms in production. Spark OperatorSpark SubmitKarpenterApache YuniKornVolcano","keywords":"","version":"Next"},{"title":"EMR on EKS Data Platform with AWS CDK","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-studio","content":"","keywords":"","version":"Next"},{"title":"Analytics Reference Architecture​","type":1,"pageTitle":"EMR on EKS Data Platform with AWS CDK","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-studio#analytics-reference-architecture","content":" AWS Analytics Reference Architecture (ARA) exposes set of reusable core components in an AWS CDK library, currently available in Typescript and Python. This library contains AWS CDK constructs (L3) that can be used to quickly provision analytics solutions in demos, prototypes, proofs of concept, and end-to-end reference architectures. The API of ARA Library is defined here.  In our case the library help you deploy an infrastructure optimised for Apache Spark running on EKS leveraging EMR on EKS. The infrastructure will out of the box provide you with pod collocation to reduce network traffic, deploy nodegroup in a single AZ to reduce cross AZ traffic during shuffle, use dedicated instances for EMR on EKS, use optimized instances for memory intensive jobs, use spot and on-demand instances for non-critical job and for critical jobs.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"EMR on EKS Data Platform with AWS CDK","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-studio#prerequisites","content":" Ensure that you have installed the following tools on your machine.  aws clikubectlCDK  ","version":"Next","tagName":"h2"},{"title":"Solution​","type":1,"pageTitle":"EMR on EKS Data Platform with AWS CDK","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-studio#solution","content":" To deploy the data platform we will use an example in the Analytics Reference Architecture. The example is in the directory examples/emr-eks-app that you will find in the repository you will clone below.  Clone the repository  git clone https://github.com/aws-samples/aws-analytics-reference-architecture.git   This solution will deploy the following:  EKS cluster and a set of Nodegroups: Managed Nodegroup called tooling for running system critical pods. e.g., Cluster Autoscaler, CoreDNS, EBS CSI Driver.. Three Managed Nodegroup called critical for critical jobs, each in one AZ, this nodegroup use on-demand instances Three Managed Nodegroup called non-critical for non-critical jobs, each in one AZ, this nodegroup use spot instances Three Managed Nodegroup called notebook-driver for non-critical jobs, each in one AZ, this nodegroup use on-demand instances to have a stable driver. Three Managed Nodegroup called notebook-executor for non-critical jobs, each in one AZ, this nodegroup use spot instances instances for executors. Enable EKS Cluster to be with with EMR on EKS service EMR Virtual Cluster called batchjob, used to submitted jobs EMR Virtual Cluster called emrvcplatform, used to submitted jobs EMR Studio called platform A managed endpoint, called platform-myendpoint , to use with Jupyter notebooks you will create in the EMR Studio Execution role to use when submitting jobs with EMR on EKS start-job-run Execution role to use with managed endpoint. pod templates stored in an S3 bucket called &quot;EKS-CLUSTER-NAME-emr-eks-assets-ACCOUNT-ID-REGION&quot;  ","version":"Next","tagName":"h2"},{"title":"Customize​","type":1,"pageTitle":"EMR on EKS Data Platform with AWS CDK","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-studio#customize","content":" The infrastructure described above is defined in emr-eks-app/lib/emr-eks-app-stack.ts. If you want to customize it you can change the values in it. For example, you can chose not to create the default nodegroup to use for jobs, in this case you can set the defaultNodeGroups parameter to false in the EmrEksCluster. You can also call the addEmrEksNodegroup method to define your own nodegroups with specific labels, instances or taints. The addEmrEksNodegroup method is defined here.  You can also create your own execution role through the createExecutionRole method or create a managed endpoint to attach it to an EMR Studio you deployed outside of the ARA library.  In order to simplify this example we use IAM authentication with IAM user for EMR Studio. If you would like to use a user in the AWS IAM Identity Center you can change studioAuthMode in the NotebookPlatform construct. Below you will can see the code snippet that you need to change.  const notebookPlatform = new ara.NotebookPlatform(this, 'platform-notebook', { emrEks: emrEks, eksNamespace: 'dataanalysis', studioName: 'platform', studioAuthMode: ara.StudioAuthMode.IAM, });   ","version":"Next","tagName":"h3"},{"title":"Deploy​","type":1,"pageTitle":"EMR on EKS Data Platform with AWS CDK","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-studio#deploy","content":" Before you run the solution, you MUST change the eksAdminRoleArn of the props object of EmrEksCluster in lib/emr-eks-app-stack.ts. This role allows you to interact manage EKS cluster and should have be allowed at least the IAM action eks:AccessKubernetesApi. You need to also change the identityName in the addUser method of the NotebookPlatform construct. The identityName MUST BE a valid IAM username that you use. Below you will can see the code snippet that you need to change.  notebookPlatform.addUser([{ identityName:'', notebookManagedEndpoints: [{ emrOnEksVersion: 'emr-6.8.0-latest', executionPolicy: emrEksPolicy, managedEndpointName: 'myendpoint' }], }]);   Last you should also update the IAM policies passed to the createExecutionRole, if you want to process data that is in S3 buckets that you own.  Navigate into one of the example directories and run cdk synth --profile YOUR-AWS-PROFILE  cd examples/emr-eks-app npm install cdk synth --profile YOUR-AWS-PROFILE   Once the synth is completed you can deploy the infrastructrue with the following command:  cdk deploy   At the end of the deployment you will see output like follow:    In the output you will find job sample configurations with the best practices for Spark on Kubernetes like dynamicAllocation and pod collocation.  ","version":"Next","tagName":"h3"},{"title":"Job submission​","type":1,"pageTitle":"EMR on EKS Data Platform with AWS CDK","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-studio#job-submission","content":" In this example we will use the crittical-job job configuration to submit a job using that will compute pi using that is part of Spark distribution. To submit a job we will use Below you use start-job-run command with AWS CLI.  Before you run the command below, make sure to change update the following parameters with the on created by your own deployment.  &lt;CLUSTER-ID&gt; – The EMR virtual cluster ID, which you get from the AWS CDK output&lt;SPARK-JOB-NAME&gt; – The name of your Spark job&lt;ROLE-ARN&gt; – The execution role you created, which you get from the AWS CDK output&lt;S3URI-CRITICAL-DRIVER&gt; – The Amazon S3 URI of the driver pod template, which you get from the AWS CDK output&lt;S3URI-CRITICAL-EXECUTOR&gt; – The Amazon S3 URI of the executor pod template, which you get from the AWS CDK output&lt;Log_Group_Name&gt; – Your CloudWatch log group name&lt;Log_Stream_Prefix&gt; – Your CloudWatch log stream prefix  AWS CLI for start-job-run command aws emr-containers start-job-run \\ --virtual-cluster-id CLUSTER-ID\\ --name=SPARK-JOB-NAME\\ --execution-role-arn ROLE-ARN \\ --release-label emr-6.8.0-latest \\ --job-driver '{ &quot;sparkSubmitJobDriver&quot;:{ &quot;entryPoint&quot;: &quot;local:///usr/lib/spark/examples/src/main/python/pi.py&quot; } }' \\ --configuration-overrides '{ &quot;applicationConfiguration&quot;: [ { &quot;classification&quot;: &quot;spark-defaults&quot;, &quot;properties&quot;: { &quot;spark.hadoop.hive.metastore.client.factory.class&quot;: &quot;com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory&quot;, &quot;spark.sql.catalogImplementation&quot;: &quot;hive&quot;, &quot;spark.dynamicAllocation.enabled&quot;:&quot;true&quot;, &quot;spark.dynamicAllocation.minExecutors&quot;: &quot;8&quot;, &quot;spark.dynamicAllocation.maxExecutors&quot;: &quot;40&quot;, &quot;spark.kubernetes.allocation.batch.size&quot;: &quot;8&quot;, &quot;spark.executor.cores&quot;: &quot;8&quot;, &quot;spark.kubernetes.executor.request.cores&quot;: &quot;7&quot;, &quot;spark.executor.memory&quot;: &quot;28G&quot;, &quot;spark.driver.cores&quot;: &quot;2&quot;, &quot;spark.kubernetes.driver.request.cores&quot;: &quot;2&quot;, &quot;spark.driver.memory&quot;: &quot;6G&quot;, &quot;spark.dynamicAllocation.executorAllocationRatio&quot;: &quot;1&quot;, &quot;spark.dynamicAllocation.shuffleTracking.enabled&quot;: &quot;true&quot;, &quot;spark.dynamicAllocation.shuffleTracking.timeout&quot;: &quot;300s&quot;, &quot;spark.kubernetes.driver.podTemplateFile&quot;: &quot;s3://EKS-CLUSTER-NAME-emr-eks-assets-ACCOUNT-ID-REGION/EKS-CLUSTER-NAME/pod-template/critical-driver.yaml&quot;, &quot;spark.kubernetes.executor.podTemplateFile&quot;: &quot;s3://EKS-CLUSTER-NAME-emr-eks-assets-ACCOUNT-ID-REGION/EKS-CLUSTER-NAME/pod-template/critical-executor.yaml&quot; } } ], &quot;monitoringConfiguration&quot;: { &quot;cloudWatchMonitoringConfiguration&quot;: { &quot;logGroupName&quot;: &quot;Log_Group_Name&quot;, &quot;logStreamNamePrefix&quot;: &quot;Log_Stream_Prefix&quot; } } }'   Verify the job execution  kubectl get pods --namespace=batchjob -w   ","version":"Next","tagName":"h3"},{"title":"Interactive session​","type":1,"pageTitle":"EMR on EKS Data Platform with AWS CDK","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-studio#interactive-session","content":" To use an interactive session, you should log in to the EMR Studio instance with the URL provided to you at the end of cdk deploy. This link will be in the form of https://es-xxxxx/emrstudio-prod-REGION.amazonaws.com. Once you click on the link you will be see a log in page where you MUST sign-in with the username provided to the addUser method. When you sign in you should follow these steps.  Create workspace, this will start for a Jupyter notebookConnect to the Jupter notebookAttach to a Virtual cluster, this would be have the following name &quot;emrvcplatform&quot; and chose an endpoint called &quot;platform-myendpoint&quot;Open a notebook and select the PySpark kernelYou are now ready to perform analyse your data with Spark running on EMR on EKS.  ","version":"Next","tagName":"h3"},{"title":"Cleanup​","type":1,"pageTitle":"EMR on EKS Data Platform with AWS CDK","url":"/data-on-eks/docs/blueprints/amazon-emr-on-eks/emr-eks-studio#cleanup","content":" To clean up your environment, you call the command below. This will destroy the EKS cluster with Node groups and VPC  cdk destroy   caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment ","version":"Next","tagName":"h2"},{"title":"Spark Operator on EKS with IPv6","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/data-analytics/spark-eks-ipv6","content":"","keywords":"","version":"Next"},{"title":"Deploy the EKS Cluster with all the add-ons and infrastructure needed to test this example​","type":1,"pageTitle":"Spark Operator on EKS with IPv6","url":"/data-on-eks/docs/blueprints/data-analytics/spark-eks-ipv6#deploy-the-eks-cluster-with-all-the-add-ons-and-infrastructure-needed-to-test-this-example","content":" The Terraform blueprint will provision the following resources required to run Spark Jobs with open source Spark Operator on Amazon EKS IPv6  A Dual Stack Amazon Virtual Private Cloud (Amazon VPC) with 3 Private Subnets and 3 Public SubnetsAn Internet gateway for Public Subnets, NAT Gateway for Private Subnets and Egress-only Internet gatewayAn Amazon EKS cluster in IPv6 mode (version 1.30)Amazon EKS core-managed node group used to host some of the add-ons that we’ll provision on the clusterDeploys Spark-k8s-operator, Apache Yunikorn, Karpenter, Prometheus and Grafana server.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Spark Operator on EKS with IPv6","url":"/data-on-eks/docs/blueprints/data-analytics/spark-eks-ipv6#prerequisites","content":" Ensure that you have installed the following tools on your machine.  aws clikubectlterraform  Before installing the cluster create a EKS IPv6 CNI policy. Follow the instructions from the link:AmazonEKS_CNI_IPv6_Policy   ","version":"Next","tagName":"h3"},{"title":"Clone the repository​","type":1,"pageTitle":"Spark Operator on EKS with IPv6","url":"/data-on-eks/docs/blueprints/data-analytics/spark-eks-ipv6#clone-the-repository","content":" git clone https://github.com/awslabs/data-on-eks.git cd data-on-eks export DOEKS_HOME=$(pwd)   ","version":"Next","tagName":"h3"},{"title":"Initialize Terraform​","type":1,"pageTitle":"Spark Operator on EKS with IPv6","url":"/data-on-eks/docs/blueprints/data-analytics/spark-eks-ipv6#initialize-terraform","content":" Navigate into the example directory and run the initialization script install.sh.  cd ${DOEKS_HOME}/analytics//terraform/spark-eks-ipv6/ chmod +x install.sh ./install.sh   ","version":"Next","tagName":"h3"},{"title":"Export Terraform Outputs​","type":1,"pageTitle":"Spark Operator on EKS with IPv6","url":"/data-on-eks/docs/blueprints/data-analytics/spark-eks-ipv6#export-terraform-outputs","content":" export CLUSTER_NAME=$(terraform output -raw cluster_name) export AWS_REGION=$(terraform output -raw region) export S3_BUCKET=$(terraform output -raw s3_bucket_id_spark_event_logs_example_data)   The S3_BUCKET variable that holds the name of the bucket created during the install. This bucket will be used in later examples to store output data.  ","version":"Next","tagName":"h3"},{"title":"Update kubeconfig​","type":1,"pageTitle":"Spark Operator on EKS with IPv6","url":"/data-on-eks/docs/blueprints/data-analytics/spark-eks-ipv6#update-kubeconfig","content":" Update the kubeconfig to verify the deployment.  aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME   ","version":"Next","tagName":"h3"},{"title":"Verify the deployment​","type":1,"pageTitle":"Spark Operator on EKS with IPv6","url":"/data-on-eks/docs/blueprints/data-analytics/spark-eks-ipv6#verify-the-deployment","content":" Examine the IP addresses assigned to the cluster nodes and the pods. You will notice that both have IPv6 addresses allocated.  kubectl get node -o custom-columns='NODE_NAME:.metadata.name,INTERNAL-IP:.status.addresses[?(@.type==&quot;InternalIP&quot;)].address' NODE_NAME INTERNAL-IP ip-10-1-0-212.us-west-2.compute.internal 2600:1f13:520:1303:c87:4a71:b9ea:417c ip-10-1-26-137.us-west-2.compute.internal 2600:1f13:520:1304:15b2:b8a3:7f63:cbfa ip-10-1-46-28.us-west-2.compute.internal 2600:1f13:520:1305:5ee5:b994:c0c2:e4da   kubectl get pods -A -o custom-columns='NAME:.metadata.name,NodeIP:.status.hostIP,PodIP:status.podIP' NAME NodeIP PodIP .... karpenter-5fd95dffb8-l8j26 2600:1f13:520:1304:15b2:b8a3:7f63:cbfa 2600:1f13:520:1304:a79b:: karpenter-5fd95dffb8-qpv55 2600:1f13:520:1303:c87:4a71:b9ea:417c 2600:1f13:520:1303:60ac:: kube-prometheus-stack-grafana-9f5c9d8fc-zgn98 2600:1f13:520:1304:15b2:b8a3:7f63:cbfa 2600:1f13:520:1304:a79b::a kube-prometheus-stack-kube-state-metrics-98c74d866-56275 2600:1f13:520:1304:15b2:b8a3:7f63:cbfa 2600:1f13:520:1304:a79b::9 kube-prometheus-stack-operator-67df8bc57d-2d8jh 2600:1f13:520:1304:15b2:b8a3:7f63:cbfa 2600:1f13:520:1304:a79b::b kube-prometheus-stack-prometheus-node-exporter-5qrqs 2600:1f13:520:1303:c87:4a71:b9ea:417c 2600:1f13:520:1303:c87:4a71:b9ea:417c kube-prometheus-stack-prometheus-node-exporter-hcpvk 2600:1f13:520:1304:15b2:b8a3:7f63:cbfa 2600:1f13:520:1304:15b2:b8a3:7f63:cbfa kube-prometheus-stack-prometheus-node-exporter-ztkdm 2600:1f13:520:1305:5ee5:b994:c0c2:e4da 2600:1f13:520:1305:5ee5:b994:c0c2:e4da prometheus-kube-prometheus-stack-prometheus-0 2600:1f13:520:1304:15b2:b8a3:7f63:cbfa 2600:1f13:520:1304:a79b::7 spark-history-server-6c9f9d7cc4-xzj4c 2600:1f13:520:1305:5ee5:b994:c0c2:e4da 2600:1f13:520:1305:64b::1 spark-operator-84c6b48ffc-z2glj 2600:1f13:520:1304:15b2:b8a3:7f63:cbfa 2600:1f13:520:1304:a79b::5 spark-operator-webhook-init-kbl4s 2600:1f13:520:1305:5ee5:b994:c0c2:e4da 2600:1f13:520:1305:64b::2 yunikorn-admission-controller-d675f89c5-f2p47 2600:1f13:520:1303:c87:4a71:b9ea:417c 2600:1f13:520:1303:c87:4a71:b9ea:417c yunikorn-scheduler-59d6879975-2rh4d 2600:1f13:520:1304:15b2:b8a3:7f63:cbfa 2600:1f13:520:1304:a79b::4 ....   ","version":"Next","tagName":"h3"},{"title":"Execute Sample Spark job with Karpenter​","type":1,"pageTitle":"Spark Operator on EKS with IPv6","url":"/data-on-eks/docs/blueprints/data-analytics/spark-eks-ipv6#execute-sample-spark-job-with-karpenter","content":" Navigate to example directory and submit the Spark job.  cd ${DOEKS_HOME}/analytics/terraform/spark-eks-ipv6/examples/karpenter kubectl apply -f pyspark-pi-job.yaml   Monitor the job status using the below command. You should see the new nodes triggered by the Karpenter.  kubectl get pods -n spark-team-a -w   ","version":"Next","tagName":"h3"},{"title":"Apache YuniKorn Gang Scheduling with NVMe based SSD disk for shuffle storage​","type":1,"pageTitle":"Spark Operator on EKS with IPv6","url":"/data-on-eks/docs/blueprints/data-analytics/spark-eks-ipv6#apache-yunikorn-gang-scheduling-with-nvme-based-ssd-disk-for-shuffle-storage","content":" Gang Scheduling Spark jobs using Apache YuniKorn and Spark Operator  cd ${DOEKS_HOME}/analytics/terraform/spark-eks-ipv6/examples/karpenter/nvme-yunikorn-gang-scheduling   Run the taxi-trip-execute.sh script with the following input. You will use the S3_BUCKET variable created earlier. Additionally, you must change YOUR_REGION_HERE with the region of your choice, us-west-2 for example.  This script will download some example taxi trip data and create duplicates of it in order to increase the size a bit. This will take a bit of time and will require a relatively fast internet connection.  ${DOEKS_HOME}/analytics/scripts/taxi-trip-execute.sh ${S3_BUCKET} YOUR_REGION_HERE   Once our sample data is uploaded you can run the Spark job. You will need to replace the &lt;S3_BUCKET&gt; placeholders in this file with the name of the bucket created earlier. You can get that value by running echo $S3_BUCKET.  To do this automatically you can run the following, which will create a .old backup file and do the replacement for you.  sed -i.old s/\\&lt;S3_BUCKET\\&gt;/${S3_BUCKET}/g ./nvme-storage-yunikorn-gang-scheduling.yaml   Now that the bucket name is in place you can create the Spark job.  kubectl apply -f nvme-storage-yunikorn-gang-scheduling.yaml   ","version":"Next","tagName":"h3"},{"title":"Cleanup​","type":1,"pageTitle":"Spark Operator on EKS with IPv6","url":"/data-on-eks/docs/blueprints/data-analytics/spark-eks-ipv6#cleanup","content":" This script will cleanup the environment using -target option to ensure all the resources are deleted in correct order.  cd ${DOEKS_HOME}/analytics/terraform/spark-eks-ipv6 &amp;&amp; chmod +x cleanup.sh ./cleanup.sh   caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment ","version":"Next","tagName":"h2"},{"title":"DataHub on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/data-analytics/datahub-on-eks","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"DataHub on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/datahub-on-eks#introduction","content":" DataHub is an open source data catalog that enables end-to-end data discovery, data observability, and data governance. This extensive metadata platform allows users to collect, store, and explore metadata from various sources, such as databases, data lakes, streaming platforms, and ML feature stores. DataHub provides many features, a rich UI for searching and browsing metadata, as well as an API for integrating with other applications.  This blueprint deploys DataHub on an EKS cluster, using Amazon OpenSearch Service, Amazon Managed Streaming for Apache Kafka (Amazon MSK), and Amazon RDS for MySQL as the storage layer for the underlying data model and indexes.  ","version":"Next","tagName":"h2"},{"title":"DataHub on AWS​","type":1,"pageTitle":"DataHub on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/datahub-on-eks#datahub-on-aws","content":" On AWS, DataHub can run on EKS cluster. By using EKS, you can leverage the power and flexibility of Kubernetes to deploy and scale DataHub components, and take advantage of other AWS services and features, such as IAM, VPC, and CloudWatch, to monitor and secure the DataHub cluster.  DataHub also depends on many underlying infrastructure and services to function, including a message broker, a search engine, graph database, and a relational database like MySQL or PostgreSQL. AWS offers a range of managed and serverless services that can meet the needs of DataHub and simplify its deployment and operation.  DataHub can use Amazon Managed Streaming for Apache Kafka (MSK) as the messaging layer for metadata ingestion and consumption. MSK is a fully managed Apache Kafka service, so you don't need to handles the provisioning, configuration, and maintenance of Kafka cluster.DataHub stores metadata in both relational database and a search engine. For the relational database, this blueprint uses Amazon RDS for MySQL, which is also a managed service that simplifies the setup and operation of MySQL databases. RDS for MySQL also provides the high availability, security, and other features DataHub needs to store the metadata.For search engine, this blueprint uses Amazon OpenSearch service to provide fast and scalable search capabilities for the metadata.This blueprint deployes a Schema Registry service on EKS for DataHub. You may also choose to use Glue Schema Registry (https://docs.aws.amazon.com/glue/latest/dg/schema-registry.html) instead. Support for Glue Schema Registry will be included in future release of this blueprint.    ","version":"Next","tagName":"h2"},{"title":"Deploying the Solution​","type":1,"pageTitle":"DataHub on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/datahub-on-eks#deploying-the-solution","content":" This blueprint deploys an EKS Cluster into a new VPC by default:  Creates a new sample VPC, 2 Private Subnets and 2 Public SubnetsCreates Internet gateway for Public Subnets and NAT Gateway for Private Subnets  You may also deploy to an existing VPC by setting value for create_vpc variable to false and specify vpc_id, private_subnet_ids, and vpc_cidr values.  Creates EKS Cluster Control plane with public endpoint (for demo reasons only) with core managed node group, on-demand node group and Spot node group for Spark workloads.Deploys Metrics server, Cluster Autoscaler, Prometheus server and AMP workspace, and AWS LoadBalancer Controller.  It then provisions the storage services for DataHub.  Creates security group, and an OpenSearch domain with one data node in each of the private subnets / AZs that EKS cluster is deployed on.Creates security group, kms key, and configuration for MSK. Creates the MSK cluster with one broker in each of the private subnets.Creates an RDS MySQL db instance with multi-AZ enabled.  Finally it deployes the datahub-prerequisites and datahub helm charts to setup the datahub pods / services on the EKS cluster. Ingress is enabled (as configured in datahub_values.yaml) and AWS LoadBalancer Controller will provision an ALB to expose the DataHub frontend UI.  info You may customize the blueprint by changing values in variables.tf, to deploy to a different region (default to us-west-2 ), use different cluster name, number of subnets / AZs, or disable addons like fluentbit  info If you already have opensearch service in the account, the service-linked role for OpenSearch exists already. You will need to change default value for variable create_iam_service_linked_role_es to false to avoid error in deployment.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"DataHub on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/datahub-on-eks#prerequisites","content":" Ensure that you have installed the following tools on your machine.  aws clikubectlterraform  Also, you need opensearch service-linked role created in the account. To verify and create the role if needed, run:  aws iam create-service-linked-role --aws-service-name opensearchservice.amazonaws.com || true   If the role has already been successfully created, you will see:  An error occurred (InvalidInput) when calling the CreateServiceLinkedRole operation: Service role name AWSServiceRoleForOpenSearch has been taken in this account, please try a different suffix.  ","version":"Next","tagName":"h3"},{"title":"Deploy​","type":1,"pageTitle":"DataHub on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/datahub-on-eks#deploy","content":" Clone the repository  git clone https://github.com/awslabs/data-on-eks.git   Navigate into one of the example directories and run install.sh script  cd data-on-eks/analytics/terraform/datahub-on-eks chmod +x install.sh ./install.sh   caution install.sh script runs terraform apply -target for each module in order. The module dependencies are configured so they will be applied in the right sequence when you just run terraform apply. However, provisioning addons and MSK, OpenSearch, and RDS instances often take longer than 15 minutes, causing error when provisioning kubernetes and helm resources/modules afterwards due to expired auth token. So if you use terraform apply instead running install.sh, you may need to run it multiple times and terraform will resume the failed resource with a new token each time and complete the deployment eventually.  ","version":"Next","tagName":"h3"},{"title":"Verify Deployment​","type":1,"pageTitle":"DataHub on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/datahub-on-eks#verify-deployment","content":" After the deployment completes, we can access the DataHub UI and test importing metadata from sample datasources. For demo purpose, this blueprint creates the Ingress object for the datahub FrontEnd UI with public LoadBalancer(internal # Private Load Balancer can only be accessed within the VPC). For production workloads, you can modify datahub_values.yaml to use internal LB:  datahub-frontend: enabled: true image: repository: linkedin/datahub-frontend-react # Set up ingress to expose react front-end ingress: enabled: true annotations: kubernetes.io/ingress.class: alb alb.ingress.kubernetes.io/scheme: **internal # Private Load Balancer can only be accessed within the VPC** alb.ingress.kubernetes.io/target-type: instance   You may find the URL to the datahub frontend from the output frontend_url, or by running kubectl command below:  kubectl get ingress datahub-datahub-frontend -n datahub # OUTPUT should looks like below NAME CLASS HOSTS ADDRESS PORTS AGE datahub-datahub-frontend &lt;none&gt; * k8s-datahub-datahubd-xxxxxxxxxx-xxxxxxxxxx.&lt;region&gt;.elb.amazonaws.com 80 nn   Copy the ADDRESS field from the output, then open browser and enter the URL as http://&lt;address&gt;/. Enter datahub as both user name and password when prompted. We can view the DataHub UI like below.    ","version":"Next","tagName":"h3"},{"title":"Testing​","type":1,"pageTitle":"DataHub on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/datahub-on-eks#testing","content":" Follow steps from this blog to populate metadata from AWS Glue Data Catalog and Amazon Redshift, and business glossary and data lineage, into DataHub.  ","version":"Next","tagName":"h2"},{"title":"Cleanup​","type":1,"pageTitle":"DataHub on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/datahub-on-eks#cleanup","content":" To clean up your environment, run the cleanup.sh script.script  chmod +x cleanup.sh ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"Observability Spark on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/data-analytics/observability-spark-on-eks","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Observability Spark on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/observability-spark-on-eks#introduction","content":" In this post, we will learn the Observability for Spark on EKS. We will use Spark History Server to watch Spark Applications logs and check the Spark job progress via the Spark Web UI. Amazon Managed Service for Prometheus is used to collect and store the metrics generated by Spark Applications and Grafana is used to build dashboards for monitoring use cases.  ","version":"Next","tagName":"h2"},{"title":"Deploying the Solution​","type":1,"pageTitle":"Observability Spark on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/observability-spark-on-eks#deploying-the-solution","content":" We will reuse the previous Spark on Operator example. Please follow this link to provision resources  ","version":"Next","tagName":"h2"},{"title":"Set up data and py script​","type":1,"pageTitle":"Observability Spark on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/observability-spark-on-eks#set-up-data-and-py-script","content":" let's navigate to one example folder under spark-k8s-operator and run the shell script to upload data and py script to the S3 bucket created by terraform above.  cd data-on-eks/analytics/terraform/spark-k8s-operator/examples/cluster-autoscaler/nvme-ephemeral-storage   Run the taxi-trip-execute.sh script with the following input. You will use the S3_BUCKET variable created earlier. Additionally, you must change YOUR_REGION_HERE with the region of your choice, us-west-2 for example.  This script will download some example taxi trip data and create duplicates of it in order to increase the size a bit. This will take a bit of time and will require a relatively fast internet connection.  cd ${DOEKS_HOME}/analytics/scripts/ chmod +x taxi-trip-execute.sh taxi-trip-execute.sh ${S3_BUCKET} YOUR_REGION_HERE   You can return to the blueprint directory and continue with the example  cd ${DOEKS_HOME}/analytics/terraform/spark-k8s-operator   ","version":"Next","tagName":"h2"},{"title":"Spark Web UI​","type":1,"pageTitle":"Observability Spark on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/observability-spark-on-eks#spark-web-ui","content":" When you submit a Spark application, Spark context is created which ideally gives you Spark Web UI to monitor the execution of the application. Monitoring includes the following.  Spark configurations usedSpark Jobs, stages, and tasks detailsDAG executionDriver and Executor resource utilizationApplication logs and many more   When your application is done with the processing, Spark context will be terminated so your Web UI as well. and if you wanted to see the monitoring for already finished application, we cannot do it.  To try Spark web UI, let's update &lt;S3_BUCKET&gt; with your bucket name and &lt;JOB_NAME&gt; with &quot;nvme-taxi-trip&quot; in nvme-ephemeral-storage.yaml   kubectl apply -f nvme-ephemeral-storage.yaml   Then run port forward command to expose spark web service.  kubectl port-forward po/taxi-trip 4040:4040 -nspark-team-a   Then open browser and enter localhost:4040. You can view your spark application like below.    ","version":"Next","tagName":"h2"},{"title":"Spark History Server​","type":1,"pageTitle":"Observability Spark on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/observability-spark-on-eks#spark-history-server","content":" As mentioned above, spark web UI will be terminated once the spark job is done. This is where Spark history Server comes into the picture, where it keeps the history (event logs) of all completed applications and its runtime information which allows you to review metrics and monitor the application later in time.  In this example, we installed Spark history Server to read logs from S3 bucket. In your spark application yaml file, make sure you have the following setting:   sparkConf: &quot;spark.hadoop.fs.s3a.aws.credentials.provider&quot;: &quot;com.amazonaws.auth.InstanceProfileCredentialsProvider&quot; &quot;spark.hadoop.fs.s3a.impl&quot;: &quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot; &quot;spark.eventLog.enabled&quot;: &quot;true&quot; &quot;spark.eventLog.dir&quot;: &quot;s3a://&lt;your bucket&gt;/logs/&quot;   Run port forward command to expose spark-history-server service.  kubectl port-forward services/spark-history-server 18085:80 -n spark-history-server   Then open browser and enter localhost:18085. You can view your spark history server like below.  ","version":"Next","tagName":"h2"},{"title":"Prometheus​","type":1,"pageTitle":"Observability Spark on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/observability-spark-on-eks#prometheus","content":" Spark users must add the following config to spark application yaml file to extract the metrics from Spark Driver and Executors. In the example, they are added into nvme-ephemeral-storage.yaml already.   &quot;spark.ui.prometheus.enabled&quot;: &quot;true&quot; &quot;spark.executor.processTreeMetrics.enabled&quot;: &quot;true&quot; &quot;spark.kubernetes.driver.annotation.prometheus.io/scrape&quot;: &quot;true&quot; &quot;spark.kubernetes.driver.annotation.prometheus.io/path&quot;: &quot;/metrics/executors/prometheus/&quot; &quot;spark.kubernetes.driver.annotation.prometheus.io/port&quot;: &quot;4040&quot; &quot;spark.kubernetes.driver.service.annotation.prometheus.io/scrape&quot;: &quot;true&quot; &quot;spark.kubernetes.driver.service.annotation.prometheus.io/path&quot;: &quot;/metrics/driver/prometheus/&quot; &quot;spark.kubernetes.driver.service.annotation.prometheus.io/port&quot;: &quot;4040&quot; &quot;spark.metrics.conf.*.sink.prometheusServlet.class&quot;: &quot;org.apache.spark.metrics.sink.PrometheusServlet&quot; &quot;spark.metrics.conf.*.sink.prometheusServlet.path&quot;: &quot;/metrics/driver/prometheus/&quot; &quot;spark.metrics.conf.master.sink.prometheusServlet.path&quot;: &quot;/metrics/master/prometheus/&quot; &quot;spark.metrics.conf.applications.sink.prometheusServlet.path&quot;: &quot;/metrics/applications/prometheus/&quot;   Run port forward command to expose prometheus service.  kubectl port-forward service/prometheus-server 8080:80 -n prometheus   Then open browser and enter localhost:8080. You can view your prometheus server like below.  ","version":"Next","tagName":"h2"},{"title":"Grafana​","type":1,"pageTitle":"Observability Spark on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/observability-spark-on-eks#grafana","content":" Grafana has been installed. Use the command below to access with port forward.  get grafana password  kubectl port-forward service/grafana 8080:80 -n grafana   login username is admin and password can get from secrets manager. You can import dashboard with ID: 7890.   ","version":"Next","tagName":"h2"},{"title":"Spark Operator with YuniKorn","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-yunikorn","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Spark Operator with YuniKorn","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-yunikorn#introduction","content":" The EKS Cluster design for the Data on EKS blueprint is optimized for running Spark applications with Spark Operator and Apache YuniKorn as the batch scheduler. This blueprint leverage Karpenter to scale the worker nodes, AWS for FluentBit is employed for logging, and a combination of Prometheus, Amazon Managed Prometheus, and open source Grafana are used for observability. Additionally, the Spark History Server Live UI is configured for monitoring running Spark jobs through an NLB and NGINX ingress controller.  Spark workloads with Karpenter 👈  NVMe SSD Instance Storage for Spark Shuffle data 👈  Spark Operator 👈  Deploying the Solution 👈  Execute Sample Spark job with Karpenter 👈  Karpenter Nodepool weights with Graviton and Intel 👈  Cleanup 👈 ","version":"Next","tagName":"h2"},{"title":"Distributed Databases on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/distributed-databases","content":"Distributed Databases on EKS info Note: The blueprints for distributed databases and query engines are currently in the process of development. Documentation will be updated once a deployment example has been added to the repository. Running distributed databases and query engines on Kubernetes can provide a number of benefits for organizations looking to manage and process large amounts of data in real-time. Kubernetes provides features such as automatic scaling, rolling updates, and self-healing capabilities to ensure high availability and reliability of these systems. There are a number of popular distributed databases and query engines that have emerged to support this use case, including Apache Cassandra, Amazon DynamoDB, and Apache Presto. These systems make it easy to manage and process large amounts of data in real-time, and provide features such as scalability, high availability, and real-time data processing. By leveraging the power of Kubernetes, organizations can simplify and automate the deployment, scaling, and management of these complex systems, freeing up resources to focus on other areas of the business. With its growing ecosystem of tools and support for a wide range of use cases, Kubernetes is becoming an increasingly popular choice for running distributed databases and query engines in production.","keywords":"","version":"Next"},{"title":"ClickHouse on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/distributed-databases/clickhouse","content":"ClickHouse on EKS ClickHouse is a high-performance, column-oriented SQL database management system (DBMS) for online analytical processing (OLAP) that is open sourced under the Apache 2.0 license. OLAP is software technology you can use to analyze business data from different points of view. Organizations collect and store data from multiple data sources, such as websites, applications, smart meters, and internal systems. OLAP helps organizations process and benefit from a growing amount of information by combining and groups this data into categories to provide actionable insights for strategic planning. For example, a retailer stores data about all the products it sells, such as color, size, cost, and location. The retailer also collects customer purchase data, such as the name of the items ordered and total sales value, in a different system. OLAP combines the datasets to answer questions such as which color products are more popular or how product placement impacts sales. Some key benefits of Clickhouse include: Real-Time Analytics: ClickHouse can handle real-time data ingestion and analysis, making it suitable for use cases such as monitoring, logging, and event data processing.High Performance: ClickHouse is optimized for analytical workloads, providing fast query execution and high throughput.Scalability: ClickHouse is designed to scale horizontally across multiple nodes, allowing users to store and process petabytes of data across a distributed cluster. It supports sharding and replication for high availability and fault tolerance.Column-Oriented Storage: ClickHouse organizes data by columns rather than rows, which allows for efficient compression and faster query processing, especially for queries that involve aggregations and scans of large datasets.SQL Support: ClickHouse supports a subset of SQL, making it familiar and easy to use for developers and analysts who are already familiar with SQL-based databases.Integrated Data Formats: ClickHouse supports various data formats, including CSV, JSON, Apache Avro, and Apache Parquet, making it flexible for ingesting and querying different types of data. To deploy Clickhouse on EKS, we recommend this Clickhouse on EKS blueprint from Altinity, an AWS Partner who maintains the Clickouse Kubernetes Operator. If you have any issues with the blueprint or operator, please create an issue on the corresponding Altinity GitHub repository.","keywords":"","version":"Next"},{"title":"Superset on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/data-analytics/superset-on-eks","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Superset on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/superset-on-eks#introduction","content":" Apache Superset is a popular open source data exploration and visualization platform. Superset provides a rich set of data visualizations and easy ad-hoc query and analysis functionalities for data scientists, analysts, and business users.  This blueprint deploys Superset on an EKS cluster using Postgres as the backend database and Amazon Elastic Block Store (Amazon EBS) for persistent storage.  ","version":"Next","tagName":"h2"},{"title":"Superset on AWS​","type":1,"pageTitle":"Superset on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/superset-on-eks#superset-on-aws","content":" On AWS, Superset can run on an EKS cluster. By using EKS, you can leverage Kubernetes for deployment, scaling, and management of Superset services. Other AWS services like VPC, IAM, and EBS provide the networking, security, and storage capabilities.  Key AWS services used:  Amazon EKS as the managed Kubernetes cluster to run Superset pods and services.Amazon EBS to provide a scalable block store for Superset persistent storage.Amazon ECR to store Docker container images for Superset and dependencies  ","version":"Next","tagName":"h2"},{"title":"Deploying the Solution​","type":1,"pageTitle":"Superset on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/superset-on-eks#deploying-the-solution","content":" The blueprint performs the following to deploy Superset on EKS:  Create a new VPC with public and private subnetsProvision an EKS cluster control plane and managed worker nodesCreate an Amazon EBS file system and access pointBuild Docker images and push to Amazon ECRInstall Superset and services on EKS via Helm chartExpose Superset UI through a load balancer  Ingress is enabled and AWS LoadBalancer Controller will provision an ALB to expose the Superset frontend UI.  info You may customize the blueprint by changing values in variables.tf, to deploy to a different region (default to us-west-1 ), use different cluster name, number of subnets / AZs, or disable addons like fluentbit  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Superset on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/superset-on-eks#prerequisites","content":" Ensure that you have installed the following tools on your machine.  aws clikubectlterraformHelm  ","version":"Next","tagName":"h3"},{"title":"Deploy​","type":1,"pageTitle":"Superset on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/superset-on-eks#deploy","content":" Clone the repository  git clone https://github.com/awslabs/data-on-eks.git   Navigate into one of the example directories and run install.sh script  cd data-on-eks/analytics/terraform/superset-on-eks chmod +x install.sh ./install.sh   or simply  terraform init terraform apply --auto-approve   ","version":"Next","tagName":"h3"},{"title":"Architecture Overview​","type":1,"pageTitle":"Superset on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/superset-on-eks#architecture-overview","content":"   ","version":"Next","tagName":"h3"},{"title":"Verify Deployment​","type":1,"pageTitle":"Superset on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/superset-on-eks#verify-deployment","content":" After the deployment completes, we can access the Superset UI . For demo purpose, this blueprint creates the Ingress object for the Superset FrontEnd UI with public LoadBalancer and also number of pods across 2 AZ's in the corenode and superset node respectively.    You may find the URL to the Superset frontend from the output superset_url, or by running kubectl command below:  kubectl get ingress -n superset # OUTPUT should looks like below NAME CLASS HOSTS ADDRESS PORTS AGE superset-ingress aws-alb * k8s-superset-***.***.elb.amazonaws.com 80 125m   Copy the ADDRESS field from the output, then open browser and enter the URL as http://&lt;address&gt;/. Enter admin as both user name and password when prompted. We can view the Superset UI like below.    In order to visualize data, we need to first connect to Postgres database. the IP address of the database can be obtained by describing a pod 'superset-postgresql-0'. Basically the database is hosted on the superset-node  k describe po superset-postgresql-0 -n superset   After obtaining the IP address, database connection can be established as per the screenshot below  Once the database is connected, it has to be configured to allow file upload. This features allows, csv and other format files to be uploaded as a new table. Please refer to the screeshots below  Step -1 : Edit database configuration and navigate to 'ADVANCED' settings    Step - 2 : Under Security scroll down to the very end and 'check allow file uploads to the database'    Step -3 : Create a dataset by uploading a file    Step - 4 : To show a sample visualization a sample CSV of COVID research across various countries was uploaded. Here are a few visualizations that shows countries porgess with respect to trial of various vaccines      ","version":"Next","tagName":"h3"},{"title":"Cleanup​","type":1,"pageTitle":"Superset on EKS","url":"/data-on-eks/docs/blueprints/data-analytics/superset-on-eks#cleanup","content":" To clean up your environment, run the cleanup.sh script.  chmod +x cleanup.sh ./cleanup.sh   otherwise  terraform destroy --auto-approve  ","version":"Next","tagName":"h2"},{"title":"Deploying Apache Pinot (🍷) on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/distributed-databases/pinot","content":"","keywords":"","version":"Next"},{"title":"Architecture​","type":1,"pageTitle":"Deploying Apache Pinot (🍷) on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/pinot#architecture","content":"   In this setup we deploy all Apache Pinot components in private subnets across 3 availability zones. This allows for greater flexibility and resilience. Most pinot components can run on latest generation general purpose compute instances (m7i) except for server component which requires memory optimized instance types (r7i). We also setup internal NLB to easily communicate with Controller and Broker components.  Note: All Apache Pinot components run on StatefulSet.  Note: This blueprint doesn't leverage DeepStore currently and uses EBS volumes to store table segments on server.  Note: Based on your use case, you will need to update the cluster size and configuration to better suite your use case. You can read more about Apache Pinot capacity planning here and here.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites 📝​","type":1,"pageTitle":"Deploying Apache Pinot (🍷) on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/pinot#prerequisites-","content":" Ensure that you have following tools installed on your machine.  aws clikubectlterraform  ","version":"Next","tagName":"h2"},{"title":"Deployment ⚙️​","type":1,"pageTitle":"Deploying Apache Pinot (🍷) on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/pinot#deployment-️","content":" ","version":"Next","tagName":"h2"},{"title":"Deploy the EKS Cluster with Apache Pinot​","type":1,"pageTitle":"Deploying Apache Pinot (🍷) on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/pinot#deploy-the-eks-cluster-with-apache-pinot","content":" First, clone the repository.  git clone https://github.com/awslabs/data-on-eks.git   Navigate to apache pinot folder and create terraform.tfvars to provide desired values for all the variables. This is also the time to update any other input variables or make any other changes to the terraform template.  cd data-on-eks/distributed-databases/pinot touch terraform.tfvars   Sample terraform.tfvars​  name = &quot;pinot-on-eks&quot; region = &quot;us-west-2&quot; eks_cluster_version = &quot;1.25&quot; ...   Once you have updated your variables, you can run the install script to deploy your pre-configured EKS cluster with Apache Pinot.  ./install.sh   ","version":"Next","tagName":"h3"},{"title":"Verify Deployment​","type":1,"pageTitle":"Deploying Apache Pinot (🍷) on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/pinot#verify-deployment","content":" Verify the Amazon EKS Cluster  aws eks describe-cluster --name pinot-on-eks   Update local kubeconfig so we can access kubernetes cluster.  aws eks update-kubeconfig --name pinot-on-eks --region us-west-2   First, lets verify that we have worker nodes running in the cluster.  kubectl get nodes   Output​  NAME STATUS ROLES AGE VERSION ip-10-1-189-200.us-west-2.compute.internal Ready &lt;none&gt; 12d v1.24.17-eks-43840fb ip-10-1-46-117.us-west-2.compute.internal Ready &lt;none&gt; 12d v1.24.17-eks-43840fb ip-10-1-84-80.us-west-2.compute.internal Ready &lt;none&gt; 12d v1.24.17-eks-43840fb   Next, lets verify all the pods are running.  kubectl get pods -n pinot   Output​  NAME READY STATUS RESTARTS AGE pinot-broker-0 1/1 Running 0 11d pinot-broker-1 1/1 Running 0 11d pinot-broker-2 1/1 Running 0 11d pinot-controller-0 1/1 Running 0 11d pinot-controller-1 1/1 Running 0 11d pinot-controller-2 1/1 Running 0 11d pinot-minion-stateless-86cf65f89-rlpwn 1/1 Running 0 12d pinot-minion-stateless-86cf65f89-tkbjf 1/1 Running 0 12d pinot-minion-stateless-86cf65f89-twp8n 1/1 Running 0 12d pinot-server-0 1/1 Running 0 11d pinot-server-1 1/1 Running 0 11d pinot-server-2 1/1 Running 0 11d pinot-zookeeper-0 1/1 Running 0 12d pinot-zookeeper-1 1/1 Running 0 12d pinot-zookeeper-2 1/1 Running 0 12d   We have also deployed prometheus and grafana under monitoring namespace. So also make sure all the pods for monitoring are also running.  kubectl get pods -n monitoring   Output​  prometheus-grafana-85b4584dbf-4l72l 3/3 Running 0 12d prometheus-kube-prometheus-operator-84dcddccfc-pv8nv 1/1 Running 0 12d prometheus-kube-state-metrics-57f6b6b4fd-txjtb 1/1 Running 0 12d prometheus-prometheus-kube-prometheus-prometheus-0 2/2 Running 0 4d3h prometheus-prometheus-node-exporter-4jh8q 1/1 Running 0 12d prometheus-prometheus-node-exporter-f5znb 1/1 Running 0 12d prometheus-prometheus-node-exporter-f9xrz 1/1 Running 0 12d   Now lets access Apache Pinot Console using the below command. Console consist of Cluster Manager, Query Explorer, Zookeeper Browser and Swagger REST API Explorer.  kubectl port-forward service/pinot-controller 9000:9000 -n pinot   This will allow you to access Apache Pinot Console like the one shown below using http://localhost:9000    Apache Pinot supports exporting metrics using Prometheus JMX exporter that is packaged within the Apache Pinot docker image. Lets ensure metrics from all Apache Pinot components are getting published to prometheus.  kubectl port-forward service/prometheus-kube-prometheus-prometheus 9090:9090 -n monitoring   Navigate to the prometheus UI at http://localhost:9090, type pinot in the search box and you should be able to see all the metrics.    Next, Let's use Grafana to visualize the Apache Pinot metrics. In order to access Grafana, we need to get the grafana password from AWS Secrets Manager.  aws secretsmanager get-secret-value --secret-id pinot-on-eks-grafana | jq '.SecretString' --raw-output   Now use the port-forwarding to access Grafana at port 8080  kubectl port-forward service/prometheus-grafana 8080:80 -n monitoring   Login to grafana dashboard using admin and password retrieved in the previous step and then navigate to Dashboard and click New and then Import. Use the file pinot.json under data-on-eks/distributed-database/pinot/dashboard to create a pinot dashboard.    To learn more about the monitoring of Apache Pinot using Prometheus and Grafana use the official guide.  ","version":"Next","tagName":"h3"},{"title":"Additional Deployment (Optional) 🏆​","type":1,"pageTitle":"Deploying Apache Pinot (🍷) on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/pinot#additional-deployment-optional-","content":" ","version":"Next","tagName":"h2"},{"title":"Deploy Apache Kafka for Streaming Data​","type":1,"pageTitle":"Deploying Apache Pinot (🍷) on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/pinot#deploy-apache-kafka-for-streaming-data","content":" Apache Pinot can ingest data from streaming data sources (real-time) as well as batch data sources (offline). In this example, we will leverage Apache Kafka to push real-time data to a topic.  If you already have Apache Kafka running in your EKS cluster or you are leveraging Amazon Managed Streaming for Apache Kafka (MSK) you can skip this step. Otherwise, follow the steps below to install Kafka in your EKS cluster.  Note: Following deployment configure Kafka Brokers with PLAINTEXT listeners for simplified deployment. Modify the kafka-values.yaml file for production deployment  helm repo add bitnami https://charts.bitnami.com/bitnami helm install -n pinot pinot-kafka bitnami/kafka --values ./helm/kafka-values.yaml   Output​  NAME: pinot-kafka LAST DEPLOYED: Tue Oct 24 01:10:25 2023 NAMESPACE: pinot STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: CHART NAME: kafka CHART VERSION: 26.2.0 APP VERSION: 3.6.0 ** Please be patient while the chart is being deployed ** Kafka can be accessed by consumers via port 9092 on the following DNS name from within your cluster: pinot-kafka.pinot.svc.cluster.local Each Kafka broker can be accessed by producers via port 9092 on the following DNS name(s) from within your cluster: pinot-kafka-controller-0.pinot-kafka-controller-headless.pinot.svc.cluster.local:9092 pinot-kafka-controller-1.pinot-kafka-controller-headless.pinot.svc.cluster.local:9092 pinot-kafka-controller-2.pinot-kafka-controller-headless.pinot.svc.cluster.local:9092 To create a pod that you can use as a Kafka client run the following commands: kubectl run pinot-kafka-client --restart='Never' --image docker.io/bitnami/kafka:3.6.0-debian-11-r0 --namespace pinot --command -- sleep infinity kubectl exec --tty -i pinot-kafka-client --namespace pinot -- bash PRODUCER: kafka-console-producer.sh \\ --broker-list pinot-kafka-controller-0.pinot-kafka-controller-headless.pinot.svc.cluster.local:9092,pinot-kafka-controller-1.pinot-kafka-controller-headless.pinot.svc.cluster.local:9092,pinot-kafka-controller-2.pinot-kafka-controller-headless.pinot.svc.cluster.local:9092 \\ --topic test CONSUMER: kafka-console-consumer.sh \\ --bootstrap-server pinot-kafka.pinot.svc.cluster.local:9092 \\ --topic test \\ --from-beginning   Use the command mentioned above to create Kafka Client pod within your namespace.  kubectl run pinot-kafka-client --restart='Never' --image docker.io/bitnami/kafka:3.6.0-debian-11-r0 --namespace pinot --command -- sleep infinity   and then attach to the container shell  kubectl exec --tty -i pinot-kafka-client --namespace pinot -- bash   Create Kafka topics using the below commands, which will then be used to publish messages.  kafka-topics.sh --bootstrap-server pinot-kafka-controller-0.pinot-kafka-controller-headless.pinot.svc.cluster.local:9092 --topic flights-realtime --create --partitions 1 --replication-factor 1 kafka-topics.sh --bootstrap-server pinot-kafka-controller-0.pinot-kafka-controller-headless.pinot.svc.cluster.local:9092 --topic flights-realtime-avro --create --partitions 1 --replication-factor 1   and then exit from the container shell  exit   Use provided example/pinot-realtime-quickstart.yml to create tables and publish sample data to the above topics, which will then get ingested into tables.  kubectl apply -f example/pinot-realtime-quickstart.yml   Now, let's navigate back to Query Console and then click one of the tables. You should be able to see the newly created tables and data coming into tables.  kubectl port-forward service/pinot-controller 9000:9000 -n pinot     ","version":"Next","tagName":"h3"},{"title":"Cleanup 🧹​","type":1,"pageTitle":"Deploying Apache Pinot (🍷) on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/pinot#cleanup-","content":" To delete all the components provisioned as part of this blueprint, using the following command to destroy all the resources.  ./cleanup.sh   caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment ex. Delete kafka-on-eks EBS volumes ","version":"Next","tagName":"h2"},{"title":"S3 Tables with Amazon EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables","content":"","keywords":"","version":"Next"},{"title":"What is S3 Tables?​","type":1,"pageTitle":"S3 Tables with Amazon EKS","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables#what-is-s3-tables","content":" Amazon S3 Tables is a fully managed tabular data store purpose-built to optimize performance, simplify security, and provide cost-efficient storage for large-scale analytics workloads. It integrates directly with services like Amazon EMR, Amazon Athena, Amazon Redshift, AWS Glue, and AWS Lake Formation, offering a seamless experience for running analytics and machine learning workloads.  ","version":"Next","tagName":"h2"},{"title":"Why Run S3 Tables on Amazon EKS?​","type":1,"pageTitle":"S3 Tables with Amazon EKS","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables#why-run-s3-tables-on-amazon-eks","content":" For users who have adopted Amazon EKS for Spark workloads and are using table formats like Iceberg, leveraging S3 Tables offers advantages in performance, cost-efficiency, and security controls. This integration allows organizations to combine Kubernetes-native features with the capabilities of S3 Tables, potentially improving query performance and resource scaling within their existing environment. By following the steps detailed in this document, users can seamlessly integrate S3 Tables into their EKS setup, providing a flexible and complementary solution for analytics workloads.  ","version":"Next","tagName":"h2"},{"title":"How S3 Tables Differ from Iceberg Table Format​","type":1,"pageTitle":"S3 Tables with Amazon EKS","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables#how-s3-tables-differ-from-iceberg-table-format","content":" While S3 Tables use Apache Iceberg as an underlying implementation, they offer enhanced capabilities specifically designed for AWS customers:  🛠️ Automatic Compaction: S3 Tables implements automatic compaction, which intelligently optimizes data storage in the background by combining smaller files into larger, more efficient ones. This process reduces storage costs, improves query speed, and operates continuously without manual intervention. 🔄 Table Maintenance: It offers critical maintenance tasks like snapshot management and unreferenced file removal. This continuous optimization ensures that tables remain performant and cost-effective without manual intervention, reducing operational overhead and allowing teams to focus on data insights. ❄️ Apache Iceberg Support: Offers built-in support for Apache Iceberg, which simplifies managing data lakes at scale while improving query performance and reducing costs. Consider using S3 Tables for your data lake if you want to experience the following results. 🔒 Simplified Security: S3 Tables treat your tables as AWS resources, enabling fine-grained AWS Identity and Access Management (IAM) permissions at the table level. This simplifies data governance, enhances security, and makes access control more intuitive and manageable with your familiar AWS services. ⚡ Enhanced Performance: Amazon S3 Tables introduce a new type of bucket, purpose-built for storing Apache Iceberg tables. Table buckets deliver up to 3x faster query performance and up to 10x higher transactions per second compared to storing Iceberg tables in general-purpose S3 buckets. This performance enhancement supports high-frequency updates, real-time ingestion, and more demanding workloads, ensuring scalability and responsiveness as data volumes grow. 🛠️ Integration with AWS Services: S3 Tables are tightly integrated with AWS analytics services such as Athena, Redshift, EMR, and Glue, providing native support for analytics workloads.  Deploying the Solution 👈  ","version":"Next","tagName":"h2"},{"title":"Execute Sample Spark job​","type":1,"pageTitle":"S3 Tables with Amazon EKS","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables#execute-sample-spark-job","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1: Create the S3 Tables compatible Apache Spark Docker Image​","type":1,"pageTitle":"S3 Tables with Amazon EKS","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables#step-1-create-the-s3-tables-compatible-apache-spark-docker-image","content":" Create a Docker image with necessary jars for S3 tables communication.  Review the sample DockerfileNote the key jar files for S3 Tables interaction, including Iceberg, AWS SDK bundle, and S3 Tables Catalog for Iceberg runtimeCustomize the Dockerfile as needed for your environmentBuild the Docker image and push the image to your preferred container registry  We have created a docker image and published in ECR for the demo purpose only.  ","version":"Next","tagName":"h3"},{"title":"Step 2: Create Test Data for the job​","type":1,"pageTitle":"S3 Tables with Amazon EKS","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables#step-2-create-test-data-for-the-job","content":" Navigate to the example directory and generate sample employee data for Spark job input using this shell script.  cd analytics/terraform/spark-k8s-operator/examples/s3-tables ./input-data-gen.sh   This script will create a file named employee_data.csv in your current directory. By default, it generates 100 records.  Note: If you need to adjust the number of records, you can modify the input-data-gen.sh script. Look for the loop that generates the data and change the iteration count as needed.  ","version":"Next","tagName":"h3"},{"title":"Step 3: Upload Test Input data to Amazon S3 Bucket​","type":1,"pageTitle":"S3 Tables with Amazon EKS","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables#step-3-upload-test-input-data-to-amazon-s3-bucket","content":" Replace &lt;YOUR_S3_BUCKET&gt; with the name of the S3 bucket created by your blueprint and run the below command.  aws s3 cp employee_data.csv s3://&lt;S3_BUCKET&gt;/s3table-example/input/   This command will upload the CSV file to your S3 bucket. The Spark job will later reference this path to read the input data. Ensure you have the necessary permissions to write to this bucket before executing the command.  ","version":"Next","tagName":"h3"},{"title":"Step 4: Upload PySpark Script to S3 Bucket​","type":1,"pageTitle":"S3 Tables with Amazon EKS","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables#step-4-upload-pyspark-script-to-s3-bucket","content":" The following script is the snippet of the Spark job where you can see the Spark config required to work with S3 Tables.  def main(args): if len(args) != 3: logger.error(&quot;Usage: spark-etl [input-csv-path] [s3table-arn]&quot;) sys.exit(1) # Input parameters input_csv_path = args[1] # Path to the input CSV file s3table_arn = args[2] # s3table arn # Initialize Spark session logger.info(&quot;Initializing Spark Session&quot;) spark = (SparkSession .builder .appName(f&quot;{AppName}_{dt_string}&quot;) .config(&quot;spark.sql.extensions&quot;, &quot;org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions&quot;) .config(&quot;spark.sql.catalog.s3tablesbucket&quot;, &quot;org.apache.iceberg.spark.SparkCatalog&quot;) .config(&quot;spark.sql.catalog.s3tablesbucket.catalog-impl&quot;, &quot;software.amazon.s3tables.iceberg.S3TablesCatalog&quot;) .config(&quot;spark.sql.catalog.s3tablesbucket.warehouse&quot;, s3table_arn) .config('spark.hadoop.fs.s3.impl', &quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot;) .config(&quot;spark.sql.defaultCatalog&quot;, &quot;s3tablesbucket&quot;) .getOrCreate()) spark.sparkContext.setLogLevel(&quot;INFO&quot;) logger.info(&quot;Spark session initialized successfully&quot;) namespace = &quot;doeks_namespace&quot; table_name = &quot;employee_s3_table&quot; full_table_name = f&quot;s3tablesbucket.{namespace}.{table_name}&quot; ...   Replace S3_BUCKET with the name of the S3 bucket created by your blueprint and run the below command to upload sample Spark job to S3 buckets.  aws s3 cp s3table-iceberg-pyspark.py s3://&lt;S3_BUCKET&gt;/s3table-example/scripts/   Navigate to example directory and submit the Spark job.  ","version":"Next","tagName":"h3"},{"title":"Step 5: Create Amazon S3 table bucket​","type":1,"pageTitle":"S3 Tables with Amazon EKS","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables#step-5-create-amazon-s3-table-bucket","content":" This is the main step where you will create an S3 table bucket that will be used for S3 Tables, which your PySpark job will access later.  Replace &lt;S3TABLE_BUCKET_NAME&gt; with your desired bucket name. Replace &lt;REGION&gt; with your AWS region.  aws s3tables create-table-bucket \\ --region &quot;&lt;REGION&gt;&quot; \\ --name &quot;&lt;S3TABLE_BUCKET_NAME&gt;&quot;   Make note of the S3TABLE BUCKET ARN generated by this command. Verify the S3 table bucket ARN from AWS Console.    ","version":"Next","tagName":"h3"},{"title":"Step 6: Update Spark Operator YAML File​","type":1,"pageTitle":"S3 Tables with Amazon EKS","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables#step-6-update-spark-operator-yaml-file","content":" Update the Spark Operator YAML file as below:  Open s3table-spark-operator.yaml file in your preferred text editor.Replace &lt;S3_BUCKET&gt; with your S3 bucket created by this blueprint(Check Terraform outputs). S3 bucket is the place where you copied the test data and sample spark job in the above steps.REPLACE &lt;S3TABLE_BUCKET_ARN&gt; with your S3 table bucket ARN captured in the previous step.  You can see the snippet of Spark Operator Job config below.  --- apiVersion: &quot;sparkoperator.k8s.io/v1beta2&quot; kind: SparkApplication metadata: name: &quot;s3table-example&quot; namespace: spark-team-a labels: app: &quot;s3table-example&quot; applicationId: &quot;s3table-example-nvme&quot; spec: type: Python sparkVersion: &quot;3.5.3&quot; mode: cluster # CAUTION: Unsupported test image # This image is created solely for testing and reference purposes. # Before use, please: # 1. Review the Dockerfile used to create this image # 2. Create your own image that meets your organization's security requirements image: &quot;public.ecr.aws/data-on-eks/spark:3.5.3-scala2.12-java17-python3-ubuntu-s3table0.1.3-iceberg1.6.1&quot; imagePullPolicy: IfNotPresent mainApplicationFile: &quot;s3a://&lt;S3_BUCKET&gt;/s3table-example/scripts/s3table-iceberg-pyspark.py&quot; arguments: - &quot;s3a://&lt;S3_BUCKET&gt;/s3table-example/input/&quot; - &quot;&lt;S3TABLE_BUCKET_ARN&gt;&quot; sparkConf: &quot;spark.app.name&quot;: &quot;s3table-example&quot; &quot;spark.kubernetes.driver.pod.name&quot;: &quot;s3table-example&quot; &quot;spark.kubernetes.executor.podNamePrefix&quot;: &quot;s3table-example&quot; &quot;spark.local.dir&quot;: &quot;/data&quot; &quot;spark.speculation&quot;: &quot;false&quot; &quot;spark.network.timeout&quot;: &quot;2400&quot; &quot;spark.hadoop.fs.s3a.connection.timeout&quot;: &quot;1200000&quot; &quot;spark.hadoop.fs.s3a.path.style.access&quot;: &quot;true&quot; &quot;spark.hadoop.fs.s3a.connection.maximum&quot;: &quot;200&quot; &quot;spark.hadoop.fs.s3a.fast.upload&quot;: &quot;true&quot; &quot;spark.hadoop.fs.s3a.readahead.range&quot;: &quot;256K&quot; &quot;spark.hadoop.fs.s3a.input.fadvise&quot;: &quot;random&quot; &quot;spark.hadoop.fs.s3a.aws.credentials.provider.mapping&quot;: &quot;com.amazonaws.auth.WebIdentityTokenCredentialsProvider=software.amazon.awssdk.auth.credentials.WebIdentityTokenFileCredentialsProvider&quot; &quot;spark.hadoop.fs.s3a.aws.credentials.provider&quot;: &quot;software.amazon.awssdk.auth.credentials.WebIdentityTokenFileCredentialsProvider&quot; # AWS SDK V2 https://hadoop.apache.org/docs/stable/hadoop-aws/tools/hadoop-aws/aws_sdk_upgrade.html ...   ","version":"Next","tagName":"h3"},{"title":"Step 7: Execute Spark Job​","type":1,"pageTitle":"S3 Tables with Amazon EKS","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables#step-7-execute-spark-job","content":" Apply the updated YAML configuration file to your Kubernetes cluster to submit and execute the Spark job:  cd ${DOEKS_HOME}/analytics/terraform/spark-k8s-operator/examples/s3-tables kubectl apply -f s3table-spark-operator.yaml   This will schedule the Spark job on the EKS cluster. Spark Operator handles submitting the job to the Kubernetes API Server.  Kubernetes will schedule the Spark driver and executor pods to run on separate worker nodes. Karpenter will automatically provision new nodes if required, based on the nodepool configuration in the Terraform scripts.  Monitor the logs of the Spark driver pod to track job progress. The pods default to c5d instances, but you can modify the YAML and Karpenter nodepool to use different EC2 instance types if needed.  ","version":"Next","tagName":"h3"},{"title":"Step 8: Verify the Spark Driver log for the output​","type":1,"pageTitle":"S3 Tables with Amazon EKS","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables#step-8-verify-the-spark-driver-log-for-the-output","content":" List the pods running under the spark-team-a namespace:  kubectl get pods -n spark-team-a   Verify the driver logs to see the full output of the Spark job. The job reads the CSV data from the S3 bucket and writes it back to the S3 Tables bucket using the Iceberg format. It also counts the number of records processed and displays the first 10 records:  kubectl logs &lt;spark-driver-pod-name&gt; -n spark-team-a   You should see the Spark driver pod transition to a Succeeded state when the job completes successfully and the log should show output like below.  ... [2025-01-07 22:07:44,185] INFO @ line 59: Previewing employee data schema root |-- id: integer (nullable = true) |-- name: string (nullable = true) |-- level: string (nullable = true) |-- salary: double (nullable = true) .... 25/01/07 22:07:44 INFO CodeGenerator: Code generated in 10.594982 ms +---+-----------+------+--------+ |id |name |level |salary | +---+-----------+------+--------+ |1 |Employee_1 |Mid |134000.0| |2 |Employee_2 |Senior|162500.0| |3 |Employee_3 |Senior|174500.0| |4 |Employee_4 |Exec |69500.0 | |5 |Employee_5 |Senior|54500.0 | |6 |Employee_6 |Mid |164000.0| |7 |Employee_7 |Junior|119000.0| |8 |Employee_8 |Senior|54500.0 | |9 |Employee_9 |Senior|57500.0 | |10 |Employee_10|Mid |152000.0| +---+-----------+------+--------+ only showing top 10 rows ....   You should see a new Table and Namespace once the job is successful as shown in the image below.    The following commands will show the additional information on the S3 Tables.  ","version":"Next","tagName":"h3"},{"title":"Verify the S3Table using S3Table API​","type":1,"pageTitle":"S3 Tables with Amazon EKS","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables#verify-the-s3table-using-s3table-api","content":" Use the S3Table API to confirm the table was created successfully. Just replace the &lt;ACCOUNT_ID&gt; and run the command.  aws s3tables get-table --table-bucket-arn arn:aws:s3tables:&lt;REGION&gt;:&lt;ACCOUNT_ID&gt;:bucket/doeks-spark-on-eks-s3table \\ --namespace doeks_namespace \\ --name employee_s3_table   Output looks like below:  Output looks like below. { &quot;name&quot;: &quot;employee_s3_table&quot;, &quot;type&quot;: &quot;customer&quot;, &quot;tableARN&quot;: &quot;arn:aws:s3tables:us-west-2:&lt;ACCOUNT_ID&gt;:bucket/doeks-spark-on-eks-s3table/table/55511111-7a03-4513-b921-e372b0030daf&quot;, &quot;namespace&quot;: [ &quot;doeks_namespace&quot; ], &quot;versionToken&quot;: &quot;aafc39ddd462690d2a0c&quot;, &quot;metadataLocation&quot;: &quot;s3://55511111-7a03-4513-asdfsafdsfdsf--table-s3/metadata/00004-62cc4be3-59b5-4647-a78d-1cdf69ec5ed8.metadata.json&quot;, &quot;warehouseLocation&quot;: &quot;s3://55511111-7a03-4513-asdfsafdsfdsf--table-s3&quot;, &quot;createdAt&quot;: &quot;2025-01-07T22:14:48.689581+00:00&quot;, &quot;createdBy&quot;: &quot;&lt;ACCOUNT_ID&gt;&quot;, &quot;modifiedAt&quot;: &quot;2025-01-09T00:06:09.222917+00:00&quot;, &quot;ownerAccountId&quot;: &quot;&lt;ACCOUNT_ID&gt;&quot;, &quot;format&quot;: &quot;ICEBERG&quot; }   ","version":"Next","tagName":"h3"},{"title":"Monitor the table maintenance job status:​","type":1,"pageTitle":"S3 Tables with Amazon EKS","url":"/data-on-eks/docs/blueprints/data-analytics/spark-operator-s3tables#monitor-the-table-maintenance-job-status","content":" aws s3tables get-table-maintenance-job-status --table-bucket-arn arn:aws:s3tables:us-west-2:&quot;\\&lt;ACCOUNT_ID&gt;:bucket/doeks-spark-on-eks-s3table --namespace doeks_namespace --name employee_s3_table   This command provides information about Iceberg compaction, snapshot management, and unreferenced file removal processes.  { &quot;tableARN&quot;: &quot;arn:aws:s3tables:us-west-2:&lt;ACCOUNT_ID&gt;:bucket/doeks-spark-on-eks-s3table/table/55511111-7a03-4513-b921-e372b0030daf&quot;, &quot;status&quot;: { &quot;icebergCompaction&quot;: { &quot;status&quot;: &quot;Successful&quot;, &quot;lastRunTimestamp&quot;: &quot;2025-01-08T01:18:08.857000+00:00&quot; }, &quot;icebergSnapshotManagement&quot;: { &quot;status&quot;: &quot;Successful&quot;, &quot;lastRunTimestamp&quot;: &quot;2025-01-08T22:17:08.811000+00:00&quot; }, &quot;icebergUnreferencedFileRemoval&quot;: { &quot;status&quot;: &quot;Successful&quot;, &quot;lastRunTimestamp&quot;: &quot;2025-01-08T22:17:10.377000+00:00&quot; } } }   info To work with S3 Tables on EKS, both Node-level policies and Pod-level policies are required. Node-level policies: These are added to the Karpenter Node IAM role. For reference, you can view the permissions configuration in the addons.tf file. Pod-level policies: These are necessary for creating namespaces, managing tables, and reading/writing data to the tables. https://github.com/awslabs/data-on-eks/blob/e3f1a6b08d719fc69f61d18b57cd5ad09cb01bd5/analytics/terraform/spark-k8s-operator/main.tf#L98C1-L156C2 are granted through IAM Roles for Service Accounts (IRSA) for the spark-team-a namespace. This ensures that the Spark job pods have the required access to perform operations on S3 Tables. By configuring these permissions appropriately, you can ensure seamless execution of Spark jobs and secure access to resources. Please note that these policies can further be adjusted and make it more granular based on your security requirements.  Using S3 Tables with JupyterLab 👈  Cleanup 👈 ","version":"Next","tagName":"h3"},{"title":"Job Schedulers","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/job-schedulers","content":"Job Schedulers Job schedulers are an essential component of many organizations' infrastructure, helping to automate and manage complex workflows. When deployed on Kubernetes, job schedulers can take advantage of the platform's features such as automatic scaling, rolling updates, and self-healing capabilities to ensure high availability and reliability. Tools like Apache Airflow, Argo Workflow, and Amazon MWAA provide a simple and efficient way to manage and schedule jobs on a Kubernetes cluster. These tools are well-suited for a wide range of use cases, including data pipelines, machine learning workflows, and batch processing. By leveraging the power of Kubernetes, organizations can simplify and automate the management of their job schedulers, freeing up resources to focus on other areas of the business. With its growing ecosystem of tools and support for a wide range of use cases, Kubernetes is becoming an increasingly popular choice for running job schedulers in production. The following are the most popular job scheduling tools used with data workloads. This section provides deployment patterns for the following tools and examples to trigger Spark/ML jobs using these schedulers. Apache AirflowAmazon Managed Workflows for Apache Airflow (MWAA)Argo WorkflowPrefectAWS Batch","keywords":"","version":"Next"},{"title":"Deploying Trino on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/distributed-databases/trino","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Deploying Trino on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/trino#introduction","content":" Trino is an open-source, fast, distributed query engine designed to run SQL queries for big data analytics, over a multitude of data sources including Amazon S3, relational databases, distributed data stores and data warehouses.  When Trino executes a query, it does so by breaking up the execution into a hierarchy of stages, which are implemented as a series of tasks distributed over a network of Trino workers. A Trino cluster consists of a coordinator and many workers for parallel processing, which can be deployed as Kubernetes pods on an EKS cluster. The coordinator and the workers collaborate to access connected data sources, with schemas and references stored in a catalog. To access the data sources, you can use one of the many connectors provided by Trino to adapt Trino. Examples include as Hive, Iceberg and Kafka. More details about Trino project can be found on this link  ","version":"Next","tagName":"h2"},{"title":"Blueprint Solution​","type":1,"pageTitle":"Deploying Trino on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/trino#blueprint-solution","content":" This blueprint will deploy Trino on an EKS cluster (Kubernetes version 1.29) with nodes provisioned using Karpenter (v0.34.0). To optimize on cost and performance, Karpenter will provision On-demand nodes for the Trino coordinator and EC2 Spot instances for Trino workers. With Trino's multi-architectural container images, Karpenter NodePool will allow provisioning of nodes with EC2 instances from different cpu architectures including AWS Graviton based instances. Trino is deployed using the official Helm chart, with custom values provided for users to leverage Hive and Iceberg connectors. The examples will use Glue and Iceberg tables on AWS as the backend data source, using S3 as the storage.  ","version":"Next","tagName":"h2"},{"title":"Deploying the Solution​","type":1,"pageTitle":"Deploying Trino on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/trino#deploying-the-solution","content":" Let's go through the deployment steps.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Deploying Trino on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/trino#prerequisites","content":" Ensure that you have installed the following tools on your machine.  aws clikubectlterraformTrino CLI client   Toggle to see installation steps of Trino CLI wget https://repo1.maven.org/maven2/io/trino/trino-cli/427/trino-cli-427-executable.jar mv trino-cli-427-executable.jar trino chmod +x trino   ","version":"Next","tagName":"h3"},{"title":"Deploy the EKS Cluster with Trino​","type":1,"pageTitle":"Deploying Trino on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/trino#deploy-the-eks-cluster-with-trino","content":" First, clone the repository  git clone https://github.com/awslabs/data-on-eks.git   Navigate into distributed-databases/trino and run install.sh script. Enter, when prompted, the AWS region you want to provision the resources to (for example, us-west-2).  cd data-on-eks/distributed-databases/trino ./install.sh   ","version":"Next","tagName":"h3"},{"title":"Verify Deployment​","type":1,"pageTitle":"Deploying Trino on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/trino#verify-deployment","content":" Verify the Amazon EKS Cluster  #Select your own region where you deployed resources aws eks describe-cluster --name trino-on-eks --region us-west-2   Update local kubeconfig so we can access kubernetes cluster (you can also get this command from the terraform output configure_kubectl )  aws eks update-kubeconfig --name trino-on-eks --region us-west-2   First, let's verify that we have worker nodes provisioned by Karpenter in the cluster. Let's also see their availability zone and capacity type (on-demand or spot)  kubectl get nodes --selector=karpenter.sh/nodepool=trino-sql-karpenter -L topology.kubernetes.io/zone -L karpenter.sh/capacity-type -L node.kubernetes.io/instance-type   Output​  NAME STATUS ROLES AGE VERSION ZONE CAPACITY-TYPE INSTANCE-TYPE ip-10-1-11-49.us-west-2.compute.internal Ready &lt;none&gt; 24m v1.29.0-eks-5e0fdde us-west-2b on-demand t4g.medium   We can see above that Karpenter provisioned on-demand node for running Trino coordinator.  info For a distributed Big Data query engine like Trino which runs on a massively parallel processing cluster, it is recommended to deploy the cluster in same availability zone to avoid incurring high Inter-AZ Data Transfer costs. That's why Karpenter NodePool has been configured to launch EKS nodes in same AZ  Now, let's verify the coordinator and worker pods running in trino namespace  kubectl get pods --namespace=trino   Output​  NAME READY STATUS RESTARTS AGE trino-coordinator-5cfd685c8f-mchff 1/1 Running 0 37m   Next, we will port-forward the trino service so it can be accessed locally  kubectl -n trino port-forward service/trino 8080:8080   Now, lets access the Trino UI at http://localhost:8080 through web browser and login with username admin in the login window as shown below:    Trino Web UI will show 0 active worker:    ","version":"Next","tagName":"h3"},{"title":"Using Trino for database querying executions​","type":1,"pageTitle":"Deploying Trino on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/trino#using-trino-for-database-querying-executions","content":" ","version":"Next","tagName":"h2"},{"title":"Example #1: Using the Hive Connector​","type":1,"pageTitle":"Deploying Trino on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/trino#example-1-using-the-hive-connector","content":" In this example, we will set up a Hive metastore using AWS Glue, with the source data stored in S3, and crawler that will infer schema from it to build a Glue table.  Using Trino on EKS with the Glue connector, we will use Trino CLI to run sample SQL queries to retrieve data.  Setup​  Run the hive script from the examples directory to set up the blueprint S3 bucket with the 2022 NYC Taxi dataset (in Parquet), and build Glue metastore:  cd examples/ ./hive-setup.sh   You will see some outputs to show progress, and if successful, will see the name of the Glue table that will store the metadata as hive.  Running the queries​  You should have the Trino CLI installed as part of the prerequisite. The blueprint has the Hive Connector configured with the bucket we set up in the previous section, so you should be able to query the data source without additional settings.  First, port-forward your trino service to access it locally, if you have closed the session from previous section:  kubectl -n trino port-forward service/trino 8080:8080   While the port-forward is running, open another terminal tab where you have Trino CLI and run the following command to access the coordinator:  ./trino http://127.0.0.1:8080 --user admin   Once successful, you will be able to get a prompt to execute commands. You can use help command to see a list of supported commands. The first command you run will trigger the auto-scaling of trino workers from 0 to 1, and take a couple minutes to complete.  For example:  To show a list of catalogs, run query - SHOW CATALOGS; and you can see hive and iceberg catalogs among others configured by the blueprint  Output​   Catalog --------- hive iceberg system tpcds tpch (5 rows) Query 20240215_200117_00003_6jdxw, FINISHED, 1 node Splits: 1 total, 1 done (100.00%) 0.49 [0 rows, 0B] [0 rows/s, 0B/s]   To see the schemas (databases) in Hive catalog, run query - SHOW SCHEMAS FROM hive; :  Output​   Schema -------------------- information_schema taxi_hive_database (2 rows)   Let's use taxi_hive_database and show table in this database -  USE hive.taxi_hive_database;   SHOW TABLES;   Output​  Table ------- hive (1 row)   Finally, to run a simple query to list items - SELECT * FROM hive LIMIT 5;  Output​  vendorid | tpep_pickup_datetime | tpep_dropoff_datetime | passenger_count | trip_distance | ratecodeid | store_and_fwd_flag | pulocationid | dolocation&gt; ----------+-------------------------+-------------------------+-----------------+---------------+------------+--------------------+--------------+-----------&gt; 1 | 2022-09-01 00:28:12.000 | 2022-09-01 00:36:22.000 | 1.0 | 2.1 | 1.0 | N | 100 | 2&gt; 1 | 2022-11-01 00:24:49.000 | 2022-11-01 00:31:04.000 | 2.0 | 1.0 | 1.0 | N | 158 | 1&gt; 1 | 2022-11-01 00:37:32.000 | 2022-11-01 00:42:23.000 | 2.0 | 0.8 | 1.0 | N | 249 | 1&gt; 2 | 2022-09-01 00:02:24.000 | 2022-09-01 00:09:39.000 | 1.0 | 1.32 | 1.0 | N | 238 | 1&gt; 2 | 2022-09-01 00:47:25.000 | 2022-09-01 00:56:09.000 | 1.0 | 2.94 | 1.0 | N |   Cleaning Up Hive Resources​  Exit from Trino CLI with exit command. Run the cleanup script from the examples directory to delete all the resources created from the hive script:  cd data-on-eks/distributed-databases/trino/examples ./hive-cleanup.sh   ","version":"Next","tagName":"h3"},{"title":"Example #2: Using the Iceberg Connector​","type":1,"pageTitle":"Deploying Trino on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/trino#example-2-using-the-iceberg-connector","content":" In this example, we will set up using Apache Iceberg with AWS Glue as the catalog type, and will store the data in Amazon S3 with PARQUET format.  Using Trino on EKS with the Iceberg connector, we will use Trino CLI to create the above resources and run sample SQL queries to insert and retrieve data.  Running the queries​  Let's find out the S3 data bucket created by blueprint. We will use this bucket to store data in Iceberg tables in PARQUET format.  cd data-on-eks/distributed-databases/trino export BUCKET=$(terraform output --state=&quot;./terraform.tfstate&quot; --raw data_bucket) echo $BUCKET   Output​  trino-data-bucket-20240215180855515400000001   Let’s now create an Iceberg schema with tables populated with data from sf10000 schema tables of TPCDS. We will use CREATE TABLE AS SELECT (CTAS) statements. The SQL file examples/trino_sf10000_tpcds_to_iceberg.sql has the below SQL statements:  use tpcds.sf10000; select * from tpcds.sf10000.item limit 10; select * from tpcds.sf10000.warehouse limit 10; /* Drop tables &amp; schema */ drop schema iceberg.iceberg_schema; drop table iceberg.iceberg_schema.warehouse; drop table iceberg.iceberg_schema.item; drop table iceberg.iceberg_schema.inventory; drop table iceberg.iceberg_schema.date_dim; /* Iceberg schema creation */ create schema if not exists iceberg.iceberg_schema with (LOCATION = 's3://trino-data-bucket-20240215180855515400000001/iceberg/'); /* Iceberg Table Creation with CTAS from tpcds tables */ create table if not exists iceberg.iceberg_schema.inventory with (FORMAT = 'PARQUET') as select * from tpcds.sf10000.inventory; create table if not exists iceberg.iceberg_schema.date_dim with (FORMAT = 'PARQUET') as select d_date_sk, cast(d_date_id as varchar(16)) as d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, cast(d_day_name as varchar(9)) as d_day_name, cast(d_quarter_name as varchar(6)) as d_quarter_name, cast(d_holiday as varchar(1)) as d_holiday, cast(d_weekend as varchar(1)) as d_weekend, cast(d_following_holiday as varchar(1)) as d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, cast(d_current_day as varchar(1)) as d_current_day, cast(d_current_week as varchar(1)) as d_current_week, cast(d_current_month as varchar(1)) as d_current_month, cast(d_current_quarter as varchar(1)) as d_current_quarter from tpcds.sf10000.date_dim; create table if not exists iceberg.iceberg_schema.warehouse with (FORMAT = 'PARQUET') as select w_warehouse_sk, cast(w_warehouse_id as varchar(16)) as w_warehouse_id, w_warehouse_name, w_warehouse_sq_ft, cast(w_street_number as varchar(10)) as w_street_number, w_street_name, cast(w_street_type as varchar(15)) as w_street_type, cast(w_suite_number as varchar(10)) as w_suite_number, w_city, w_county, cast(w_state as varchar(2)) as w_state, cast(w_zip as varchar(10)) as w_zip, w_country, w_gmt_offset from tpcds.sf10000.warehouse; create table if not exists iceberg.iceberg_schema.item with (FORMAT = 'PARQUET') as select i_item_sk, cast(i_item_id as varchar(16)) as i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, i_wholesale_cost, i_brand_id, cast(i_brand as varchar(50)) as i_brand, i_class_id, cast(i_class as varchar(50)) as i_class, i_category_id, cast(i_category as varchar(50)) as i_category, i_manufact_id, cast(i_manufact as varchar(50)) as i_manufact, cast(i_size as varchar(50)) as i_size, cast(i_formulation as varchar(20)) as i_formulation, cast(i_color as varchar(20)) as i_color, cast(i_units as varchar(10)) as i_units, cast(i_container as varchar(10)) as i_container, i_manager_id, cast(i_product_name as varchar(50)) as i_product_name from tpcds.sf10000.item; /* Select from Iceberg table */ select * from iceberg.iceberg_schema.date_dim limit 10; select * from iceberg.iceberg_schema.item limit 10; select * from iceberg.iceberg_schema.inventory limit 10; /* Running query from Iceberg table */ with inv as (select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy ,stdev,mean, case mean when 0 then null else stdev/mean end cov from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean from iceberg.iceberg_schema.inventory ,iceberg.iceberg_schema.item ,iceberg.iceberg_schema.warehouse ,iceberg.iceberg_schema.date_dim where inv_item_sk = i_item_sk and inv_warehouse_sk = w_warehouse_sk and inv_date_sk = d_date_sk and d_year =1999 group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo where case mean when 0 then 0 else stdev/mean end &gt; 1) select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov from inv inv1,inv inv2 where inv1.i_item_sk = inv2.i_item_sk and inv1.w_warehouse_sk = inv2.w_warehouse_sk and inv1.d_moy=4 and inv2.d_moy=4+1 and inv1.cov &gt; 1.5 order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov,inv2.d_moy,inv2.mean, inv2.cov;   Above SQL commands will execute following actions: Create an Iceberg schema named iceberg_schemaCreate 4 Iceberg tables - warehouse, item, inventory and date_dim with data from same tables of tpcdsQuery data from above Iceberg tables Let's now execute above SQL commands using Trino CLI:  envsubst &lt; examples/trino_sf10000_tpcds_to_iceberg.sql &gt; examples/iceberg.sql ./trino --file 'examples/iceberg.sql' --server http://localhost:8080 --user admin --ignore-errors   You can see completed and running SQL queries in Trino UI web monitor as below:    Let’s open another terminal and see how KEDA is scaling Trino worker pods, when above SQL commands are running:  kubectl get hpa -n trino -w   Output​  NAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE keda-hpa-keda-scaler-trino-worker Deployment/trino-worker &lt;unknown&gt;/1, &lt;unknown&gt;/1 + 1 more... 1 15 0 37m keda-hpa-keda-scaler-trino-worker Deployment/trino-worker 0/1, 1/1 + 1 more... 1 15 1 38m keda-hpa-keda-scaler-trino-worker Deployment/trino-worker 0/1, 500m/1 + 1 more... 1 15 1 40m keda-hpa-keda-scaler-trino-worker Deployment/trino-worker 0/1, 0/1 + 1 more... 1 15 1 40m keda-hpa-keda-scaler-trino-worker Deployment/trino-worker 0/1, 0/1 + 1 more... 1 15 1 40m keda-hpa-keda-scaler-trino-worker Deployment/trino-worker 0/1, 0/1 + 1 more... 1 15 1 40m keda-hpa-keda-scaler-trino-worker Deployment/trino-worker 0/1, 0/1 + 1 more... 1 15 2 41m keda-hpa-keda-scaler-trino-worker Deployment/trino-worker 0/1, 0/1 + 1 more... 1 15 2 41m keda-hpa-keda-scaler-trino-worker Deployment/trino-worker 0/1, 0/1 + 1 more... 1 15 2 41m   You can see HPA scaling from initial 0 workers to 2 workers with increasing query load and average cpu utilization of workerss:    ","version":"Next","tagName":"h3"},{"title":"Example #3 (Optional): Fault-tolerant execution in Trino​","type":1,"pageTitle":"Deploying Trino on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/trino#example-3-optional-fault-tolerant-execution-in-trino","content":" Fault-tolerant execution is an opt-in mechanism in Trino that was implemented using Project Tardigrade. Without fault-tolerant configuration, Trino query fails whenever any of the component tasks of the query fails due to any reason (for example, a worker node failure or termination). These failed queries have to be restarted from scratch resulting in longer execution time, compute wastage, and spend, especially for long-running queries.  When fault-tolerant execution is configured in Trino with a retry policy, intermediate exchange data is spooled in an external storage like Amazon S3 or HDFS using exchange manager. Trino then retries failed query (if retry policy is configured as &quot;QUERY&quot;) or failed tasks (if retry policy is configured as &quot;TASK&quot;). Trino's remaining workers reuse exchange manager data to retry and complete query in the event of a worker outage or other fault during query execution.  info A QUERY retry policy instructs Trino to retry whole query when an error occurs on a worker node. It is recommended to use this retry policy when the majority of the workload for the Trino cluster comprises many small queries. A TASK retry policy instructs Trino to retry individual tasks in the event of failure. It is recommended to use this policy when Trino executes large batch queries. The cluster can more efficiently retry smaller tasks within the query rather than retry the whole query.  This blueprint has deployed Trino cluster with fault-tolerant configuration with a TASK retry policy in config.properties file in coordinator and worker pods. Let's verify that by opening a bash command shell inside coordinator pod:  COORDINATOR_POD=$(kubectl get pods -l &quot;app.kubernetes.io/instance=trino,app.kubernetes.io/component=coordinator&quot; -o name -n trino) kubectl exec --stdin --tty $COORDINATOR_POD -n trino -- /bin/bash cat /etc/trino/config.properties   Output​  coordinator=true node-scheduler.include-coordinator=false http-server.http.port=8080 query.max-memory=280GB query.max-memory-per-node=22GB discovery.uri=http://localhost:8080 retry-policy=TASK exchange.compression-enabled=true query.low-memory-killer.delay=0s query.remote-task.max-error-duration=1m query.hash-partition-count=50   Blueprint has also configured exchange manager using an Amazon S3 bucket in exchange-manager.properties file in coordinator and worker pods. Let's also verify that inside coordinator pod  cat /etc/trino/exchange-manager.properties   Output​  exchange-manager.name=filesystem exchange.base-directories=s3://trino-exchange-bucket-20240215180855570800000004 exchange.s3.region=us-west-2 exchange.s3.iam-role=arn:aws:iam::xxxxxxxxxx:role/trino-sa-role   Please note down exchange manager S3 bucket name from above. You can explore contents of above S3 bucket in AWS Console. It will be empty when no query is running.  Now, let's exit from bash shell of the coordinator pod  exit   With below steps, we will now test fault-tolerant execution by running a select query and terminate few Trino workers when query is still running.  Find the file trino_select_query_iceberg.sql file in the examples folder, which contains the SQL commands below:  with inv as (select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy ,stdev,mean, case mean when 0 then null else stdev/mean end cov from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean from iceberg.iceberg_schema.inventory ,iceberg.iceberg_schema.item ,iceberg.iceberg_schema.warehouse ,iceberg.iceberg_schema.date_dim where inv_item_sk = i_item_sk and inv_warehouse_sk = w_warehouse_sk and inv_date_sk = d_date_sk and d_year =1999 group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo where case mean when 0 then 0 else stdev/mean end &gt; 1) select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov from inv inv1,inv inv2 where inv1.i_item_sk = inv2.i_item_sk and inv1.w_warehouse_sk = inv2.w_warehouse_sk and inv1.d_moy=4 and inv2.d_moy=4+1 and inv1.cov &gt; 1.5 order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov,inv2.d_moy,inv2.mean, inv2.cov;   Let's now run select query first  ./trino --file 'examples/trino_select_query_iceberg.sql' --server http://localhost:8080 --user admin --ignore-errors   Immediately after above command, when above query is still running, open another terminal and scale down worker pods to just 1 worker, terminating all other workers with command below:  kubectl scale deployment trino-worker -n trino --replicas=1   See Trino Web UI on browser and there is only 1 active worker running now as other workers are terminated:    Go to Amazon S3 console and verify intermediate exchange data spooling in exchange manager S3 bucket with a name starting with trino-exchange-bucket.    Let's now see Trino Web UI monitor again to verify completion of the query despite of 6 failed tasks due to terminated workers (we have encircled them in RED in the screenshot below).  info Please note, number of failed tasks could be different in your Trino Web UI depending upon how many tasks were running on workers that got terminated. Also you can see different number of active workers depending upon worker pods scaled by Horizontal Pod Autoscaler(HPA) using cpu utilization metric    Cleaning Up Iceberg Resources​  Let's open Trino CLI  ./trino http://127.0.0.1:8080 --user admin   Now, let's delete Iceberg tables and schema by running below SQL commands on Trino CLI:  drop table iceberg.iceberg_schema.warehouse; drop table iceberg.iceberg_schema.item; drop table iceberg.iceberg_schema.inventory; drop table iceberg.iceberg_schema.date_dim; drop schema iceberg.iceberg_schema;   Exit from Trino CLI with exit command.  ","version":"Next","tagName":"h3"},{"title":"Cleanup 🧹​","type":1,"pageTitle":"Deploying Trino on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/trino#cleanup-","content":" To delete all the components provisioned as part of this blueprint, using the following command to destroy all the resources.  cd data-on-eks/distributed-databases/trino ./cleanup.sh   caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment ex. S3 buckets for Trino Exchange manager  ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Deploying Trino on EKS","url":"/data-on-eks/docs/blueprints/distributed-databases/trino#conclusion","content":" Trino is a tool for fast querying vast amounts of data from your data sources.In this example, we shared a terraform based blueprint that deploys Trino with fault-tolerant configuration on Amazon EKS, with add-ons necessary to build a complete EKS cluster (i.e. Karpenter for node autoscaling, Metrics server and HPA for Trino worker pods autoscaling, monitoring with Prometheus/Grafana stack). Among many features, we highlighted a couple of examples on creating an Iceberg or Hive data store using Amazon S3 as storage, and running simple Trino queries for results. We also deployed and scaled Trino workers on Spot instances for cost optimization. We also demonstrated fault-tolerant feature of Trino, which makes it suitable for Spot instances to save costs for long-running batch queries. ","version":"Next","tagName":"h2"},{"title":"Deploying PostgreSQL Database on EKS using CloudNativePG Operator","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/distributed-databases/cloudnative-postgres","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Deploying PostgreSQL Database on EKS using CloudNativePG Operator","url":"/data-on-eks/docs/blueprints/distributed-databases/cloudnative-postgres#introduction","content":" CloudNativePG is an open sourceoperatordesigned to manage PostgreSQL workloads Kubernetes.  It defines a new Kubernetes resource called Cluster representing a PostgreSQL cluster made up of a single primary and an optional number of replicas that co-exist in a chosen Kubernetes namespace for High Availability and offloading of read-only queries.  Applications that reside in the same Kubernetes cluster can access the PostgreSQL database using a service which is solely managed by the operator, without having to worry about changes of the primary role following a failover or a switchover. Applications that reside outside the Kubernetes cluster, need to configure a Service or Ingress object to expose the Postgres via TCP. Web applications can take advantage of the native connection pooler based on PgBouncer.  CloudNativePG was originally built by EDB, then released open source under Apache License 2.0 and submitted for CNCF Sandbox in April 2022. The source code repository is in Github.  More details about the project will be found on this link  ","version":"Next","tagName":"h2"},{"title":"Deploying the Solution​","type":1,"pageTitle":"Deploying PostgreSQL Database on EKS using CloudNativePG Operator","url":"/data-on-eks/docs/blueprints/distributed-databases/cloudnative-postgres#deploying-the-solution","content":" Let's go through the deployment steps  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Deploying PostgreSQL Database on EKS using CloudNativePG Operator","url":"/data-on-eks/docs/blueprints/distributed-databases/cloudnative-postgres#prerequisites","content":" Ensure that you have installed the following tools on your machine.  aws clikubectlterraformpsql  ","version":"Next","tagName":"h3"},{"title":"Deploy the EKS Cluster with CloudNativePG Operator​","type":1,"pageTitle":"Deploying PostgreSQL Database on EKS using CloudNativePG Operator","url":"/data-on-eks/docs/blueprints/distributed-databases/cloudnative-postgres#deploy-the-eks-cluster-with-cloudnativepg-operator","content":" First, clone the repository  git clone https://github.com/awslabs/data-on-eks.git   Navigate into cloudnative-postgres folder and run install.sh script. By default the script deploys EKS cluster to us-west-2 region. Update variables.tf to change the region. This is also the time to update any other input variables or make any other changes to the terraform template.  cd data-on-eks/distributed-databases/cloudnative-postgres ./install.sh   ","version":"Next","tagName":"h3"},{"title":"Verify Deployment​","type":1,"pageTitle":"Deploying PostgreSQL Database on EKS using CloudNativePG Operator","url":"/data-on-eks/docs/blueprints/distributed-databases/cloudnative-postgres#verify-deployment","content":" Verify the Amazon EKS Cluster  aws eks describe-cluster --name cnpg-on-eks   Update local kubeconfig so we can access kubernetes cluster  aws eks update-kubeconfig --name cnpg-on-eks --region us-west-2   First, lets verify that we have worker nodes running in the cluster.  kubectl get nodes NAME STATUS ROLES AGE VERSION ip-10-1-10-192.us-west-2.compute.internal Ready &lt;none&gt; 4d17h v1.25.6-eks-48e63af ip-10-1-10-249.us-west-2.compute.internal Ready &lt;none&gt; 4d17h v1.25.6-eks-48e63af ip-10-1-11-38.us-west-2.compute.internal Ready &lt;none&gt; 4d17h v1.25.6-eks-48e63af ip-10-1-12-195.us-west-2.compute.internal Ready &lt;none&gt; 4d17h v1.25.6-eks-48e63af   Next, lets verify all the pods are running.  kubectl get pods --namespace=monitoring NAME READY STATUS RESTARTS AGE alertmanager-kube-prometheus-stack-alertmanager-0 2/2 Running 1 (4d17h ago) 4d17h kube-prometheus-stack-grafana-7f8b9dc64b-sb27n 3/3 Running 0 4d17h kube-prometheus-stack-kube-state-metrics-5979d9d98c-r9fxn 1/1 Running 0 60m kube-prometheus-stack-operator-554b6f9965-zqszr 1/1 Running 0 60m prometheus-kube-prometheus-stack-prometheus-0 2/2 Running 0 4d17h kubectl get pods --namespace=cnpg-system NAME READY STATUS RESTARTS AGE cnpg-on-eks-cloudnative-pg-587d5d8fc5-65z9j 1/1 Running 0 4d17h   ","version":"Next","tagName":"h3"},{"title":"Deploy a PostgreSQL cluster​","type":1,"pageTitle":"Deploying PostgreSQL Database on EKS using CloudNativePG Operator","url":"/data-on-eks/docs/blueprints/distributed-databases/cloudnative-postgres#deploy-a-postgresql-cluster","content":" First of all, we need to create a storageclass using the ebs-csi-driver, a demo namespace and kubernetes secrets for login/password for database authentication app-auth. Check examples folder for all kubernetes manifests.  Storage​  For running a highly scalable and durable self-managed PostgreSQL database on Kubernetes with Amazon EKS and EC2, it is recommended to use Amazon Elastic Block Store (EBS) volumes that provide high performance and fault tolerance. The preferred EBS volume types for this use case are:  1.Provisioned IOPS SSD (io2 or io1):  Designed for I/O-intensive workloads such as databases.Offers consistent and low-latency performance.Allows you to provision a specific number of IOPS (input/output operations per second) according to your requirements.Provides up to 64,000 IOPS per volume and 1,000 MB/s throughput, making it suitable for demanding database workloads.  2.General Purpose SSD (gp3 or gp2):  Suitable for most workloads and offers a balance between performance and cost.Provides a baseline performance of 3,000 IOPS and 125 MB/s throughput per volume, which can be increased if needed (up to 16,000 IOPS and 1,000 MB/s for gp3).Recommended for less I/O-intensive database workloads or when cost is a primary concern.  You can find both storageclass template in examples folder.  kubectl create -f examples/storageclass.yaml kubectl create -f examples/auth-prod.yaml   As with any other deployment in Kubernetes, to deploy a PostgreSQL cluster you need to apply a configuration file that defines your desired Cluster. CloudNativePG operator offers two type of Bootstrapping a new database:  Bootstrap an empty clusterBootstrap From another cluster.  In this first example, we are going to create a new empty database cluster using initdbflags. We are going to use the template below by modifying the IAM role for IRSA configuration 1 and S3 bucket for backup restore process and WAL archiving 2. The Terraform could already created this use terraform output to extract these parameters:  cd data-on-eks/distributed-databases/cloudnative-postgres terraform output barman_backup_irsa = &quot;arn:aws:iam::&lt;your_account_id&gt;:role/cnpg-on-eks-prod-irsa&quot; barman_s3_bucket = &quot;XXXX-cnpg-barman-bucket&quot; configure_kubectl = &quot;aws eks --region us-west-2 update-kubeconfig --name cnpg-on-eks&quot;   --- apiVersion: postgresql.cnpg.io/v1 kind: Cluster metadata: name: prod namespace: demo spec: description: &quot;Cluster Demo for DoEKS&quot; # Choose your PostGres Database Version imageName: ghcr.io/cloudnative-pg/postgresql:15.2 # Number of Replicas instances: 3 startDelay: 300 stopDelay: 300 replicationSlots: highAvailability: enabled: true updateInterval: 300 primaryUpdateStrategy: unsupervised serviceAccountTemplate: # For backup and restore, we use IRSA for barman tool. # You will find this IAM role on terraform outputs. metadata: annotations: eks.amazonaws.com/role-arn: arn:aws:iam::&lt;&lt;account_id&gt;&gt;:role/cnpg-on-eks-prod-irsa #1 postgresql: parameters: shared_buffers: 256MB pg_stat_statements.max: '10000' pg_stat_statements.track: all auto_explain.log_min_duration: '10s' pg_hba: # - hostssl app all all cert - host app app all password logLevel: debug storage: storageClass: ebs-sc size: 1Gi walStorage: storageClass: ebs-sc size: 1Gi monitoring: enablePodMonitor: true bootstrap: initdb: # Deploying a new cluster database: WorldDB owner: app secret: name: app-auth backup: barmanObjectStore: # For backup, we S3 bucket to store data. # On this Blueprint, we create an S3 check the terraform output for it. destinationPath: s3://&lt;your-s3-barman-bucket&gt; #2 s3Credentials: inheritFromIAMRole: true wal: compression: gzip maxParallel: 8 retentionPolicy: &quot;30d&quot; resources: # m5large: m5xlarge 2vCPU, 8GI RAM requests: memory: &quot;512Mi&quot; cpu: &quot;1&quot; limits: memory: &quot;1Gi&quot; cpu: &quot;2&quot; affinity: enablePodAntiAffinity: true topologyKey: failure-domain.beta.kubernetes.io/zone nodeMaintenanceWindow: inProgress: false reusePVC: false   Once updated, you can apply your template.  kubectl create -f examples/prod-cluster.yaml   Verify that CloudNatvicePG operator has created three pods: one primary and two standby.   kubectl get pods,svc -n demo NAME READY STATUS RESTARTS AGE pod/prod-1 1/1 Running 0 4m36s pod/prod-2 1/1 Running 0 3m45s pod/prod-3 1/1 Running 0 3m9s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/prod-any ClusterIP 172.20.230.153 &lt;none&gt; 5432/TCP 4m54s service/prod-r ClusterIP 172.20.33.61 &lt;none&gt; 5432/TCP 4m54s service/prod-ro ClusterIP 172.20.96.16 &lt;none&gt; 5432/TCP 4m53s service/prod-rw ClusterIP 172.20.236.1 &lt;none&gt; 5432/TCP 4m53s   The operator created also three services:  -rw: points only to the primary instances of cluster database-ropoints only to hot standby replicas for read-only-workloads-rpoints to any of the instances for read-only workloads  Note that -any points on all the instances.  Another way to check Cluster status is by using cloudnative-pg kubectl plugin offered by the CloudNativePG community,  kubectl cnpg status prod Cluster Summary Name: prod Namespace: demo System ID: 7214866198623563798 PostgreSQL Image: ghcr.io/cloudnative-pg/postgresql:15.2 Primary instance: prod-1 Status: Cluster in healthy state Instances: 3 Ready instances: 3 Current Write LSN: 0/6000000 (Timeline: 1 - WAL File: 000000010000000000000005) Certificates Status Certificate Name Expiration Date Days Left Until Expiration ---------------- --------------- -------------------------- prod-ca 2023-06-24 14:40:27 +0000 UTC 89.96 prod-replication 2023-06-24 14:40:27 +0000 UTC 89.96 prod-server 2023-06-24 14:40:27 +0000 UTC 89.96 Continuous Backup status First Point of Recoverability: Not Available Working WAL archiving: OK WALs waiting to be archived: 0 Last Archived WAL: 000000010000000000000005 @ 2023-03-26T14:52:09.24307Z Last Failed WAL: - Streaming Replication status Replication Slots Enabled Name Sent LSN Write LSN Flush LSN Replay LSN Write Lag Flush Lag Replay Lag State Sync State Sync Priority Replication Slot ---- -------- --------- --------- ---------- --------- --------- ---------- ----- ---------- ------------- ---------------- prod-2 0/6000000 0/6000000 0/6000000 0/6000000 00:00:00 00:00:00 00:00:00 streaming async 0 active prod-3 0/6000000 0/6000000 0/6000000 0/6000000 00:00:00 00:00:00 00:00:00 streaming async 0 active Unmanaged Replication Slot Status No unmanaged replication slots found Instances status Name Database Size Current LSN Replication role Status QoS Manager Version Node ---- ------------- ----------- ---------------- ------ --- --------------- ---- prod-1 29 MB 0/6000000 Primary OK BestEffort 1.19.0 ip-10-1-10-192.us-west-2.compute.internal prod-2 29 MB 0/6000000 Standby (async) OK BestEffort 1.19.0 ip-10-1-12-195.us-west-2.compute.internal prod-3 29 MB 0/6000000 Standby (async) OK BestEffort 1.19.0 ip-10-1-11-38.us-west-2.compute.internal   ","version":"Next","tagName":"h3"},{"title":"Monitoring​","type":1,"pageTitle":"Deploying PostgreSQL Database on EKS using CloudNativePG Operator","url":"/data-on-eks/docs/blueprints/distributed-databases/cloudnative-postgres#monitoring","content":" In this example, we deployed a Prometheus and Grafana addons to monitor all database clusters created by CloudNativePG. Let's check Grafana dashboard.  kubectl -n monitoring port-forward svc/kube-prometheus-stack-grafana 8080:80     ","version":"Next","tagName":"h3"},{"title":"Import database sample​","type":1,"pageTitle":"Deploying PostgreSQL Database on EKS using CloudNativePG Operator","url":"/data-on-eks/docs/blueprints/distributed-databases/cloudnative-postgres#import-database-sample","content":" You can expose your database outside the cluster using ingress-controller or kubernetes service type LoadBalancer. However, for internal usage inside your EKS cluster, you can use kubernetes service prod-rw and prod-ro. In this section, we are going to expose read-write service -rwusing kubectl port-forward.   kubectl port-forward svc/prod-rw 5432:5432 -n demo   Now, we use psql cli to import world.sql into our database instance WorldDB using credentials from app-auth secrets.   psql -h localhost --port 5432 -U app -d WorldDB &lt; world.sql # Quick check on db tables. psql -h localhost --port 5432 -U app -d WorldDB -c '\\dt' Password for user app: List of relations Schema | Name | Type | Owner --------+-----------------+-------+------- public | city | table | app public | country | table | app public | countrylanguage | table | app (3 rows)   ","version":"Next","tagName":"h3"},{"title":"Create Backup to S3​","type":1,"pageTitle":"Deploying PostgreSQL Database on EKS using CloudNativePG Operator","url":"/data-on-eks/docs/blueprints/distributed-databases/cloudnative-postgres#create-backup-to-s3","content":" Now that we had a running database with data, CloudNativePG operator offers backup-restore feature using barman tool. CloudNativePG allows database admin to create on-demand database or Scheduled backups and for more details on documentations.  In this example, we will create a Backup object to start a backup process immediately.  apiVersion: postgresql.cnpg.io/v1 kind: Backup metadata: name: ondemand spec: cluster: name: prod    kubectl create -f examples/backup-od.yaml   It will take couple minutes to run, then, check the backup process  kubectl describe backup ondemand Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Starting 60s cloudnative-pg-backup Starting backup for cluster prod Normal Starting 60s instance-manager Backup started Normal Completed 56s instance-manager Backup completed   ","version":"Next","tagName":"h3"},{"title":"Restore​","type":1,"pageTitle":"Deploying PostgreSQL Database on EKS using CloudNativePG Operator","url":"/data-on-eks/docs/blueprints/distributed-databases/cloudnative-postgres#restore","content":" For restore, we use bootstrap a new cluster using backup file on S3. The backup tool barman manages restore process, but, it doesn't support backup and restore for kubernetes secrets. This must be managed separately, like using csi-secrets-driver with AWS SecretsManager.  First let's delete prod database.  kubectl delete cluster prod -n demo   Then, update your template examples/cluster-restore.yaml with your S3 bucket and IAM role. Note that on restore template, CloudNativePG use externalClusters to point on the database.   kubectl create -f examples/cluster-restore.yaml Type Reason Age From Message ---- ------ ---- ---- ------- Normal CreatingPodDisruptionBudget 7m12s cloudnative-pg Creating PodDisruptionBudget prod-primary Normal CreatingPodDisruptionBudget 7m12s cloudnative-pg Creating PodDisruptionBudget prod Normal CreatingServiceAccount 7m12s cloudnative-pg Creating ServiceAccount Normal CreatingRole 7m12s cloudnative-pg Creating Cluster Role Normal CreatingInstance 7m12s cloudnative-pg Primary instance (from backup) Normal CreatingInstance 6m33s cloudnative-pg Creating instance prod-2 Normal CreatingInstance 5m51s cloudnative-pg Creating instance prod-3   When creating a new cluster, the operator will create a ServiceAccount with IRSA configuration as described on Cluster resources. Make sure the trust policy points the right ServiceAccount.  Let's check if the data were covered as expected.   psql -h localhost --port 5432 -U app -d WorldDB -c '\\dt' Password for user app: List of relations Schema | Name | Type | Owner --------+-----------------+-------+------- public | city | table | app public | country | table | app public | countrylanguage | table | app (3 rows) psql -h localhost --port 5432 -U app -d WorldDB -c 'SELECT CURRENT_TIME;'   ","version":"Next","tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Deploying PostgreSQL Database on EKS using CloudNativePG Operator","url":"/data-on-eks/docs/blueprints/distributed-databases/cloudnative-postgres#conclusion","content":" CloudNativePG operator provides Level 5 from Operator Capability Levels. In this example, we share a blueprint that deploy the operator as an addon along with its monitoring stack (Prometheus and grafana). Among many features, we highlighted couple of examples on creating cluster, importing data and restoring database in case of disaster (or cluster deletion). More features are available on this documentation ","version":"Next","tagName":"h2"},{"title":"Argo Workflows on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks","content":"","keywords":"","version":"Next"},{"title":"Prerequisites:​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#prerequisites","content":" Ensure that you have the following tools installed locally:  aws clikubectlterraformArgo WorkflowCLI  ","version":"Next","tagName":"h2"},{"title":"Deploy​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#deploy","content":" To provision this example:  git clone https://github.com/awslabs/data-on-eks.git cd data-on-eks/schedulers/terraform/argo-workflow region=&lt;your region&gt; # set region variable for following commands terraform init terraform apply -var region=$region #defaults to us-west-2   Enter yes at command prompt to apply  The following components are provisioned in your environment:  A sample VPC, 2 Private Subnets and 2 Public SubnetsInternet gateway for Public Subnets and NAT Gateway for Private SubnetsEKS Cluster Control plane with one managed node groupEKS Managed Add-ons: VPC_CNI, CoreDNS, Kube_Proxy, EBS_CSI_DriverK8S Metrics Server, CoreDNS Autoscaler, Cluster Autoscaler, AWS for FluentBit, Karpenter, Argo Workflows, Argo Events, Kube Prometheus Stack, Spark Operator and Yunikorn SchedulerK8s roles and rolebindings for Argo Workflows and Argo Events    ","version":"Next","tagName":"h2"},{"title":"Validate​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#validate","content":" The following command will update the kubeconfig on your local machine and allow you to interact with your EKS Cluster using kubectl to validate the deployment.  ","version":"Next","tagName":"h2"},{"title":"Run update-kubeconfig command:​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#run-update-kubeconfig-command","content":" aws eks --region eu-west-1 update-kubeconfig --name argoworkflows-eks   ","version":"Next","tagName":"h3"},{"title":"List the nodes​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#list-the-nodes","content":" kubectl get nodes # Output should look like below NAME STATUS ROLES AGE VERSION ip-10-1-0-189.eu-west-1.compute.internal Ready &lt;none&gt; 10m v1.27.3-eks-a5565ad ip-10-1-0-240.eu-west-1.compute.internal Ready &lt;none&gt; 10m v1.27.3-eks-a5565ad ip-10-1-1-135.eu-west-1.compute.internal Ready &lt;none&gt; 10m v1.27.3-eks-a5565ad   ","version":"Next","tagName":"h3"},{"title":"List the namespaces in EKS cluster​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#list-the-namespaces-in-eks-cluster","content":" kubectl get ns # Output should look like below NAME STATUS AGE argo-events Active 7m45s argo-workflows Active 8m25s spark-team-a Active 5m51s default Active 25m karpenter Active 21m kube-node-lease Active 25m kube-prometheus-stack Active 8m5s kube-public Active 25m kube-system Active 25m spark-operator Active 5m43s yunikorn Active 5m44s   ","version":"Next","tagName":"h3"},{"title":"Access Argo Workflow WebUI​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#access-argo-workflow-webui","content":" Get the load balancer url:  kubectl -n argo-workflows get service argo-workflows-server -o jsonpath=&quot;{.status.loadBalancer.ingress[*].hostname}{'\\n'}&quot;   Copy and paste the result in your browser. The initial username is admin. The login token is autogenerated and you can get it by running the following command:  argo auth token # get login token # result: Bearer k8s-aws-v1.aHR0cHM6Ly9zdHMudXMtd2VzdC0yLmFtYXpvbmF3cy5jb20vP0FjdGlvbj1HZXRDYWxsZXJJZGVudGl0eSZWZXJzaW9uPTIwMTEtMDYtMTUmWC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNWNFhDV1dLUjZGVTRGMiUyRjIwMjIxMDEzJTJGdXMtd2VzdC0yJTJGc3RzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyMjEwMTNUMDIyODAyWiZYLUFtei1FeHBpcmVzPTYwJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCUzQngtazhzLWF3cy1pZCZYLUFtei1TaWduYXR1cmU9NmZiNmMxYmQ0MDQyMWIwNTI3NjY4MzZhMGJiNmUzNjg1MTk1YmM0NDQzMjIyMTg5ZDNmZmE1YzJjZmRiMjc4OA     ","version":"Next","tagName":"h3"},{"title":"Submit Spark Job with Argo Workflow​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#submit-spark-job-with-argo-workflow","content":" Export EKS API from terraform output  eks_api_url=https://ABCDEFG1234567890.yl4.eu-west-2.eks.amazonaws.com cat workflow-examples/argo-spark.yaml | sed &quot;s/&lt;your_eks_api_server_url&gt;/$eks_api_url/g&quot; | kubectl apply -f - kubectl get wf -n argo-workflows NAME STATUS AGE MESSAGE spark Running 8s   You can also check the workflow status from Web UI    ","version":"Next","tagName":"h3"},{"title":"Submit Spark Job with Spark Operator and Argo Workflow​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#submit-spark-job-with-spark-operator-and-argo-workflow","content":" kubectl apply -f workflow-examples/argo-spark-operator.yaml kubectl get wf -n argo-workflows NAME STATUS AGE MESSAGE spark Succeeded 3m58s spark-operator Running 5s   The workflow status from web UI    ","version":"Next","tagName":"h3"},{"title":"Trigger a workflow to create a spark job based on SQS message​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#trigger-a-workflow-to-create-a-spark-job-based-on-sqs-message","content":" ","version":"Next","tagName":"h2"},{"title":"Install eventbus which is for event transmission in argo events​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#install-eventbus-which-is-for-event-transmission-in-argo-events","content":" kubectl apply -f argo-events-manifests/eventbus.yaml   ","version":"Next","tagName":"h3"},{"title":"Deploy eventsource-sqs.yaml to link with external SQS​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#deploy-eventsource-sqsyaml-to-link-with-external-sqs","content":" In this case, we configure a EventSource to license to the queue test1 in region us-east-1. The eventsource is capable of monitoring events across regions, so the Amazon EKS cluster and Amazon SQS queue don’t need to be located in the same Region.  queue_name=test1 region_sqs=us-east-1 cat argo-events-manifests/eventsource-sqs.yaml | sed &quot;s/&lt;region_sqs&gt;/$region_sqs/g;s/&lt;queue_name&gt;/$queue_name/g&quot; | kubectl apply -f -   Let's create that queue in your account.  # create a queue queue_url=$(aws sqs create-queue --queue-name $queue_name --region $region_sqs --output text) # get your queue arn sqs_queue_arn=$(aws sqs get-queue-attributes --queue-url $queue_url --attribute-names QueueArn --region $region_sqs --query &quot;Attributes.QueueArn&quot; --output text) template=`cat argo-events-manifests/sqs-accesspolicy.json | sed -e &quot;s|&lt;sqs_queue_arn&gt;|$sqs_queue_arn|g;s|&lt;your_event_irsa_arn&gt;|$your_event_irsa_arn|g&quot;` aws sqs set-queue-attributes --queue-url $queue_url --attributes $template --region $region_sqs   ","version":"Next","tagName":"h3"},{"title":"Deploy sensor-rbac.yaml and sensor-sqs-spark-crossns.yaml for triggering workflow​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#deploy-sensor-rbacyaml-and-sensor-sqs-spark-crossnsyaml-for-triggering-workflow","content":" kubectl apply -f argo-events-manifests/sensor-rbac.yaml   cd workflow-examples   Update the variables in Shell script and execute  ./taxi-trip-execute.sh   Update YAML file and run the below command  kubectl apply -f sensor-sqs-sparkjobs.yaml   ","version":"Next","tagName":"h3"},{"title":"Verify argo-events namespace​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#verify-argo-events-namespace","content":" kubectl get all,eventbus,EventSource,sensor,sa,role,rolebinding -n argo-events # Output should look like below NAME READY STATUS RESTARTS AGE pod/argo-events-controller-manager-bfb894cdb-26qw7 1/1 Running 0 18m pod/aws-sqs-crossns-spark-sensor-zkgz5-6584787c47-zjm9p 1/1 Running 0 44s pod/aws-sqs-eventsource-544jd-8fccc6f8-w6ssd 1/1 Running 0 4m45s pod/eventbus-default-stan-0 2/2 Running 0 5m21s pod/eventbus-default-stan-1 2/2 Running 0 5m13s pod/eventbus-default-stan-2 2/2 Running 0 5m11s pod/events-webhook-6f8d9fdc79-l9q9w 1/1 Running 0 18m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/eventbus-default-stan-svc ClusterIP None &lt;none&gt; 4222/TCP,6222/TCP,8222/TCP 5m21s service/events-webhook ClusterIP 172.20.4.211 &lt;none&gt; 443/TCP 18m NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/argo-events-controller-manager 1/1 1 1 18m deployment.apps/aws-sqs-crossns-spark-sensor-zkgz5 1/1 1 1 44s deployment.apps/aws-sqs-eventsource-544jd 1/1 1 1 4m45s deployment.apps/events-webhook 1/1 1 1 18m NAME DESIRED CURRENT READY AGE replicaset.apps/argo-events-controller-manager-bfb894cdb 1 1 1 18m replicaset.apps/aws-sqs-crossns-spark-sensor-zkgz5-6584787c47 1 1 1 44s replicaset.apps/aws-sqs-eventsource-544jd-8fccc6f8 1 1 1 4m45s replicaset.apps/events-webhook-6f8d9fdc79 1 1 1 18m NAME READY AGE statefulset.apps/eventbus-default-stan 3/3 5m21s NAME AGE eventbus.argoproj.io/default 5m22s NAME AGE eventsource.argoproj.io/aws-sqs 4m46s NAME AGE sensor.argoproj.io/aws-sqs-crossns-spark 45s NAME SECRETS AGE serviceaccount/argo-events-controller-manager 0 18m serviceaccount/argo-events-events-webhook 0 18m serviceaccount/default 0 18m serviceaccount/event-sa 0 16m serviceaccount/operate-workflow-sa 0 53s NAME CREATED AT role.rbac.authorization.k8s.io/operate-workflow-role 2023-07-24T18:52:30Z NAME ROLE AGE rolebinding.rbac.authorization.k8s.io/operate-workflow-role-binding Role/operate-workflow-role 52s   ","version":"Next","tagName":"h3"},{"title":"Test from SQS​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#test-from-sqs","content":" Send a message from SQS: {&quot;message&quot;: &quot;hello&quot;}  aws sqs send-message --queue-url $queue_url --message-body '{&quot;message&quot;: &quot;hello&quot;}' --region $region_sqs   Argo Events would capture the message and trigger Argo Workflows to create a workflow for spark jobs.  kubectl get wf -A # Output should look like below NAMESPACE NAME STATUS AGE MESSAGE argo-workflows aws-sqs-spark-workflow-hh79p Running 11s   Run the command below to check spark application driver pods and executor pods under spark-team-a namespace.  kubectl get po -n spark-team-a # Output should look like below NAME READY STATUS RESTARTS AGE event-wf-sparkapp-tcxl8-driver 1/1 Running 0 45s pythonpi-a72f5f89894363d2-exec-1 1/1 Running 0 16s pythonpi-a72f5f89894363d2-exec-2 1/1 Running 0 16s   See the SQS workflow status in web UI      ","version":"Next","tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"Argo Workflows on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/argo-workflows-eks#destroy","content":" To teardown and remove the resources created in this example:  kubectl delete -f argo-events-manifests/. ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"AWS Batch on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-batch","content":"","keywords":"","version":"Next"},{"title":"Considerations​","type":1,"pageTitle":"AWS Batch on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-batch#considerations","content":" AWS Batch is meant for offline analytics and data processing tasks, such as reformatting media, training ML models, batch inference, or other compute and data intensive tasks that are not interactive with a user.  In particular, Batch is tuned for running jobs that are greater than three minutes. If your jobs are short (less than a minute), consider packing more work into a single AWS Batch job request to increase the total runtime of the job.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"AWS Batch on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-batch#prerequisites","content":" Ensure that you have the following tools installed locally:  aws clikubectlterraform  ","version":"Next","tagName":"h2"},{"title":"Deploy​","type":1,"pageTitle":"AWS Batch on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-batch#deploy","content":" To provision this example:  Clone the repository to your local machine. git clone https://github.com/awslabs/data-on-eks.git cd data-on-eks/schedulers/terraform/aws-batch Run the install script. /bin/sh install.sh Enter region at command prompt to continue.  The script will run Terraform to stand up all of the resources. Once done, you will see terraform output like below.    The following components are provisioned in your environment:  A sample VPC, with 2 Private Subnets and 2 Public SubnetsInternet gateway for Public Subnets and NAT Gateway for Private SubnetsEKS Cluster Control plane with one managed node group.EKS Managed Add-ons: VPC_CNI, CoreDNS, EBS_CSI_Driver, CloudWatchAWS Batch resources including An On-Demand compute environment and job queueA Spot compute environment and job queueAn example Batch job definition to run echo &quot;hello world!&quot;  ","version":"Next","tagName":"h2"},{"title":"Validate​","type":1,"pageTitle":"AWS Batch on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-batch#validate","content":" ","version":"Next","tagName":"h2"},{"title":"Run an example job on your EKS cluster using AWS Batch​","type":1,"pageTitle":"AWS Batch on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-batch#run-an-example-job-on-your-eks-cluster-using-aws-batch","content":" The following command will update the kubeconfig on your local machine and allow you to interact with your EKS Cluster using kubectl to validate the deployment.  ","version":"Next","tagName":"h2"},{"title":"Run update-kubeconfig command​","type":1,"pageTitle":"AWS Batch on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-batch#run-update-kubeconfig-command","content":" Run the command from the configure_kubectl_cmd output value from terraform apply. If you do not have this available, you can get the terraform stack output values using the terraform output command.  # DO NOT COPY THIS! This is only an example, see above for what to run. aws eks --region us-east-1 update-kubeconfig --name doeks-batch   ","version":"Next","tagName":"h3"},{"title":"List the nodes​","type":1,"pageTitle":"AWS Batch on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-batch#list-the-nodes","content":" Once kubectl is configured, you can use it to inspect the cluster nodes and namespaces. To get the node information, run the following command.  kubectl get nodes   The output should look like the following.  NAME STATUS ROLES AGE VERSION ip-10-1-107-168.ec2.internal Ready &lt;none&gt; 3m7s v1.30.2-eks-1552ad0 ip-10-1-141-25.ec2.internal Ready &lt;none&gt; 3m7s v1.30.2-eks-1552ad0   To get the created namespaces of the cluster, run the following command.  kubectl get ns   The output should look like the following.  NAME STATUS AGE amazon-cloudwatch Active 2m22s default Active 10m doeks-aws-batch Active 103s kube-node-lease Active 10m kube-public Active 10m kube-system Active 10m   The namespace doeks-aws-batch will be used by Batch to add Batch-managed EC2 instances for nodes and run jobs on these nodes.  note The AWS Batch kubernetes namespace is configurable as an input variable to terraform. If you chose to change it in the variables.tf file, then you will need to adjust later commands to account for the change.  ","version":"Next","tagName":"h3"},{"title":"Running the \"Hello World!\" job​","type":1,"pageTitle":"AWS Batch on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-batch#running-the-hello-world-job","content":" The output of terraform apply contained the AWS CLI command to run the example Hello World! job definition on both the On-Demand and Spot job queues. You can view these commands again using terraform output.  To run the example job definition on the On-Demand resources:  Run the provided command from the terraform output run_example_aws_batch_job. It should look something like: JOB_ID=$(aws batch --region us-east-1 submit-job --job-definition arn:aws:batch:us-east-1:653295002771:job-definition/doeks-hello-world:2 --job-queue doeks-JQ1_OD --job-name doeks_hello_example --output text --query jobId) &amp;&amp; echo $JOB_ID ## Output should be the Batch job ID be1f781d-753e-4d10-a7d4-1b6de68574fc The response will populate the JOB_ID shell variable, which you can use in later steps.  ","version":"Next","tagName":"h3"},{"title":"Checking the status​","type":1,"pageTitle":"AWS Batch on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-batch#checking-the-status","content":" You can use the AWS CLI to check the status of the job from the AWS Batch API:  aws batch --no-cli-pager \\ describe-jobs --jobs $JOB_ID --query &quot;jobs[].[jobId,status]&quot;   This will output something like the following:  [ [ &quot;a13e1cff-121c-4a0b-a9c5-fab953136e20&quot;, &quot;RUNNABLE&quot; ] ]   If you see an empty result, it is likely that you are using a different default AWS Region than the one that was deployed to. Adjust the value of your default Region by setting the AWS_DEFAULT_REGION shell variable. export AWS_DEFAULT_REGION=us-east-1   We can monitor the status of Nodes and Pods that Batch manages using kubectl. First, let's track the nodes as they launch and join the cluster:  kubectl get nodes -w   This will continuously monitor the state of EKS Nodes, and periodically output their ready state.  NAME STATUS ROLES AGE VERSION ip-10-1-107-168.ec2.internal Ready &lt;none&gt; 12m v1.30.2-eks-1552ad0 ip-10-1-141-25.ec2.internal Ready &lt;none&gt; 12m v1.30.2-eks-1552ad0 ip-10-1-60-65.ec2.internal NotReady &lt;none&gt; 0s v1.30.2-eks-1552ad0 ip-10-1-60-65.ec2.internal NotReady &lt;none&gt; 0s v1.30.2-eks-1552ad0 ip-10-1-60-65.ec2.internal NotReady &lt;none&gt; 0s v1.30.2-eks-1552ad0 # ... more lines   When the new Batch-managed nodes are launching (new nodes with NotReady status), you can press the Control-c key combination to exit the watch process. This will allow you to monitor the state of pods launching in the AWS Batch namespace:  kubectl get pods -n doeks-aws-batch -w   note The AWS Batch kubernetes namespace is configurable as an input variable to terraform. If you chose to change it in the variables.tf file, then you will need to adjust the previous command to account for the change.  This will continuously monitor the state of the Pods that Batch places on the cluster, and periodically output their state.  NAME READY STATUS RESTARTS AGE aws-batch.32d8f53f-29dc-31b4-9ce4-13504ccf74c1 0/1 Pending 0 0s aws-batch.32d8f53f-29dc-31b4-9ce4-13504ccf74c1 0/1 ContainerCreating 0 0s aws-batch.32d8f53f-29dc-31b4-9ce4-13504ccf74c1 1/1 Running 0 17s aws-batch.32d8f53f-29dc-31b4-9ce4-13504ccf74c1 0/1 Completed 0 52s aws-batch.32d8f53f-29dc-31b4-9ce4-13504ccf74c1 0/1 Completed 0 53s aws-batch.32d8f53f-29dc-31b4-9ce4-13504ccf74c1 0/1 Terminating 0 53s aws-batch.32d8f53f-29dc-31b4-9ce4-13504ccf74c1 0/1 Terminating 0 53s   Once the Pods are Terminating, you can exit the watch process by hitting the Control-c key combination. To view the status of the job from AWS Batch, use to following command:  aws batch --no-cli-pager \\ describe-jobs --jobs $JOB_ID --query &quot;jobs[].[jobId,status]&quot;   This will show the job ID and the status, which should be SUCCEEDED.  [ [ &quot;a13e1cff-121c-4a0b-a9c5-fab953136e20&quot;, &quot;SUCCEEDED&quot; ] ]   To find the application container logs in the CloudWatch Log Groups management console, we will need the application container's Pod name. The kubestl get pods output did not give us a good way to determine which of those Pods was the one with the application container. Also, once Pods are terminated, the Kubernetes scheduler can no longer provide any information on the job's nodes or Pods. Good thing that AWS Batch keeps a record of the job!  We can use AWS Batch's API to query for the main node's podName and other information. To get information on a specific node from an MNP job, you suffix the job ID with the pattern &quot;#&lt;NODE_INDEX&gt;&quot;. For the main node, which we defined as index &quot;0&quot; in our job definition, that would translate to the following AWS CLI command:  aws batch describe-jobs --jobs &quot;$JOB_ID&quot; --query &quot;jobs[].eksAttempts[].{nodeName: nodeName, podName: podName}&quot;   The output should be similar to the following.  [ { &quot;nodeName&quot;: &quot;ip-10-1-60-65.ec2.internal&quot;, &quot;podName&quot;: &quot;aws-batch.32d8f53f-29dc-31b4-9ce4-13504ccf74c1&quot; } ]   To view the application container logs:  Navigate to the Amazon CloudWatch management console Log Groups panel.In the Log groups listing table, choose the application logs for your cluster. These are identified by your cluster's name, and the suffix application.In the Log streams listing table, enter the value for podName from the previous step. This will highlight two logs for the two containers in the Pod. Choose the log stream for the application container.In the Log events section, in the filter bar, choose Display then choose **View in plain text&quot;. You should see the log messages &quot;Hello World!&quot; in the &quot;log&quot; property of the log event.  ","version":"Next","tagName":"h2"},{"title":"Cleaning up​","type":1,"pageTitle":"AWS Batch on EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-batch#cleaning-up","content":" To clean up your environment—remove all AWS Batch resources and kubernetes constructs from your cluster—run the cleanup.sh script.  chmod +x cleanup.sh ./cleanup.sh   To avoid data charges from CloudWatch logs, you should also delete the log groups from your cluster. You can find these by navigating to the Log groups page of the CloudWatch management console. ","version":"Next","tagName":"h2"},{"title":"Amazon Managed Workflows for Apache Airflow (MWAA)","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-managed-airflow","content":"","keywords":"","version":"Next"},{"title":"Considerations​","type":1,"pageTitle":"Amazon Managed Workflows for Apache Airflow (MWAA)","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-managed-airflow#considerations","content":" Ideally we recommend adding the steps to sync requirements/sync dags to the MWAA S3 Bucket as part of a CI/CD pipeline. Generally Dags development have a different lifecycle than the Terraform code to provision infrastructure. For simplicity, we are providing steps for that using Terraform running AWS CLI commands on null_resource.  ","version":"Next","tagName":"h3"},{"title":"Prerequisites:​","type":1,"pageTitle":"Amazon Managed Workflows for Apache Airflow (MWAA)","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-managed-airflow#prerequisites","content":" Ensure that you have the following tools installed locally:  aws clikubectlterraform  ","version":"Next","tagName":"h2"},{"title":"Deploy​","type":1,"pageTitle":"Amazon Managed Workflows for Apache Airflow (MWAA)","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-managed-airflow#deploy","content":" To provision this example:  git clone https://github.com/awslabs/data-on-eks.git cd data-on-eks/schedulers/terraform/managed-airflow-mwaa chmod +x install.sh ./install.sh   Enter region at command prompt to continue.  Once done, you will see terraform output like below.    The following components are provisioned in your environment:  A sample VPC, 3 Private Subnets and 3 Public SubnetsInternet gateway for Public Subnets and NAT Gateway for Private SubnetsEKS Cluster Control plane with one managed node groupEKS Managed Add-ons: VPC_CNI, CoreDNS, Kube_Proxy, EBS_CSI_DriverK8S metrics server and cluster autoscalerA MWAA environment in version 2.2.2An EMR virtual cluster registered with the newly created EKSA S3 bucket with DAG code  ","version":"Next","tagName":"h2"},{"title":"Validate​","type":1,"pageTitle":"Amazon Managed Workflows for Apache Airflow (MWAA)","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-managed-airflow#validate","content":" The following command will update the kubeconfig on your local machine and allow you to interact with your EKS Cluster using kubectl to validate the deployment.  ","version":"Next","tagName":"h2"},{"title":"Run update-kubeconfig command​","type":1,"pageTitle":"Amazon Managed Workflows for Apache Airflow (MWAA)","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-managed-airflow#run-update-kubeconfig-command","content":" Run the command below. You may also copy the command from the terraform output 'configure_kubectl'.  aws eks --region us-west-2 update-kubeconfig --name managed-airflow-mwaa   ","version":"Next","tagName":"h3"},{"title":"List the nodes​","type":1,"pageTitle":"Amazon Managed Workflows for Apache Airflow (MWAA)","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-managed-airflow#list-the-nodes","content":" kubectl get nodes # Output should look like below NAME STATUS ROLES AGE VERSION ip-10-0-0-42.ec2.internal Ready &lt;none&gt; 5h15m v1.26.4-eks-0a21954 ip-10-0-22-71.ec2.internal Ready &lt;none&gt; 5h15m v1.26.4-eks-0a21954 ip-10-0-44-63.ec2.internal Ready &lt;none&gt; 5h15m v1.26.4-eks-0a21954   ","version":"Next","tagName":"h3"},{"title":"List the namespaces in EKS cluster​","type":1,"pageTitle":"Amazon Managed Workflows for Apache Airflow (MWAA)","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-managed-airflow#list-the-namespaces-in-eks-cluster","content":" kubectl get ns # Output should look like below default Active 4h38m emr-mwaa Active 4h34m kube-node-lease Active 4h39m kube-public Active 4h39m kube-system Active 4h39m mwaa Active 4h30m   namespace emr-mwaa will be used by EMR for running spark jobs. namespace mwaa will be used by MWAA directly.  ","version":"Next","tagName":"h3"},{"title":"Trigger jobs from MWAA​","type":1,"pageTitle":"Amazon Managed Workflows for Apache Airflow (MWAA)","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-managed-airflow#trigger-jobs-from-mwaa","content":" ","version":"Next","tagName":"h2"},{"title":"Log into Apache Airflow UI​","type":1,"pageTitle":"Amazon Managed Workflows for Apache Airflow (MWAA)","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-managed-airflow#log-into-apache-airflow-ui","content":" Open the Environments page on the Amazon MWAA consoleChoose an environmentUnder the Details section, click the link for the Airflow UI   Note: You will see red error message once login. That is because the EMR connection has not been setup. The message will be gone after following the steps below to set up the connection and login again.  ","version":"Next","tagName":"h3"},{"title":"Trigger the DAG workflow to execute job in EMR on EKS​","type":1,"pageTitle":"Amazon Managed Workflows for Apache Airflow (MWAA)","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-managed-airflow#trigger-the-dag-workflow-to-execute-job-in-emr-on-eks","content":" First, you need to set up the connection to EMR virtual cluster in MWAA    Click Add button, Make sure use emr_eks as Connection Id Amazon Web Services as Connection Type Replace the value in Extra based on your terraform output {&quot;virtual_cluster_id&quot;:&quot;&lt;emrcontainers_virtual_cluster_id in terraform output&gt;&quot;, &quot;job_role_arn&quot;:&quot;&lt;emr_on_eks_role_arn in terraform output&gt;&quot;}    Go back to Airflow UI main page, enable the example DAG emr_eks_pi_job and then trigger the job.    While it is running, use the following command to verify the spark jobs:  kubectl get all -n emr-mwaa   You should see output similar to the following:  NAME READY STATUS RESTARTS AGE pod/000000030tk2ihdmr8g-psstj 3/3 Running 0 90s pod/pythonpi-a8051f83b415c911-exec-1 2/2 Running 0 14s pod/pythonpi-a8051f83b415c911-exec-2 2/2 Running 0 14s pod/spark-000000030tk2ihdmr8g-driver 2/2 Running 0 56s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/spark-000000030tk2ihdmr8g-ee64be83b4151dd5-driver-svc ClusterIP None &lt;none&gt; 7078/TCP,7079/TCP,4040/TCP 57s NAME COMPLETIONS DURATION AGE job.batch/000000030tk2ihdmr8g 0/1 92s 92s   You can also check the job status in Amazon EMR console. Under the Virtual clusters section, click on Virtual cluster    ","version":"Next","tagName":"h3"},{"title":"Trigger the DAG workflow to execute job in EKS​","type":1,"pageTitle":"Amazon Managed Workflows for Apache Airflow (MWAA)","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-managed-airflow#trigger-the-dag-workflow-to-execute-job-in-eks","content":" In the Airflow UI, enable the example DAG kubernetes_pod_example and then trigger it.      Verify that the pod was executed successfully  After it runs and completes successfully, use the following command to verify the pod:  kubectl get pods -n mwaa   You should see output similar to the following:  NAME READY STATUS RESTARTS AGE mwaa-pod-test.4bed823d645844bc8e6899fd858f119d 0/1 Completed 0 25s   ","version":"Next","tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"Amazon Managed Workflows for Apache Airflow (MWAA)","url":"/data-on-eks/docs/blueprints/job-schedulers/aws-managed-airflow#destroy","content":" To clean up your environment, run the cleanup.sh script.script  chmod +x cleanup.sh ./cleanup.sh    ","version":"Next","tagName":"h2"},{"title":"Streaming Platforms on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/streaming-platforms","content":"Streaming Platforms on EKS info Note: The blueprints for streaming platforms are currently in the process of development. Documentation will be updated once a deployment example has been added to the repository. Running streaming platforms on Kubernetes can provide a number of benefits for organizations looking to process and analyze real-time data streams. Kubernetes provides features such as automatic scaling, rolling updates, and self-healing capabilities to ensure high availability and reliability of streaming platforms. There are a number of popular streaming platforms that have emerged to support this use case, including Apache Kafka, Apache Flink, and Apache Pulsar. These platforms make it easy to process and analyze real-time data streams in a containerized environment, and provide features such as real-time data processing, event-driven architecture, and fault-tolerance. By leveraging the power of Kubernetes, organizations can focus on building and processing their streaming data pipelines, rather than worrying about the underlying infrastructure. With its robust ecosystem of tools and support for a wide range of use cases, Kubernetes is becoming an increasingly popular choice for running streaming platforms in production. KafkaFlink","keywords":"","version":"Next"},{"title":"Self-managed Apache Airflow deployment on Amazon EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Self-managed Apache Airflow deployment on Amazon EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow#introduction","content":" This pattern deploys self-managed Apache Airflow deployment on EKS. This blueprint deploys Airflow on Amazon EKS managed node groups and leverages Karpenter to run the workloads.  Architecture    This pattern uses opinionated defaults to keep the deployment experience simple but also keeps it flexible so that you can pick and choose necessary add-ons during deployment. We recommend keeping the defaults and only customize if you have viable alternative option available for replacement.  In terms of infrastructure, below are the resources that are created by this pattern:  EKS Cluster Control plane with public endpoint (recommended for demo/poc environment) One managed node group Core Node group with 3 instances spanning multi-AZs for running Apache Airflow and other system critical pods. e.g., Cluster Autoscaler, CoreDNS, Observability, Logging etc. Apache Airflow core components (with airflow-core.tf): Amazon RDS PostgreSQL instance and security group for Airflow meta database.Airflow namespaceKubernetes service accounts and AWS IAM roles for service account (IRSA) for Airflow Webserver, Airflow Scheduler, and Airflow Worker.Amazon Elastic File System (EFS), EFS mounts, Kubernetes Storage Class for EFS, and Kubernetes Persistent Volume Claim for mounting Airflow DAGs for Airflow pods.Amazon S3 log bucket for Airflow logs  AWS for FluentBit is employed for logging, and a combination of Prometheus, Amazon Managed Prometheus, and open source Grafana are used for observability. You can see the complete list of add-ons available below.  tip We recommend running all the default system add-ons on a dedicated EKS managed nodegroup such as core-node-group as provided by this pattern.  danger We don't recommend removing critical add-ons (Amazon VPC CNI, CoreDNS, Kube-proxy).  Add-on\tEnabled by default?\tBenefits\tLinkAmazon VPC CNI\tYes\tVPC CNI is available as an EKS add-on and is responsible for creating ENI's and IPv4 or IPv6 addresses for your spark application pods\tVPC CNI Documentation CoreDNS\tYes\tCoreDNS is available as an EKS add-on and is responsible for resolving DNS queries for spark application and for Kubernetes cluster\tEKS CoreDNS Documentation Kube-proxy\tYes\tKube-proxy is available as an EKS add-on and it maintains network rules on your nodes and enables network communication to your spark application pods\tEKS kube-proxy Documentation Amazon EBS CSI driver\tYes\tEBS CSI driver is available as an EKS add-on and it allows EKS clusters to manage the lifecycle of EBS volumes\tEBS CSI Driver Documentation Amazon EFS CSI driver\tYes\tThe Amazon EFS Container Storage Interface (CSI) driver provides a CSI interface that allows Kubernetes clusters running on AWS to manage the lifecycle of Amazon EFS file systems.\tEFS CSI Driver Documentation Karpenter\tYes\tKarpenter is nodegroup-less autoscaler that provides just-in-time compute capacity for spark applications on Kubernetes clusters\tKarpenter Documentation Cluster Autoscaler\tYes\tKubernetes Cluster Autoscaler automatically adjusts the size of Kubernetes cluster and is available for scaling nodegroups (such as core-node-group) in the cluster\tCluster Autoscaler Documentation Cluster proportional autoscaler\tYes\tThis is responsible for scaling CoreDNS pods in your Kubernetes cluster\tCluster Proportional Autoscaler Documentation Metrics server\tYes\tKubernetes metrics server is responsible for aggregating cpu, memory and other container resource usage within your cluster\tEKS Metrics Server Documentation Prometheus\tYes\tPrometheus is responsible for monitoring EKS cluster including spark applications in your EKS cluster. We use Prometheus deployment for scraping and ingesting metrics into Amazon Managed Prometheus and Kubecost\tPrometheus Documentation Amazon Managed Prometheus\tYes\tThis is responsible for storing and scaling of EKS cluster and spark application metrics\tAmazon Managed Prometheus Documentation Kubecost\tYes\tKubecost is responsible for providing cost break down by Spark application. You can monitor costs based on per job, namespace or labels\tEKS Kubecost Documentation CloudWatch metrics\tYes\tCloudWatch container insights metrics shows simple and standardized way to monitor not only AWS resources but also EKS resources on CloudWatch dashboard\tCloudWatch Container Insights Documentation AWS for Fluent-bit\tYes\tThis can be used to publish EKS cluster and worker node logs to CloudWatch Logs or 3rd party logging system\tAWS For Fluent-bit Documentation AWS Load Balancer Controller\tYes\tThe AWS Load Balancer Controller manages AWS Elastic Load Balancers for a Kubernetes cluster.\tAWS Load Balancer Controller Documentation  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Self-managed Apache Airflow deployment on Amazon EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow#prerequisites","content":" Ensure that you have installed the following tools on your machine.  aws clikubectlterraform  ","version":"Next","tagName":"h2"},{"title":"Deploying the Solution​","type":1,"pageTitle":"Self-managed Apache Airflow deployment on Amazon EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow#deploying-the-solution","content":" Clone the repository  git clone https://github.com/awslabs/data-on-eks.git   Navigate into self-managed-airflow directory and run install.sh script  cd data-on-eks/schedulers/terraform/self-managed-airflow chmod +x install.sh ./install.sh   ","version":"Next","tagName":"h2"},{"title":"Verify the resources​","type":1,"pageTitle":"Self-managed Apache Airflow deployment on Amazon EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow#verify-the-resources","content":" ","version":"Next","tagName":"h2"},{"title":"Create kubectl config​","type":1,"pageTitle":"Self-managed Apache Airflow deployment on Amazon EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow#create-kubectl-config","content":" Update the placeholder for AWS region and run the below command.  mv ~/.kube/config ~/.kube/config.bk aws eks update-kubeconfig --region &lt;region&gt; --name self-managed-airflow   ","version":"Next","tagName":"h3"},{"title":"Describe the EKS Cluster​","type":1,"pageTitle":"Self-managed Apache Airflow deployment on Amazon EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow#describe-the-eks-cluster","content":" aws eks describe-cluster --name self-managed-airflow   ","version":"Next","tagName":"h3"},{"title":"Verify the EFS PV and PVC created by this deployment​","type":1,"pageTitle":"Self-managed Apache Airflow deployment on Amazon EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow#verify-the-efs-pv-and-pvc-created-by-this-deployment","content":" kubectl get pvc -n airflow NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE airflow-dags Bound pvc-157cc724-06d7-4171-a14d-something 10Gi RWX efs-sc 73m kubectl get pv -n airflow NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE pvc-157cc724-06d7-4171-a14d-something 10Gi RWX Delete Bound airflow/airflow-dags efs-sc 74m   ","version":"Next","tagName":"h3"},{"title":"Verify the EFS Filesystem​","type":1,"pageTitle":"Self-managed Apache Airflow deployment on Amazon EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow#verify-the-efs-filesystem","content":" aws efs describe-file-systems --query &quot;FileSystems[*].FileSystemId&quot; --output text   ","version":"Next","tagName":"h3"},{"title":"Verify S3 bucket created for Airflow logs​","type":1,"pageTitle":"Self-managed Apache Airflow deployment on Amazon EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow#verify-s3-bucket-created-for-airflow-logs","content":" aws s3 ls | grep airflow-logs-   ","version":"Next","tagName":"h3"},{"title":"Verify the Airflow deployment​","type":1,"pageTitle":"Self-managed Apache Airflow deployment on Amazon EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow#verify-the-airflow-deployment","content":" kubectl get deployment -n airflow NAME READY UP-TO-DATE AVAILABLE AGE airflow-pgbouncer 1/1 1 1 77m airflow-scheduler 2/2 2 2 77m airflow-statsd 1/1 1 1 77m airflow-triggerer 1/1 1 1 77m airflow-webserver 2/2 2 2 77m   ","version":"Next","tagName":"h3"},{"title":"Fetch Postgres RDS password​","type":1,"pageTitle":"Self-managed Apache Airflow deployment on Amazon EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow#fetch-postgres-rds-password","content":" Amazon Postgres RDS database password can be fetched from the Secrets manager  Login to AWS console and open secrets managerClick on postgres secret nameClick on Retrieve secret value button to verify the Postgres DB master password  ","version":"Next","tagName":"h3"},{"title":"Login to Airflow Web UI​","type":1,"pageTitle":"Self-managed Apache Airflow deployment on Amazon EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow#login-to-airflow-web-ui","content":" This deployment creates an Ingress object with public LoadBalancer(internal # Private Load Balancer can only be accessed within the VPC) for demo purpose For production workloads, you can modify airflow-values.yaml to choose internal LB. In addition, it's also recommended to use Route53 for Airflow domain and ACM for generating certificates to access Airflow on HTTPS port.  Execute the following command to get the ALB DNS name  kubectl get ingress -n airflow NAME CLASS HOSTS ADDRESS PORTS AGE airflow-airflow-ingress alb * k8s-dataengineering-c92bfeb177-randomnumber.us-west-2.elb.amazonaws.com 80 88m   The above ALB URL will be different for you deployment. So use your URL and open it in a browser  e.g., Open URL http://k8s-dataengineering-c92bfeb177-randomnumber.us-west-2.elb.amazonaws.com/ in a browser  By default, Airflow creates a default user with admin and password as admin  Login with Admin user and password and create new users for Admin and Viewer roles and delete the default admin user  ","version":"Next","tagName":"h3"},{"title":"Execute Sample Airflow Job​","type":1,"pageTitle":"Self-managed Apache Airflow deployment on Amazon EKS","url":"/data-on-eks/docs/blueprints/job-schedulers/self-managed-airflow#execute-sample-airflow-job","content":" Login to Airflow WebUIClick on DAGs link on the top of the page. This will show dags pre-created by the GitSync featureExecute the hello_world_scheduled_dag DAG by clicking on Play button (&gt;)Verify the DAG execution from Graph linkAll the Tasks will go green after few minutesClick on one of the green Task which opens a popup with log link where you can verify the logs pointing to S3  Airflow to run Spark workloads with Karpenter 👈  Cleanup 👈  caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment ","version":"Next","tagName":"h3"},{"title":"EMR on EKS with Flink Streaming","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-flink","content":"","keywords":"","version":"Next"},{"title":"Introduction to Apache Flink​","type":1,"pageTitle":"EMR on EKS with Flink Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-flink#introduction-to-apache-flink","content":" Apache Flink is an open-source, unified stream processing and batch processing framework that was designed to process large amounts of data. It provides fast, reliable, and scalable data processing with fault tolerance and exactly-once semantics. Some of the key features of Flink are:  Distributed Processing: Flink is designed to process large volumes of data in a distributed fashion, making it horizontally scalable and fault-tolerant.Stream Processing and Batch Processing: Flink provides APIs for both stream processing and batch processing. This means you can process data in real-time, as it's being generated, or process data in batches.Fault Tolerance: Flink has built-in mechanisms for handling node failures, network partitions, and other types of failures.Exactly-once Semantics: Flink supports exactly-once processing, which ensures that each record is processed exactly once, even in the presence of failures.Low Latency: Flink's streaming engine is optimized for low-latency processing, making it suitable for use cases that require real-time processing of data.Extensibility: Flink provides a rich set of APIs and libraries, making it easy to extend and customize to fit your specific use case.  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"EMR on EKS with Flink Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-flink#architecture","content":" Flink Architecture high level design with EKS.    ","version":"Next","tagName":"h2"},{"title":"EMR on EKS Flink Kubernetes Operator​","type":1,"pageTitle":"EMR on EKS with Flink Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-flink#emr-on-eks-flink-kubernetes-operator","content":" Amazon EMR releases 6.13.0 and higher support Amazon EMR on EKS with Apache Flink, or the , as a job submission model for Amazon EMR on EKS. With Amazon EMR on EKS with Apache Flink, you can deploy and manage Flink applications with the Amazon EMR release runtime on your own Amazon EKS clusters. Once you deploy the Flink Kubernetes operator in your Amazon EKS cluster, you can directly submit Flink applications with the operator. The operator manages the lifecycle of Flink applications.  Running, suspending and deleting applicationsStateful and stateless application upgradesTriggering and managing savepointsHandling errors, rolling-back broken upgrades  In addition to the above features, EMR Flink Kubernetes operator provides the following additional capabilities:  Launching Flink application using jars in Amazon S3Monitoring integration with Amazon S3 and Amazon CloudWatch and container log rotation.Automatically tunes Autoscaler configurations based on historical trends of observed metrics.Faster Flink Job Restart during scaling or Failure RecoveryIRSA (IAM Roles for Service Accounts) Native IntegrationPyflink support  Flink Operator defines two types of Custom Resources(CR) which are the extensions of the Kubernetes API.  FlinkDeploymentFlinkSessionJob FlinkDeployment FlinkDeployment CR defines Flink Application and Session Cluster deployments. Application deployments manage a single job deployment on a dedicated Flink cluster in Application mode. Session clusters allows you to run multiple Flink Jobs on an existing Session cluster. FlinkDeployment in Application modes, Click to toggle content! apiVersion: flink.apache.org/v1beta1 kind: FlinkDeployment metadata: namespace: default name: basic-example spec: image: flink:1.16 flinkVersion: v1_16 flinkConfiguration: taskmanager.numberOfTaskSlots: &quot;2&quot; serviceAccount: flink jobManager: resource: memory: &quot;2048m&quot; cpu: 1 taskManager: resource: memory: &quot;2048m&quot; cpu: 1 job: jarURI: local:///opt/flink/examples/streaming/StateMachineExample.jar parallelism: 2 upgradeMode: stateless state: running   info Session clusters use a similar spec to Application clusters with the only difference that job is not defined in the yaml spec.  info According to the Flink documentation, it is recommended to use FlinkDeployment in Application mode for production environments.  On top of the deployment types the Flink Kubernetes Operator also supports two modes of deployments: Native and Standalone.  NativeStandalone Native Native cluster deployment is the default deployment mode and uses Flink’s built in integration with Kubernetes when deploying the cluster.Flink cluster communicates directly with Kubernetes and allows it to manage Kubernetes resources, e.g. dynamically allocate and de-allocate TaskManager pods.Flink Native can be useful for advanced users who want to build their own cluster management system or integrate with existing management systems.Flink Native allows for more flexibility in terms of job scheduling and execution.For standard Operator use, running your own Flink Jobs in Native mode is recommended. apiVersion: flink.apache.org/v1beta1 kind: FlinkDeployment ... spec: ... mode: native   ","version":"Next","tagName":"h2"},{"title":"Best Practices for Running Flink Jobs on Kubernetes​","type":1,"pageTitle":"EMR on EKS with Flink Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-flink#best-practices-for-running-flink-jobs-on-kubernetes","content":" To get the most out of Flink on Kubernetes, here are some best practices to follow:  Use the Kubernetes Operator: Install and use the Flink Kubernetes Operator to automate the deployment and management of Flink clusters on Kubernetes.Deploy in dedicated namespaces: Create a separate namespace for the Flink Kubernetes Operator and another one for Flink jobs/workloads. This ensures that the Flink jobs are isolated and have their own resources.Use high-quality storage: Store Flink checkpoints and savepoints in high-quality storage such as Amazon S3 or another durable external storage. These storage options are reliable, scalable, and offer durability for large volumes of data.Optimize resource allocation: Allocate sufficient resources to Flink jobs to ensure optimal performance. This can be done by setting resource requests and limits for Flink containers.Proper network isolation: Use Kubernetes Network Policies to isolate Flink jobs from other workloads running on the same Kubernetes cluster. This ensures that Flink jobs have the required network access without being impacted by other workloads.Configure Flink optimally: Tune Flink settings according to your use case. For example, adjust Flink's parallelism settings to ensure that Flink jobs are scaled appropriately based on the size of the input data.Use checkpoints and savepoints: Use checkpoints for periodic snapshots of Flink application state and savepoints for more advanced use cases such as upgrading or downgrading the application.Store checkpoints and savepoints in the right places: Store checkpoints in distributed file systems or key-value stores like Amazon S3 or another durable external storage. Store savepoints in a durable external storage like Amazon S3.  ","version":"Next","tagName":"h2"},{"title":"Flink Upgrade​","type":1,"pageTitle":"EMR on EKS with Flink Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-flink#flink-upgrade","content":" Flink Operator provides three upgrade modes for Flink jobs. Checkout the Flink upgrade docs for up-to-date information.  stateless: Stateless application upgrades from empty statelast-state: Quick upgrades in any application state (even for failing jobs), does not require a healthy job as it always uses the latest checkpoint information. Manual recovery may be necessary if HA metadata is lost.savepoint: Use savepoint for upgrade, providing maximal safety and possibility to serve as backup/fork point. The savepoint will be created during the upgrade process. Note that the Flink job needs to be running to allow the savepoint to get created. If the job is in an unhealthy state, the last checkpoint will be used (unless kubernetes.operator.job.upgrade.last-state-fallback.enabled is set to false). If the last checkpoint is not available, the job upgrade will fail.  info last-state or savepoint are recommended modes for production  Deploying the Solution 👈  Execute Sample Flink job with Karpenter 👈  Cleanup 👈  caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment ","version":"Next","tagName":"h2"},{"title":"EMR on EKS with Spark Streaming","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream","content":"","keywords":"","version":"Next"},{"title":"Spark examples - read stream from MSK​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#spark-examples---read-stream-from-msk","content":" Spark consumer applications reading from Amazon MSK:  1. Run a job with EMR on EKS2. Same job with Fargate on EMR on EKS3. Same job with EMR on EC2  ","version":"Next","tagName":"h2"},{"title":"Spark examples - read stream from Kinesis​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#spark-examples---read-stream-from-kinesis","content":" 1. (Optional) Build a custom docker image2. Run a job with kinesis-sql connector3. Run a job with Spark's DStream  ","version":"Next","tagName":"h2"},{"title":"Deploy Infrastructure​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#deploy-infrastructure","content":" The provisioning takes about 30 minutes to complete. Two ways to deploy:  AWS CloudFormation template (CFN)AWS Cloud Development Kit (AWS CDK).  ","version":"Next","tagName":"h2"},{"title":"CloudFormation Deployment​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#cloudformation-deployment","content":" Region\tLaunch Template---------------------------\t----------------------- US East (N. Virginia)\t  To launch in a different AWS Region, check out the following customization section, or use the CDK deployment option.  ","version":"Next","tagName":"h3"},{"title":"Customization​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#customization","content":" You can customize the solution, such as set to a different region, then generate the CFN templates in your required region:  export BUCKET_NAME_PREFIX=&lt;my-bucket-name&gt; # bucket where customized code will reside export AWS_REGION=&lt;your-region&gt; export SOLUTION_NAME=emr-stream-demo export VERSION=v2.0.0 # version number for the customized code cd data-on-eks/analytics/cdk/stream-emr-on-eks ./deployment/build-s3-dist.sh $BUCKET_NAME_PREFIX $SOLUTION_NAME $VERSION # create the bucket where customized code will reside aws s3 mb s3://$BUCKET_NAME_PREFIX-$AWS_REGION --region $AWS_REGION # Upload deployment assets to the S3 bucket aws s3 cp ./deployment/global-s3-assets/ s3://$BUCKET_NAME_PREFIX-$AWS_REGION/$SOLUTION_NAME/$VERSION/ --recursive --acl bucket-owner-full-control aws s3 cp ./deployment/regional-s3-assets/ s3://$BUCKET_NAME_PREFIX-$AWS_REGION/$SOLUTION_NAME/$VERSION/ --recursive --acl bucket-owner-full-control echo -e &quot;\\nIn web browser, paste the URL to launch the template: https://console.aws.amazon.com/cloudformation/home?region=$AWS_REGION#/stacks/quickcreate?stackName=emr-stream-demo&amp;templateURL=https://$BUCKET_NAME_PREFIX-$AWS_REGION.s3.amazonaws.com/$SOLUTION_NAME/$VERSION/emr-stream-demo.template\\n&quot;   ","version":"Next","tagName":"h3"},{"title":"CDK Deployment​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#cdk-deployment","content":" Prerequisites​  Install the following tools:  Python 3.6 +.Node.js 10.3.0 +AWS CLI. Configure the CLI by aws configure.CDK toolkitOne-off CDK bootstrap for the first time deployment.  Deploy​  python3 -m venv .env source .env/bin/activate pip install -r requirements.txt cdk deploy   ","version":"Next","tagName":"h3"},{"title":"Post-deployment​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#post-deployment","content":" The following post-deployment.sh is executable in Linux, not for Mac OSX. Modify the script if needed.  Open the &quot;Kafka Client&quot; IDE in Cloud9 console. Create one if the Cloud9 IDE doesn't exist.  VPC prefix: 'emr-stream-demo' Instance Type: 't3.small'   Attach the IAM role that contains Cloud9Admin to your IDE. Turn off AWS managed temporary credentials in Cloud9:  curl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot; -o &quot;awscliv2.zip&quot; unzip awscliv2.zip sudo ./aws/install --update /usr/local/bin/aws cloud9 update-environment --environment-id $C9_PID --managed-credentials-action DISABLE rm -vf ${HOME}/.aws/credentials   Run the script to configure the cloud9 IDE environment:  curl https://raw.githubusercontent.com/aws-samples/stream-emr-on-eks/main/deployment/app_code/post-deployment.sh | bash   Wait for 5 mins, then check the MSK cluster status. Make sure it is active before sending data to the cluster.Launching a new terminal window in Cloud9, send the sample data to MSK:  wget https://github.com/xuite627/workshop_flink1015-1/raw/master/dataset/nycTaxiRides.gz zcat nycTaxiRides.gz | split -l 10000 --filter=&quot;kafka_2.12-2.8.1/bin/kafka-console-producer.sh --broker-list ${MSK_SERVER} --topic taxirides ; sleep 0.2&quot; &gt; /dev/null   Launching the 3rd terminal window and monitor the source MSK topic:  kafka_2.12-2.8.1/bin/kafka-console-consumer.sh \\ --bootstrap-server ${MSK_SERVER} \\ --topic taxirides \\ --from-beginning   ","version":"Next","tagName":"h2"},{"title":"MSK integration​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#msk-integration","content":" ","version":"Next","tagName":"h2"},{"title":"1. Submit a job with EMR on EKS​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#1-submit-a-job-with-emr-on-eks","content":" Sample job to consume data stream in MSKSubmit the job:  aws emr-containers start-job-run \\ --virtual-cluster-id $VIRTUAL_CLUSTER_ID \\ --name msk_consumer \\ --execution-role-arn $EMR_ROLE_ARN \\ --release-label emr-5.33.0-latest \\ --job-driver '{ &quot;sparkSubmitJobDriver&quot;:{ &quot;entryPoint&quot;: &quot;s3://'$S3BUCKET'/app_code/job/msk_consumer.py&quot;, &quot;entryPointArguments&quot;:[&quot;'$MSK_SERVER'&quot;,&quot;s3://'$S3BUCKET'/stream/checkpoint/emreks&quot;,&quot;emreks_output&quot;], &quot;sparkSubmitParameters&quot;: &quot;--conf spark.jars.packages=org.apache.spark:spark-sql-kafka-0-10_2.11:2.4.7 --conf spark.cleaner.referenceTracking.cleanCheckpoints=true --conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.driver.memory=2G --conf spark.executor.cores=2&quot;}}' \\ --configuration-overrides '{ &quot;applicationConfiguration&quot;: [ { &quot;classification&quot;: &quot;spark-defaults&quot;, &quot;properties&quot;: { &quot;spark.kubernetes.driver.podTemplateFile&quot;:&quot;s3://'$S3BUCKET'/app_code/job/driver_template.yaml&quot;,&quot;spark.kubernetes.executor.podTemplateFile&quot;:&quot;s3://'$S3BUCKET'/app_code/job/executor_template.yaml&quot; } } ], &quot;monitoringConfiguration&quot;: { &quot;s3MonitoringConfiguration&quot;: {&quot;logUri&quot;: &quot;s3://'${S3BUCKET}'/elasticmapreduce/emreks-log/&quot;}} }'   ","version":"Next","tagName":"h3"},{"title":"Verify the job is running:​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#verify-the-job-is-running","content":" # can see the job pod in EKS kubectl get po -n emr # verify in EMR console # in Cloud9, run the consumer tool to check if any data comeing through in the target Kafka topic kafka_2.12-2.8.1/bin/kafka-console-consumer.sh --bootstrap-server ${MSK_SERVER} --topic emreks_output --from-beginning   ","version":"Next","tagName":"h3"},{"title":"Cancel the long-running job (can get job id from the job submission output or in EMR console)​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#cancel-the-long-running-job-can-get-job-id-from-the-job-submission-output-or-in-emr-console","content":" aws emr-containers cancel-job-run --virtual-cluster-id $VIRTUAL_CLUSTER_ID --id &lt;YOUR_JOB_ID&gt;   ","version":"Next","tagName":"h3"},{"title":"2. EMR on EKS with Fargate​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#2-emr-on-eks-with-fargate","content":" Run the same job on the same EKS cluster, but with the serverless option - Fargate compute choice.  To ensure it is picked up by Fargate not by the managed nodegroup on EC2, we will tag the Spark job by a serverless label, which has setup in a Fargate profile previously:  --conf spark.kubernetes.driver.label.type=serverless --conf spark.kubernetes.executor.label.type=serverless   Submit the job to Fargate:  aws emr-containers start-job-run \\ --virtual-cluster-id $VIRTUAL_CLUSTER_ID \\ --name msk_consumer_fg \\ --execution-role-arn $EMR_ROLE_ARN \\ --release-label emr-5.33.0-latest \\ --job-driver '{ &quot;sparkSubmitJobDriver&quot;:{ &quot;entryPoint&quot;: &quot;s3://'$S3BUCKET'/app_code/job/msk_consumer.py&quot;, &quot;entryPointArguments&quot;:[&quot;'$MSK_SERVER'&quot;,&quot;s3://'$S3BUCKET'/stream/checkpoint/emreksfg&quot;,&quot;emreksfg_output&quot;], &quot;sparkSubmitParameters&quot;: &quot;--conf spark.jars.packages=org.apache.spark:spark-sql-kafka-0-10_2.11:2.4.7 --conf spark.cleaner.referenceTracking.cleanCheckpoints=true --conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.driver.memory=2G --conf spark.executor.cores=2 --conf spark.kubernetes.driver.label.type=serverless --conf spark.kubernetes.executor.label.type=serverless&quot;}}' \\ --configuration-overrides '{ &quot;monitoringConfiguration&quot;: { &quot;s3MonitoringConfiguration&quot;: {&quot;logUri&quot;: &quot;s3://'${S3BUCKET}'/elasticmapreduce/emreksfg-log/&quot;}}}'   ","version":"Next","tagName":"h3"},{"title":"Verify the job is running on EKS Fargate​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#verify-the-job-is-running-on-eks-fargate","content":" kubectl get po -n emr # verify in EMR console # in Cloud9, run the consumer tool to check if any data comeing through in the target Kafka topic kafka_2.12-2.8.1/bin/kafka-console-consumer.sh \\ --bootstrap-server ${MSK_SERVER} \\ --topic emreksfg_output \\ --from-beginning   ","version":"Next","tagName":"h3"},{"title":"3. (Optional) Submit step to EMR on EC2​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#3-optional-submit-step-to-emr-on-ec2","content":" cluster_id=$(aws emr list-clusters --cluster-states WAITING --query 'Clusters[?Name==`emr-stream-demo`].Id' --output text) MSK_SERVER=$(echo $MSK_SERVER | cut -d',' -f 2) aws emr add-steps \\ --cluster-id $cluster_id \\ --steps Type=spark,Name=emrec2_stream,Args=[--deploy-mode,cluster,--conf,spark.cleaner.referenceTracking.cleanCheckpoints=true,--conf,spark.executor.instances=2,--conf,spark.executor.memory=2G,--conf,spark.driver.memory=2G,--conf,spark.executor.cores=2,--packages,org.apache.spark:spark-sql-kafka-0-10_2.12:3.0.1,s3://$S3BUCKET/app_code/job/msk_consumer.py,$MSK_SERVER,s3://$S3BUCKET/stream/checkpoint/emrec2,emrec2_output],ActionOnFailure=CONTINUE   ","version":"Next","tagName":"h3"},{"title":"Verify​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#verify","content":" # verify in EMR console # in Cloud9, run the consumer tool to check if any data comeing through in the target Kafka topic kafka_2.12-2.8.1/bin/kafka-console-consumer.sh \\ --bootstrap-server ${MSK_SERVER} \\ --topic emrec2_output \\ --from-beginning   ","version":"Next","tagName":"h3"},{"title":"Kinesis integration​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#kinesis-integration","content":" ","version":"Next","tagName":"h2"},{"title":"1. (Optional) Build custom docker image​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#1-optional-build-custom-docker-image","content":" We will create &amp; delete a kinesis test stream on the fly via boto3, so a custom EMR on EKS docker image to include the Python library is needed. The custom docker image is not compulsory, if you don't need the boto3 and kinesis-sql connector.  Build a image based on EMR on EKS 6.5:  export AWS_REGION=$(aws configure list | grep region | awk '{print $2}') export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account) export ECR_URL=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 895885662937.dkr.ecr.us-west-2.amazonaws.com docker build -t emr6.5_custom . # create ECR repo in current account aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL aws ecr create-repository --repository-name emr6.5_custom_boto3 --image-scanning-configuration scanOnPush=true --region $AWS_REGION # push to ECR docker tag emr6.5_custom $ECR_URL/emr6.5_custom_boto3 docker push $ECR_URL/emr6.5_custom_boto3   ","version":"Next","tagName":"h3"},{"title":"2. Use kinesis-sql connector​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#2-use-kinesis-sql-connector","content":" This demo uses the com.qubole.spark/spark-sql-kinesis_2.12/1.2.0-spark_3.0 connector to interact with Kinesis.  To enable the job-level access control, ie. the IRSA feature, we have forked the kinesis-sql git repo and recompiled a new jar after upgraded the AWS java SDK. The custom docker build above will pick up the upgraded connector automatically.  Sample job to consume data stream in KinesisSubmit the job:  export AWS_REGION=$(aws configure list | grep region | awk '{print $2}') export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account) export ECR_URL=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com aws emr-containers start-job-run \\ --virtual-cluster-id $VIRTUAL_CLUSTER_ID \\ --name kinesis-demo \\ --execution-role-arn $EMR_ROLE_ARN \\ --release-label emr-6.5.0-latest \\ --job-driver '{ &quot;sparkSubmitJobDriver&quot;:{ &quot;entryPoint&quot;: &quot;s3://'$S3BUCKET'/app_code/job/qubole-kinesis.py&quot;, &quot;entryPointArguments&quot;:[&quot;'${AWS_REGION}'&quot;,&quot;s3://'${S3BUCKET}'/qubolecheckpoint&quot;,&quot;s3://'${S3BUCKET}'/qubole-kinesis-output&quot;], &quot;sparkSubmitParameters&quot;: &quot;--conf spark.cleaner.referenceTracking.cleanCheckpoints=true&quot;}}' \\ --configuration-overrides '{ &quot;applicationConfiguration&quot;: [ { &quot;classification&quot;: &quot;spark-defaults&quot;, &quot;properties&quot;: { &quot;spark.kubernetes.container.image&quot;: &quot;'${ECR_URL}'/emr6.5_custom_boto3:latest&quot; } } ], &quot;monitoringConfiguration&quot;: { &quot;s3MonitoringConfiguration&quot;: {&quot;logUri&quot;: &quot;s3://'${S3BUCKET}'/elasticmapreduce/kinesis-fargate-log/&quot;} } }'   ","version":"Next","tagName":"h3"},{"title":"3. Use Spark's DStream​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#3-use-sparks-dstream","content":" This demo uses the spark-streaming-kinesis-asl_2.12 library to read from Kinesis. Check out the Spark's official document. The Spark syntax is slightly different from the spark-sql-kinesis approach. It operates at RDD level.  Sample job to consume data stream from KinesisSubmit the job:  export AWS_REGION=$(aws configure list | grep region | awk '{print $2}') export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account) export ECR_URL=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com aws emr-containers start-job-run \\ --virtual-cluster-id $VIRTUAL_CLUSTER_ID \\ --name kinesis-demo \\ --execution-role-arn $EMR_ROLE_ARN \\ --release-label emr-6.5.0-latest \\ --job-driver '{ &quot;sparkSubmitJobDriver&quot;:{ &quot;entryPoint&quot;: &quot;s3://'$S3BUCKET'/app_code/job/pyspark-kinesis.py&quot;, &quot;entryPointArguments&quot;:[&quot;'${AWS_REGION}'&quot;,&quot;s3://'$S3BUCKET'/asloutput/&quot;], &quot;sparkSubmitParameters&quot;: &quot;--jars https://repo1.maven.org/maven2/org/apache/spark/spark-streaming-kinesis-asl_2.12/3.1.2/spark-streaming-kinesis-asl_2.12-3.1.2.jar,https://repo1.maven.org/maven2/com/amazonaws/amazon-kinesis-client/1.12.0/amazon-kinesis-client-1.12.0.jar&quot;}}' \\ --configuration-overrides '{ &quot;applicationConfiguration&quot;: [ { &quot;classification&quot;: &quot;spark-defaults&quot;, &quot;properties&quot;: { &quot;spark.kubernetes.container.image&quot;: &quot;'${ECR_URL}'/emr6.5_custom_boto3:latest&quot; } } ], &quot;monitoringConfiguration&quot;: { &quot;s3MonitoringConfiguration&quot;: {&quot;logUri&quot;: &quot;s3://'${S3BUCKET}'/elasticmapreduce/kinesis-fargate-log/&quot;} } }'   ","version":"Next","tagName":"h3"},{"title":"Useful commands​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#useful-commands","content":" kubectl get pod -n emr list running Spark jobskubectl delete pod --all -n emr delete all Spark jobskubectl logs &lt;pod name&gt; -n emr check logs against a pod in the emr namespacekubectl get node --label-columns=eks.amazonaws.com/capacityType,topology.kubernetes.io/zone check EKS compute capacity types and AZ distribution.  ","version":"Next","tagName":"h2"},{"title":"Clean up​","type":1,"pageTitle":"EMR on EKS with Spark Streaming","url":"/data-on-eks/docs/blueprints/streaming-platforms/emr-eks-stream#clean-up","content":" Run the clean-up script with:  curl https://raw.githubusercontent.com/aws-samples/stream-emr-on-eks/main/deployment/app_code/delete_all.sh | bash   Go to the CloudFormation console, manually delete the remaining resources if needed. ","version":"Next","tagName":"h2"},{"title":"Apache Kafka","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/streaming-platforms/kafka","content":"","keywords":"","version":"Next"},{"title":"Why and what's KRaft?​","type":1,"pageTitle":"Apache Kafka","url":"/data-on-eks/docs/blueprints/streaming-platforms/kafka#why-and-whats-kraft","content":" KRaft mode simplifies Kafka deployments, enhances scalability, and improves overall system performance. By using a built-in consensus protocol, KRaft reduces operational complexity, potentially speeds up broker startup times, and allows for better handling of metadata operations. This architectural shift enables Kafka to manage larger clusters more efficiently, making it an attractive option for organizations looking to streamline their event streaming infrastructure and prepare for future scalability needs.  ","version":"Next","tagName":"h2"},{"title":"Strimzi for Apache Kafka​","type":1,"pageTitle":"Apache Kafka","url":"/data-on-eks/docs/blueprints/streaming-platforms/kafka#strimzi-for-apache-kafka","content":" Strimzi provides a way to run an Apache Kafka cluster on Kubernetes in various deployment configurations. Strimzi combines security and simple configuration to deploy and manage Kafka on Kubernetes using kubectl and/or GitOps based on the Operator Pattern.  As of version 0.32.0, Strimzi provides full support for deploying Kafka clusters using KRaft, making it easier for organizations to leverage this new architecture. By using Strimzi, you can seamlessly deploy and manage Kafka clusters in KRaft mode on Kubernetes, taking advantage of its custom resource definitions (CRDs) and operators to handle the complexities of configuration and lifecycle management.  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"Apache Kafka","url":"/data-on-eks/docs/blueprints/streaming-platforms/kafka#architecture","content":" info Architecture diagram work in progress  Managed Alternatives 👈  Storage considerations when self-managing Kafka 👈  Deploying the Solution 👈  Create a Kafka cluster 👈  Create Kafka Topic and run Sample test 👈  Grafana Dashboard for Kafka 👈  Cleanup 👈 ","version":"Next","tagName":"h2"},{"title":"Flink Operator on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/streaming-platforms/flink","content":"","keywords":"","version":"Next"},{"title":"Introduction to Apache Flink​","type":1,"pageTitle":"Flink Operator on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/flink#introduction-to-apache-flink","content":" Apache Flink is an open-source, unified stream processing and batch processing framework that was designed to process large amounts of data. It provides fast, reliable, and scalable data processing with fault tolerance and exactly-once semantics. Some of the key features of Flink are:  Distributed Processing: Flink is designed to process large volumes of data in a distributed fashion, making it horizontally scalable and fault-tolerant.Stream Processing and Batch Processing: Flink provides APIs for both stream processing and batch processing. This means you can process data in real-time, as it's being generated, or process data in batches.Fault Tolerance: Flink has built-in mechanisms for handling node failures, network partitions, and other types of failures.Exactly-once Semantics: Flink supports exactly-once processing, which ensures that each record is processed exactly once, even in the presence of failures.Low Latency: Flink's streaming engine is optimized for low-latency processing, making it suitable for use cases that require real-time processing of data.Extensibility: Flink provides a rich set of APIs and libraries, making it easy to extend and customize to fit your specific use case.  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"Flink Operator on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/flink#architecture","content":" Flink Architecture high level design with EKS.    ","version":"Next","tagName":"h2"},{"title":"Flink Kubernetes Operator​","type":1,"pageTitle":"Flink Operator on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/flink#flink-kubernetes-operator","content":" Flink Kubernetes Operator is a powerful tool for managing Flink clusters on Kubernetes. Flink Kubernetes Operator (Operator) acts as a control plane to manage the complete deployment lifecycle of Apache Flink applications. The Operator can be installed on a Kubernetes cluster using Helm. The core responsibility of the Flink operator is to manage the full production lifecycle of Flink applications.  Running, suspending and deleting applicationsStateful and stateless application upgradesTriggering and managing savepointsHandling errors, rolling-back broken upgrades  Flink Operator defines two types of Custom Resources(CR) which are the extensions of the Kubernetes API.  FlinkDeploymentFlinkSessionJob FlinkDeployment FlinkDeployment CR defines Flink Application and Session Cluster deployments. Application deployments manage a single job deployment on a dedicated Flink cluster in Application mode. Session clusters allows you to run multiple Flink Jobs on an existing Session cluster. FlinkDeployment in Application modes, Click to toggle content! apiVersion: flink.apache.org/v1beta1 kind: FlinkDeployment metadata: namespace: default name: basic-example spec: image: flink:1.16 flinkVersion: v1_16 flinkConfiguration: taskmanager.numberOfTaskSlots: &quot;2&quot; serviceAccount: flink jobManager: resource: memory: &quot;2048m&quot; cpu: 1 taskManager: resource: memory: &quot;2048m&quot; cpu: 1 job: jarURI: local:///opt/flink/examples/streaming/StateMachineExample.jar parallelism: 2 upgradeMode: stateless state: running   info Session clusters use a similar spec to Application clusters with the only difference that job is not defined in the yaml spec.  info According to the Flink documentation, it is recommended to use FlinkDeployment in Application mode for production environments.  On top of the deployment types the Flink Kubernetes Operator also supports two modes of deployments: Native and Standalone.  NativeStandalone Native Native cluster deployment is the default deployment mode and uses Flink’s built in integration with Kubernetes when deploying the cluster.Flink cluster communicates directly with Kubernetes and allows it to manage Kubernetes resources, e.g. dynamically allocate and de-allocate TaskManager pods.Flink Native can be useful for advanced users who want to build their own cluster management system or integrate with existing management systems.Flink Native allows for more flexibility in terms of job scheduling and execution.For standard Operator use, running your own Flink Jobs in Native mode is recommended. apiVersion: flink.apache.org/v1beta1 kind: FlinkDeployment ... spec: ... mode: native   ","version":"Next","tagName":"h2"},{"title":"Best Practices for Running Flink Jobs on Kubernetes​","type":1,"pageTitle":"Flink Operator on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/flink#best-practices-for-running-flink-jobs-on-kubernetes","content":" To get the most out of Flink on Kubernetes, here are some best practices to follow:  Use the Kubernetes Operator: Install and use the Flink Kubernetes Operator to automate the deployment and management of Flink clusters on Kubernetes.Deploy in dedicated namespaces: Create a separate namespace for the Flink Kubernetes Operator and another one for Flink jobs/workloads. This ensures that the Flink jobs are isolated and have their own resources.Use high-quality storage: Store Flink checkpoints and savepoints in high-quality storage such as Amazon S3 or another durable external storage. These storage options are reliable, scalable, and offer durability for large volumes of data.Optimize resource allocation: Allocate sufficient resources to Flink jobs to ensure optimal performance. This can be done by setting resource requests and limits for Flink containers.Proper network isolation: Use Kubernetes Network Policies to isolate Flink jobs from other workloads running on the same Kubernetes cluster. This ensures that Flink jobs have the required network access without being impacted by other workloads.Configure Flink optimally: Tune Flink settings according to your use case. For example, adjust Flink's parallelism settings to ensure that Flink jobs are scaled appropriately based on the size of the input data.Use checkpoints and savepoints: Use checkpoints for periodic snapshots of Flink application state and savepoints for more advanced use cases such as upgrading or downgrading the application.Store checkpoints and savepoints in the right places: Store checkpoints in distributed file systems or key-value stores like Amazon S3 or another durable external storage. Store savepoints in a durable external storage like Amazon S3.  ","version":"Next","tagName":"h2"},{"title":"Flink Upgrade​","type":1,"pageTitle":"Flink Operator on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/flink#flink-upgrade","content":" Flink Operator provides three upgrade modes for Flink jobs. Checkout the Flink upgrade docs for up-to-date information.  stateless: Stateless application upgrades from empty statelast-state: Quick upgrades in any application state (even for failing jobs), does not require a healthy job as it always uses the latest checkpoint information. Manual recovery may be necessary if HA metadata is lost.savepoint: Use savepoint for upgrade, providing maximal safety and possibility to serve as backup/fork point. The savepoint will be created during the upgrade process. Note that the Flink job needs to be running to allow the savepoint to get created. If the job is in an unhealthy state, the last checkpoint will be used (unless kubernetes.operator.job.upgrade.last-state-fallback.enabled is set to false). If the last checkpoint is not available, the job upgrade will fail.  info last-state or savepoint are recommended modes for production  Deploying the Solution 👈  Execute Sample Flink job with Karpenter 👈  Execute Sample Flink job with Managed Node Groups and Cluster Autoscaler 👈  Cleanup 👈  caution To avoid unwanted charges to your AWS account, delete all the AWS resources created during this deployment ","version":"Next","tagName":"h2"},{"title":"Spark Streaming from Kafka in EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming","content":"","keywords":"","version":"Next"},{"title":"Deploy the EKS Cluster with all the add-ons and infrastructure needed to test this example​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#deploy-the-eks-cluster-with-all-the-add-ons-and-infrastructure-needed-to-test-this-example","content":" ","version":"Next","tagName":"h2"},{"title":"Clone the repository​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#clone-the-repository","content":" git clone https://github.com/awslabs/data-on-eks.git   ","version":"Next","tagName":"h3"},{"title":"Initialize Terraform​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#initialize-terraform","content":" Navigate into the example directory and run the initialization script install.sh.  cd data-on-eks/streaming/spark-streaming/terraform/ ./install.sh   ","version":"Next","tagName":"h3"},{"title":"Export Terraform Outputs​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#export-terraform-outputs","content":" After the Terraform script finishes, export the necessary variables to use them in the sed commands.  export CLUSTER_NAME=$(terraform output -raw cluster_name) export PRODUCER_ROLE_ARN=$(terraform output -raw producer_iam_role_arn) export CONSUMER_ROLE_ARN=$(terraform output -raw consumer_iam_role_arn) export MSK_BROKERS=$(terraform output -raw bootstrap_brokers) export REGION=$(terraform output -raw s3_bucket_region_spark_history_server) export ICEBERG_BUCKET=$(terraform output -raw s3_bucket_id_iceberg_bucket)   ","version":"Next","tagName":"h3"},{"title":"Update kubeconfig​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#update-kubeconfig","content":" Update the kubeconfig to verify the deployment.  aws eks --region $REGION update-kubeconfig --name $CLUSTER_NAME kubectl get nodes   ","version":"Next","tagName":"h3"},{"title":"Configuring Producer​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#configuring-producer","content":" In order to deploy the producer, update the examples/producer/00_deployment.yaml manifest with the variables exported from Terraform.  # Apply `sed` commands to replace placeholders in the producer manifest sed -i.bak -e &quot;s|__MY_PRODUCER_ROLE_ARN__|$PRODUCER_ROLE_ARN|g&quot; \\ -e &quot;s|__MY_AWS_REGION__|$REGION|g&quot; \\ -e &quot;s|__MY_KAFKA_BROKERS__|$MSK_BROKERS|g&quot; \\ ../examples/producer/00_deployment.yaml # Apply sed to delete topic manifest, this can be used to delete kafka topic and start the stack once again sed -i.bak -e &quot;s|__MY_KAFKA_BROKERS__|$MSK_BROKERS|g&quot; \\ ../examples/producer/01_delete_topic.yaml   ","version":"Next","tagName":"h3"},{"title":"Configuring Consumer​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#configuring-consumer","content":" In order to deploy the Spark consumer, update the examples/consumer/manifests/01_spark_application.yaml manifests with the variables exported from Terraform.  # Apply `sed` commands to replace placeholders in the consumer Spark application manifest sed -i.bak -e &quot;s|__MY_BUCKET_NAME__|$ICEBERG_BUCKET|g&quot; \\ -e &quot;s|__MY_KAFKA_BROKERS_ADRESS__|$MSK_BROKERS|g&quot; \\ ../examples/consumer/manifests/01_spark_application.yaml   ","version":"Next","tagName":"h3"},{"title":"Deploy Producer and Consumer​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#deploy-producer-and-consumer","content":" After configuring the producer and consumer manifests, deploy them using kubectl.  # Deploy Producer kubectl apply -f ../examples/producer/00_deployment.yaml # Deploy Consumer kubectl apply -f ../examples/consumer/manifests/   Checking Producer to MSK​  First, let's see the producer logs to verify data is being created and flowing into MSK:  kubectl logs $(kubectl get pods -l app=producer -oname) -f   Checking Spark Streaming application with Spark Operator​  For the consumer, we first need to get the SparkApplication that generates the spark-submit command to Spark Operator to create driver and executor pods based on the YAML configuration:  kubectl get SparkApplication -n spark-operator   You should see the STATUS equals RUNNING, now let's verify the driver and executors pods:  kubectl get pods -n spark-operator   You should see an output like below:  NAME READY STATUS RESTARTS AGE kafkatoiceberg-1e9a438f4eeedfbb-exec-1 1/1 Running 0 7m15s kafkatoiceberg-1e9a438f4eeedfbb-exec-2 1/1 Running 0 7m14s kafkatoiceberg-1e9a438f4eeedfbb-exec-3 1/1 Running 0 7m14s spark-consumer-driver 1/1 Running 0 9m spark-operator-9448b5c6d-d2ksp 1/1 Running 0 117m spark-operator-webhook-init-psm4x 0/1 Completed 0 117m   We have 1 driver and 3 executors pods. Now, let's check the driver logs:  kubectl logs pod/spark-consumer-driver -n spark-operator   You should see only INFO logs indicating that the job is running.  ","version":"Next","tagName":"h3"},{"title":"Verify Data Flow​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#verify-data-flow","content":" After deploying both the producer and consumer, verify the data flow by checking the consumer application's output in the S3 bucket. You can run the s3_automation script to get a live view of the data size in your S3 bucket.  Follow these steps:  Navigate to the s3_automation directory: cd ../examples/s3_automation/ Run the s3_automation script: python app.py This script will continuously monitor and display the total size of your S3 bucket, giving you a real-time view of data being ingested. You can choose to view the bucket size or delete specific directories as needed.  Using the s3_automation Script​  The s3_automation script offers two primary functions:  Check Bucket Size: Continuously monitor and display the total size of your S3 bucket.Delete Directory: Delete specific directories within your S3 bucket.  Here's how to use these functions:  Check Bucket Size: When prompted, enter size to get the current size of your bucket in megabytes (MB). Delete Directory: When prompted, enter delete and then provide the directory prefix you wish to delete (e.g., myfolder/).  ","version":"Next","tagName":"h3"},{"title":"Tuning the Producer and Consumer for Better Performance​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#tuning-the-producer-and-consumer-for-better-performance","content":" After deploying the producer and consumer, you can further optimize the data ingestion and processing by adjusting the number of replicas for the producer and the executor configuration for the Spark application. Here are some suggestions to get you started:  ","version":"Next","tagName":"h2"},{"title":"Adjusting the Number of Producer Replicas​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#adjusting-the-number-of-producer-replicas","content":" You can increase the number of replicas of the producer deployment to handle a higher rate of message production. By default, the producer deployment is configured with a single replica. Increasing this number allows more instances of the producer to run concurrently, increasing the overall throughput.  To change the number of replicas, update the replicas field in examples/producer/00_deployment.yaml:  spec: replicas: 200 # Increase this number to scale up the producer   You can also adjust the environment variables to control the rate and volume of messages produced:  env: - name: RATE_PER_SECOND value: &quot;200000&quot; # Increase this value to produce more messages per second - name: NUM_OF_MESSAGES value: &quot;20000000&quot; # Increase this value to produce more messages in total   Apply the updated deployment:  kubectl apply -f ../examples/producer/00_deployment.yaml   ","version":"Next","tagName":"h3"},{"title":"Tuning Spark Executors for Better Ingestion Performance​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#tuning-spark-executors-for-better-ingestion-performance","content":" To handle the increased data volume efficiently, you can add more executors to the Spark application or increase the resources allocated to each executor. This will allow the consumer to process data faster and reduce ingestion time.  To adjust the Spark executor configuration, update examples/consumer/manifests/01_spark_application.yaml:  spec: dynamicAllocation: enabled: true initialExecutors: 5 minExecutors: 5 maxExecutors: 50 # Increase this number to allow more executors executor: cores: 4 # Increase CPU allocation memory: &quot;8g&quot; # Increase memory allocation   Apply the updated Spark application:  kubectl apply -f ../examples/consumer/manifests/01_spark_application.yaml   ","version":"Next","tagName":"h3"},{"title":"Verify and Monitor​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#verify-and-monitor","content":" After making these changes, monitor the logs and metrics to ensure the system is performing as expected. You can check the producer logs to verify data production and the consumer logs to verify data ingestion and processing.  To check producer logs:  kubectl logs $(kubectl get pods -l app=producer -oname) -f   To check consumer logs:  kubectl logs pod/spark-consumer-driver -n spark-operator   Can use verify dataflow script again  ","version":"Next","tagName":"h3"},{"title":"Summary​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#summary","content":" By adjusting the number of producer replicas and tuning the Spark executor settings, you can optimize the performance of your data pipeline. This allows you to handle higher ingestion rates and process data more efficiently, ensuring that your Spark Streaming application can keep up with the increased data volume from Kafka.  Feel free to experiment with these settings to find the optimal configuration for your workload. Happy streaming!  ","version":"Next","tagName":"h3"},{"title":"Cleaning Up Producer and Consumer Resources​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#cleaning-up-producer-and-consumer-resources","content":" To clean up only the producer and consumer resources, use the following commands:  # Clean up Producer resources kubectl delete -f ../examples/producer/00_deployment.yaml # Clean up Consumer resources kubectl delete -f ../examples/consumer/manifests/   ","version":"Next","tagName":"h3"},{"title":"Restoring .yaml Files from .bak​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#restoring-yaml-files-from-bak","content":" If you need to reset the .yaml files to their original state with placeholders, move the .bak files back to .yaml.  # Restore Producer manifest mv ../examples/producer/00_deployment.yaml.bak ../examples/producer/00_deployment.yaml # Restore Consumer Spark application manifest mv ../examples/consumer/manifests/01_spark_application.yaml.bak ../examples/consumer/manifests/01_spark_application.yaml   ","version":"Next","tagName":"h3"},{"title":"Destroy the EKS Cluster and Resources​","type":1,"pageTitle":"Spark Streaming from Kafka in EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/spark-streaming#destroy-the-eks-cluster-and-resources","content":" To clean up the entire EKS cluster and associated resources:  cd data-on-eks/streaming/spark-streaming/terraform/ terraform destroy  ","version":"Next","tagName":"h3"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/troubleshooting","content":"","keywords":"","version":"Next"},{"title":"Error: local-exec provisioner error​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#error-local-exec-provisioner-error","content":" If you encounter the following error during the execution of the local-exec provisioner:  Error: local-exec provisioner error \\ with module.eks-blueprints.module.emr_on_eks[&quot;data_team_b&quot;].null_resource.update_trust_policy,\\ on .terraform/modules/eks-blueprints/modules/emr-on-eks/main.tf line 105, in resource &quot;null_resource&quot; \\ &quot;update_trust_policy&quot;:│ 105: provisioner &quot;local-exec&quot; {│ │ Error running command 'set -e│ │ aws emr-containers update-role-trust-policy \\ │ --cluster-name emr-on-eks \\│ --namespace emr-data-team-b \\│ --role-name emr-on-eks-emr-eks-data-team-b   ","version":"Next","tagName":"h2"},{"title":"Issue Description:​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#issue-description","content":" The error message indicates that the emr-containers command is not present in the AWS CLI version being used. This issue has been addressed and fixed in AWS CLI version 2.0.54.  ","version":"Next","tagName":"h3"},{"title":"Solution​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#solution","content":" To resolve the issue, update your AWS CLI version to 2.0.54 or a later version by executing the following command:  pip install --upgrade awscliv2   By updating the AWS CLI version, you will ensure that the necessary emr-containers command is available and can be executed successfully during the provisioning process.  If you continue to experience any issues or require further assistance, please consult the AWS CLI GitHub issue for more details or contact our support team for additional guidance.  ","version":"Next","tagName":"h3"},{"title":"Timeouts during Terraform Destroy​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#timeouts-during-terraform-destroy","content":" ","version":"Next","tagName":"h2"},{"title":"Issue Description:​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#issue-description-1","content":" Customers may experience timeouts during the deletion of their environments, specifically when VPCs are being deleted. This is a known issue related to the vpc-cni component.  ","version":"Next","tagName":"h3"},{"title":"Symptoms:​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#symptoms","content":" ENIs (Elastic Network Interfaces) remain attached to subnets even after the environment is destroyed. The EKS managed security group associated with the ENI cannot be deleted by EKS.  ","version":"Next","tagName":"h3"},{"title":"Solution:​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#solution-1","content":" To overcome this issue, follow the recommended solution below:  Utilize the provided cleanup.sh scripts to ensure a proper cleanup of resources. Run the `cleanup.sh`` script, which is included in the blueprint. This script will handle the removal of any lingering ENIs and associated security groups.  ","version":"Next","tagName":"h3"},{"title":"Error: could not download chart​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#error-could-not-download-chart","content":" If you encounter the following error while attempting to download a chart:  │ Error: could not download chart: failed to download &quot;oci://public.ecr.aws/karpenter/karpenter&quot; at version &quot;v0.18.1&quot; │ │ with module.eks_blueprints_kubernetes_addons.module.karpenter[0].module.helm_addon.helm_release.addon[0], │ on .terraform/modules/eks_blueprints_kubernetes_addons/modules/kubernetes-addons/helm-addon/main.tf line 1, in resource &quot;helm_release&quot; &quot;addon&quot;: │ 1: resource &quot;helm_release&quot; &quot;addon&quot; { │   Follow the steps below to resolve the issue:  ","version":"Next","tagName":"h2"},{"title":"Issue Description:​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#issue-description-2","content":" The error message indicates that there was a failure in downloading the specified chart. This issue can occur due to a bug in Terraform during the installation of Karpenter.  ","version":"Next","tagName":"h3"},{"title":"Solution:​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#solution-2","content":" To resolve the issue, you can try the following steps:  Authenticate with ECR: Run the following command to authenticate with the ECR (Elastic Container Registry) where the chart is located:  aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws   Re-run terraform apply: Execute the terraform apply command again with the --auto-approve flag to reapply the Terraform configuration:  terraform apply --auto-approve   By authenticating with ECR and re-running the terraform apply command, you will ensure that the necessary chart can be downloaded successfully during the installation process.  ","version":"Next","tagName":"h3"},{"title":"Terraform apply/destroy error to authenticate with EKS Cluster​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#terraform-applydestroy-error-to-authenticate-with-eks-cluster","content":" ERROR: ╷ │ Error: Get &quot;http://localhost/api/v1/namespaces/kube-system/configmaps/aws-auth&quot;: dial tcp [::1]:80: connect: connection refused │ │ with module.eks.kubernetes_config_map_v1_data.aws_auth[0], │ on .terraform/modules/eks/main.tf line 550, in resource &quot;kubernetes_config_map_v1_data&quot; &quot;aws_auth&quot;: │ 550: resource &quot;kubernetes_config_map_v1_data&quot; &quot;aws_auth&quot; { │ ╵   Solution:In this situation Terraform is unable to refresh the data resources and authenticate with EKS Cluster. See the discussion here  Try this approach first by using exec plugin.  provider &quot;kubernetes&quot; { host = module.eks_blueprints.eks_cluster_endpoint cluster_ca_certificate = base64decode(module.eks_blueprints.eks_cluster_certificate_authority_data) exec { api_version = &quot;client.authentication.k8s.io/v1beta1&quot; command = &quot;aws&quot; args = [&quot;eks&quot;, &quot;get-token&quot;, &quot;--cluster-name&quot;, module.eks_blueprints.eks_cluster_id] } }   If the issue still persists even after the above change then you can use alternative approach of using local kube config file. NOTE: This approach might not be ideal for production. It helps you to apply/destroy clusters with your local kube config.  Create a local kubeconfig for your cluster  aws eks update-kubeconfig --name &lt;EKS_CLUSTER_NAME&gt; --region &lt;CLUSTER_REGION&gt;   Update the providers.tf file with the below config by just using the config_path.  provider &quot;kubernetes&quot; { config_path = &quot;&lt;HOME_PATH&gt;/.kube/config&quot; } provider &quot;helm&quot; { kubernetes { config_path = &quot;&lt;HOME_PATH&gt;/.kube/config&quot; } } provider &quot;kubectl&quot; { config_path = &quot;&lt;HOME_PATH&gt;/.kube/config&quot; }   ","version":"Next","tagName":"h2"},{"title":"EMR Containers Virtual Cluster (dhwtlq9yx34duzq5q3akjac00) delete: unexpected state 'ARRESTED'​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#emr-containers-virtual-cluster-dhwtlq9yx34duzq5q3akjac00-delete-unexpected-state-arrested","content":" If you encounter an error message stating &quot;waiting for EMR Containers Virtual Cluster (xwbc22787q6g1wscfawttzzgb) delete: unexpected state 'ARRESTED', wanted target ''. last error: %!s(nil)&quot;, you can follow the steps below to resolve the issue:  Note: Replace &lt;REGION&gt; with the appropriate AWS region where the virtual cluster is located.  Open a terminal or command prompt.Run the following command to list the virtual clusters in the &quot;ARRESTED&quot; state:  aws emr-containers list-virtual-clusters --region &lt;REGION&gt; --states ARRESTED \\ --query 'virtualClusters[0].id' --output text   This command retrieves the ID of the virtual cluster in the &quot;ARRESTED&quot; state.  Run the following command to delete the virtual cluster:  aws emr-containers list-virtual-clusters --region &lt;REGION&gt; --states ARRESTED \\ --query 'virtualClusters[0].id' --output text | xargs -I{} aws emr-containers delete-virtual-cluster \\ --region &lt;REGION&gt; --id {}   Replace &lt;VIRTUAL_CLUSTER_ID&gt; with the ID of the virtual cluster obtained from the previous step.  By executing these commands, you will be able to delete the virtual cluster that is in the &quot;ARRESTED&quot; state. This should resolve the unexpected state issue and allow you to proceed with further operations.  ","version":"Next","tagName":"h2"},{"title":"Terminating namespace issue​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#terminating-namespace-issue","content":" If you encounter the issue where a namespace is stuck in the &quot;Terminating&quot; state and cannot be deleted, you can use the following command to remove the finalizers on the namespace:  Note: Replace &lt;namespace&gt; with the name of the namespace you want to delete.  NAMESPACE=&lt;namespace&gt; kubectl get namespace $NAMESPACE -o json | sed 's/&quot;kubernetes&quot;//' | kubectl replace --raw &quot;/api/v1/namespaces/$NAMESPACE/finalize&quot; -f -   This command retrieves the namespace details in JSON format, removes the &quot;kubernetes&quot; finalizer, and performs a replace operation to remove the finalizer from the namespace. This should allow the namespace to complete the termination process and be successfully deleted.  Please ensure that you have the necessary permissions to perform this operation. If you continue to experience issues or require further assistance, please reach out to our support team for additional guidance and troubleshooting steps.  ","version":"Next","tagName":"h2"},{"title":"KMS Alias AlreadyExistsException​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#kms-alias-alreadyexistsexception","content":" During your Terraform installation or redeployment, you might encounter an error saying: AlreadyExistsException: An alias with the name ... already exists. This happens when the KMS alias you're trying to create already exists in your AWS account.  │ Error: creating KMS Alias (alias/eks/trainium-inferentia): AlreadyExistsException: An alias with the name arn:aws:kms:us-west-2:23423434:alias/eks/trainium-inferentia already exists │ │ with module.eks.module.kms.aws_kms_alias.this[&quot;cluster&quot;], │ on .terraform/modules/eks.kms/main.tf line 452, in resource &quot;aws_kms_alias&quot; &quot;this&quot;: │ 452: resource &quot;aws_kms_alias&quot; &quot;this&quot; { │   Solution:  To resolve this, delete the existing KMS alias using the aws kms delete-alias command. Remember to update the alias name and region in the command before running it.  aws kms delete-alias --alias-name &lt;KMS_ALIAS_NAME&gt; --region &lt;ENTER_REGION&gt;   ","version":"Next","tagName":"h2"},{"title":"Error: creating CloudWatch Logs Log Group​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#error-creating-cloudwatch-logs-log-group","content":" Terraform cannot create a CloudWatch Logs log group because it already exists in your AWS account.  ╷ │ Error: creating CloudWatch Logs Log Group (/aws/eks/trainium-inferentia/cluster): operation error CloudWatch Logs: CreateLogGroup, https response error StatusCode: 400, RequestID: 5c34c47a-72c6-44b2-a345-925824f24d38, ResourceAlreadyExistsException: The specified log group already exists │ │ with module.eks.aws_cloudwatch_log_group.this[0], │ on .terraform/modules/eks/main.tf line 106, in resource &quot;aws_cloudwatch_log_group&quot; &quot;this&quot;: │ 106: resource &quot;aws_cloudwatch_log_group&quot; &quot;this&quot; {   Solution:  Delete the existing log group by updating log group name and the region.  aws logs delete-log-group --log-group-name &lt;LOG_GROUP_NAME&gt; --region &lt;ENTER_REGION&gt;   ","version":"Next","tagName":"h2"},{"title":"Karpenter Error - Missing Service Linked Role​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#karpenter-error---missing-service-linked-role","content":" Karpenter throws below error while trying to create new instances.  &quot;error&quot;:&quot;launching nodeclaim, creating instance, with fleet error(s), AuthFailure.ServiceLinkedRoleCreationNotPermitted: The provided credentials do not have permission to create the service-linked role for EC2 Spot Instances.&quot;}   Solution:  You will need to create the service linked role in the AWS account you're using to avoid ServiceLinkedRoleCreationNotPermitted error.  aws iam create-service-linked-role --aws-service-name spot.amazonaws.com   ","version":"Next","tagName":"h2"},{"title":"Error: AmazonEKS_CNI_IPv6_Policy does not exist​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#error-amazoneks_cni_ipv6_policy-does-not-exist","content":" If you encounter the error below when deploying a solution that supports IPv6:  │ Error: attaching IAM Policy (arn:aws:iam::1234567890:policy/AmazonEKS_CNI_IPv6_Policy) to IAM Role (core-node-group-eks-node-group-20241111182906854800000003): operation error IAM: AttachRolePolicy, https response error StatusCode: 404, RequestID: 9c99395a-ce3d-4a05-b119-538470a3a9f7, NoSuchEntity: Policy arn:aws:iam::1234567890:policy/AmazonEKS_CNI_IPv6_Policy does not exist or is not attachable.   ","version":"Next","tagName":"h2"},{"title":"Issue Description:​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#issue-description-3","content":" The Amazon VPC CNI plugin requires IAM permission to assign IPv6 addresses so you must create an IAM policy and associate it with the role that the CNI will use. However, each IAM policy name must be unique in the same AWS account. This causes a conflict if the policy is created as part of the terraform stack and it is deployed multiple times.  To resolve this error you will need to create the Policy with the commands below. You should only need to do this once per AWS account.  ","version":"Next","tagName":"h3"},{"title":"Solution:​","type":1,"pageTitle":"Troubleshooting","url":"/data-on-eks/docs/blueprints/troubleshooting#solution-3","content":" Copy the following text and save it to a file named vpc-cni-ipv6-policy.json.  { &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ { &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: [ &quot;ec2:AssignIpv6Addresses&quot;, &quot;ec2:DescribeInstances&quot;, &quot;ec2:DescribeTags&quot;, &quot;ec2:DescribeNetworkInterfaces&quot;, &quot;ec2:DescribeInstanceTypes&quot; ], &quot;Resource&quot;: &quot;&quot; }, { &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: [ &quot;ec2:CreateTags&quot; ], &quot;Resource&quot;: [ &quot;arn:aws:ec2::*:network-interface/*&quot; ] } ] }   Create the IAM policy.  aws iam create-policy --policy-name AmazonEKS_CNI_IPv6_Policy --policy-document file://vpc-cni-ipv6-policy.json   Re-run the install.sh script for the blueprint ","version":"Next","tagName":"h3"},{"title":"Apache NiFi on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/blueprints/streaming-platforms/nifi","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Apache NiFi on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/nifi#introduction","content":" Apache NiFi is an open-source data integration and management system designed to automate and manage the flow of data between systems. It provides a web-based user interface for creating, monitoring, and managing data flows in real-time.  With its powerful and flexible architecture, Apache NiFi can handle a wide range of data sources, cloud platforms, and formats, including structured and unstructured data, and can be used for a variety of data integration scenarios, such as data ingest, data processing (low to medium level), data routing, data transformation, and data dissemination.  Apache NiFi provides a GUI based interface for building and managing data flows, making it easier for non-technical users. It also offers robust security features, including SSL, SSH, and fine-grained access control, to ensure the safe and secure transfer of sensitive data. Whether you are a data analyst, a data engineer, or a data scientist, Apache NiFi provides a comprehensive solution for managing and integrating your data on AWS and other platforms.  caution This blueprint should be considered as experimental and should only be used for proof of concept.  This example deploys an EKS Cluster running the Apache NiFi cluster. In the example, Apache NIfi is streaming data from the AWS Kinesis Data Stream to an Amazon DynamoDB table after some format transformation.  Creates a new sample VPC, 3 Private Subnets and 3 Public SubnetsCreates Internet gateway for Public Subnets and NAT Gateway for Private SubnetsCreates EKS Cluster Control plane with public endpoint (for demo reasons only) with one managed node groupDeploys Apache NiFi, AWS Load Balancer Controller, Cert Manager and External DNS (optional) add-onsDeploys Apache NiFi cluster in the nifi namespace  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Apache NiFi on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/nifi#prerequisites","content":" Ensure that you have installed the following tools on your machine.  aws clikubectlterraformjq  Additionally, for end-to-end configuration of Ingress, you will need to provide the following:  A Route53 Public Hosted Zone configured in the account where you are deploying this example. E.g. &quot;example.com&quot;An ACM Certificate in the account + region where you are deploying this example. A wildcard certificate is preferred, e.g. &quot;*.example.com&quot;  ","version":"Next","tagName":"h2"},{"title":"Deploy the EKS Cluster with Apache NiFi​","type":1,"pageTitle":"Apache NiFi on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/nifi#deploy-the-eks-cluster-with-apache-nifi","content":" ","version":"Next","tagName":"h2"},{"title":"Clone the repository​","type":1,"pageTitle":"Apache NiFi on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/nifi#clone-the-repository","content":" git clone https://github.com/awslabs/data-on-eks.git   ","version":"Next","tagName":"h3"},{"title":"Initialize Terraform​","type":1,"pageTitle":"Apache NiFi on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/nifi#initialize-terraform","content":" Navigate into the example directory and run terraform init  cd data-on-eks/streaming/nifi/ terraform init   ","version":"Next","tagName":"h3"},{"title":"Terraform Plan​","type":1,"pageTitle":"Apache NiFi on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/nifi#terraform-plan","content":" Run Terraform plan to verify the resources created by this execution.  Provide a Route53 Hosted Zone hostname and a corresponding ACM Certificate;  export TF_VAR_eks_cluster_domain=&quot;&lt;CHANGEME - example.com&gt;&quot; export TF_VAR_acm_certificate_domain=&quot;&lt;CHANGEME - *.example.com&gt;&quot; export TF_VAR_nifi_sub_domain=&quot;nifi&quot; export TF_VAR_nifi_username=&quot;admin&quot;   ","version":"Next","tagName":"h3"},{"title":"Deploy the pattern​","type":1,"pageTitle":"Apache NiFi on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/nifi#deploy-the-pattern","content":" terraform plan terraform apply   Enter yes to apply.  Outputs: configure_kubectl = &quot;aws eks --region us-west-2 update-kubeconfig --name nifi-on-eks&quot;   ","version":"Next","tagName":"h3"},{"title":"Verify Deployment​","type":1,"pageTitle":"Apache NiFi on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/nifi#verify-deployment","content":" Update kubeconfig  aws eks --region us-west-2 update-kubeconfig --name nifi-on-eks   Verify all pods are running.  NAMESPACE NAME READY STATUS RESTARTS AGE amazon-cloudwatch aws-cloudwatch-metrics-7fbcq 1/1 Running 1 (43h ago) 2d amazon-cloudwatch aws-cloudwatch-metrics-82c9v 1/1 Running 1 (43h ago) 2d amazon-cloudwatch aws-cloudwatch-metrics-blrmt 1/1 Running 1 (43h ago) 2d amazon-cloudwatch aws-cloudwatch-metrics-dhpl7 1/1 Running 0 19h amazon-cloudwatch aws-cloudwatch-metrics-hpw5k 1/1 Running 1 (43h ago) 2d cert-manager cert-manager-7d57b6576b-c52dw 1/1 Running 1 (43h ago) 2d cert-manager cert-manager-cainjector-86f7f4749-hs7d9 1/1 Running 1 (43h ago) 2d cert-manager cert-manager-webhook-66c85f8577-rxms8 1/1 Running 1 (43h ago) 2d external-dns external-dns-57bb948d75-g8kbs 1/1 Running 0 41h grafana grafana-7f5b7f5d4c-znrqk 1/1 Running 1 (43h ago) 2d kube-system aws-load-balancer-controller-7ff998fc9b-86gql 1/1 Running 1 (43h ago) 2d kube-system aws-load-balancer-controller-7ff998fc9b-hct9k 1/1 Running 1 (43h ago) 2d kube-system aws-node-4gcqk 1/1 Running 1 (43h ago) 2d kube-system aws-node-4sssk 1/1 Running 0 19h kube-system aws-node-4t62f 1/1 Running 1 (43h ago) 2d kube-system aws-node-g4ndt 1/1 Running 1 (43h ago) 2d kube-system aws-node-hlxmq 1/1 Running 1 (43h ago) 2d kube-system cluster-autoscaler-aws-cluster-autoscaler-7bd6f7b94b-j7td5 1/1 Running 1 (43h ago) 2d kube-system cluster-proportional-autoscaler-coredns-6ccfb4d9b5-27xsd 1/1 Running 1 (43h ago) 2d kube-system coredns-5c5677bc78-rhzkx 1/1 Running 1 (43h ago) 2d kube-system coredns-5c5677bc78-t7m5z 1/1 Running 1 (43h ago) 2d kube-system ebs-csi-controller-87c4ff9d4-ffmwh 6/6 Running 6 (43h ago) 2d kube-system ebs-csi-controller-87c4ff9d4-nfw28 6/6 Running 6 (43h ago) 2d kube-system ebs-csi-node-4mkc8 3/3 Running 0 19h kube-system ebs-csi-node-74xqs 3/3 Running 3 (43h ago) 2d kube-system ebs-csi-node-8cw8t 3/3 Running 3 (43h ago) 2d kube-system ebs-csi-node-cs9wp 3/3 Running 3 (43h ago) 2d kube-system ebs-csi-node-ktdb7 3/3 Running 3 (43h ago) 2d kube-system kube-proxy-4s72m 1/1 Running 0 19h kube-system kube-proxy-95ptn 1/1 Running 1 (43h ago) 2d kube-system kube-proxy-bhrdk 1/1 Running 1 (43h ago) 2d kube-system kube-proxy-nzvb6 1/1 Running 1 (43h ago) 2d kube-system kube-proxy-q9xkc 1/1 Running 1 (43h ago) 2d kube-system metrics-server-fc87d766-dd647 1/1 Running 1 (43h ago) 2d kube-system metrics-server-fc87d766-vv8z9 1/1 Running 1 (43h ago) 2d logging aws-for-fluent-bit-b5vqg 1/1 Running 1 (43h ago) 2d logging aws-for-fluent-bit-pklhr 1/1 Running 0 19h logging aws-for-fluent-bit-rq2nc 1/1 Running 1 (43h ago) 2d logging aws-for-fluent-bit-tnmtl 1/1 Running 1 (43h ago) 2d logging aws-for-fluent-bit-zzhfc 1/1 Running 1 (43h ago) 2d nifi nifi-0 5/5 Running 0 41h nifi nifi-1 5/5 Running 0 41h nifi nifi-2 5/5 Running 0 41h nifi nifi-registry-0 1/1 Running 0 41h nifi nifi-zookeeper-0 1/1 Running 0 41h nifi nifi-zookeeper-1 1/1 Running 0 41h nifi nifi-zookeeper-2 1/1 Running 0 18h prometheus prometheus-alertmanager-655fcb46df-2qh8h 2/2 Running 2 (43h ago) 2d prometheus prometheus-kube-state-metrics-549f6d74dd-wwhtr 1/1 Running 1 (43h ago) 2d prometheus prometheus-node-exporter-5cpzk 1/1 Running 0 19h prometheus prometheus-node-exporter-8jhbk 1/1 Running 1 (43h ago) 2d prometheus prometheus-node-exporter-nbd42 1/1 Running 1 (43h ago) 2d prometheus prometheus-node-exporter-str6t 1/1 Running 1 (43h ago) 2d prometheus prometheus-node-exporter-zkf5s 1/1 Running 1 (43h ago) 2d prometheus prometheus-pushgateway-677c6fdd5-9tqkl 1/1 Running 1 (43h ago) 2d prometheus prometheus-server-7bf9cbb9cf-b2zgl 2/2 Running 2 (43h ago) 2d vpa vpa-recommender-7c6bbb4f9b-rjhr7 1/1 Running 1 (43h ago) 2d vpa vpa-updater-7975b9dc55-g6zf6 1/1 Running 1 (43h ago) 2d   Apache NiFi UI​  The Apache NiFi Dashboard can be opened at the following url &quot;https://nifi.example.com/nifi&quot;    Run the command below to retrieve NiFi user's password and default username as admin  aws secretsmanager get-secret-value --secret-id &lt;nifi_login_password_secret_name from terraform outputs&gt; --region &lt;region&gt; | jq '.SecretString' --raw-output     ","version":"Next","tagName":"h3"},{"title":"Monitoring​","type":1,"pageTitle":"Apache NiFi on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/nifi#monitoring","content":" Apache Nifi can be monitored using metrics reported by PrometheusReportingTask. JVM metrics are disabled by default, let's enable the JVM metrics by navigating to Controller Settings by the clicking on the hamburger icon (three horizontal bars) in the top right corner.    Next click on the REPORTING TASK tab and then click the + icon and search for PrometheusReportingTask in the filter. Select the PrometheusReportingTask and click ADD button.    The prometheus reporting task is stopped by default.    Click on the pencil icon to edit the task and click on the PROPERTIES tab. Set the Send JVM metrics to true and click on Apply. Start the task by clicking on the play icon and ensure it's in running state.    This blueprint uses the prometheus and grafana to create a monitoring stack for getting visibility into your Apache NiFi cluster.  aws secretsmanager get-secret-value --secret-id &lt;grafana_secret_name from terraform outputs&gt; --region &lt;region&gt; | jq '.SecretString' --raw-output   Run the command below and open the Grafana dashboard using the url &quot;http://localhost:8080&quot;.  kubectl port-forward svc/grafana -n grafana 8080:80   Import Apache NiFi Grafana dashboard    ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Apache NiFi on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/nifi#example","content":" Create IAM policies for accessing Amazon DynamoDB and AWS Kinesis​  Create an AWS IAM role: Create an AWS IAM role with permissions to access the AWS Kinesis data stream and assign this role to the AWS EKS cluster hosting Apache NiFi. Attach the IAM policy: Attach a policy to the IAM role that limits access to the Kinesis data stream to read-only and IAM policy to enable EKS role to write Amazon DynamoDB table. Here's an example policy:  { &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ { &quot;Sid&quot;: &quot;Nifi-access-to-Kinesis&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: [ &quot;kinesis:DescribeStream&quot;, &quot;kinesis:GetRecords&quot;, &quot;kinesis:GetShardIterator&quot;, &quot;kinesis:ListStreams&quot; ], &quot;Resource&quot;: &quot;arn:aws:kinesis:&lt;REGION&gt;:&lt;ACCOUNT-ID&gt;:stream/kds-stream-nifi-on-EKS&quot; } ] }   { &quot;Sid&quot;: &quot;DynamoDBTableAccess&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: [ &quot;dynamodb:BatchGetItem&quot;, &quot;dynamodb:BatchWriteItem&quot;, &quot;dynamodb:ConditionCheckItem&quot;, &quot;dynamodb:PutItem&quot;, &quot;dynamodb:DescribeTable&quot;, &quot;dynamodb:DeleteItem&quot;, &quot;dynamodb:GetItem&quot;, &quot;dynamodb:Scan&quot;, &quot;dynamodb:Query&quot;, &quot;dynamodb:UpdateItem&quot; ], &quot;Resource&quot;: &quot;arn:aws:dynamodb:&lt;REGION&gt;:&lt;ACCOUNT-ID&gt;:table/NifiStreamingTable&quot; }   Create AWS Kinesis Data Stream​  Create an AWS Kinesis data stream: Log in to the AWS Management Console, and create a Kinesis data stream in the region where you want to collect your data or use the below command line to create one.  aws kinesis create-stream --stream-name kds-stream-nifi-on-EKS   Create Amazon DynamoDB table​  Create a Amazon DynamoDB in the same AWS Account using the AWS console or the command line. Create a JSON file with Amazon DynamoDb table information called JSONSchemaDynamoDBTABLE.json   &quot;TableName&quot;: &quot;NifiStreamingTable&quot;, &quot;KeySchema&quot;: [ { &quot;AttributeName&quot;: &quot;Name&quot;, &quot;KeyType&quot;: &quot;HASH&quot; }, { &quot;AttributeName&quot;: &quot;Age&quot;, &quot;KeyType&quot;: &quot;RANGE&quot; }}, { &quot;AttributeName&quot;: &quot;Location&quot;, &quot;KeyType&quot;: &quot;RANGE&quot; } ], &quot;AttributeDefinitions&quot;: [ { &quot;AttributeName&quot;: &quot;Name&quot;, &quot;KeyType&quot;: &quot;S&quot; }, { &quot;AttributeName&quot;: &quot;Age&quot;, &quot;KeyType&quot;: &quot;S&quot; }}, { &quot;AttributeName&quot;: &quot;Location&quot;, &quot;KeyType&quot;: &quot;S&quot; } ], &quot;ProvisionedThroughput&quot;: { &quot;ReadCapacityUnits&quot;: 5, &quot;WriteCapacityUnits&quot;: 5 } }   Execute the command line to create the Amazon DynamoDB table from the JSON file.  aws dynamodb create-table --cli-input-json JSONSchemaDynamoDBTABLE.json   Open the Apache Nifi on the EKS UI using the endpoint, create a process group, and name it NifiStreamingExample.      Double-click on the Nifi-on-EKS-process-group and enter the process to create the data flow. Drag the processor icon from the top left, type Kinesis into the search window, and select the ConsumeKinesisStream processor. To create a Kinesis Consumer, click ADD.     Double click on the Kinesis processor, select the properties tab, and fill in the information for the configuration below. a. Amazon Kinesis Stream Name b. Application Name c. Region d. AWS Credentials Provider Service - Select AWSCredentialsProviderControllerService and create one.    Create AWS credential setup​  Setup the AWS credentials to access the AWS resource in the account using the AWS Credentials Provider Service. In this example, we are using the access key and secret key. Note : Other options are IAM role-based, assumed role options to authenticate an AWS resources.      Drag the processor icon from the top left, type &quot;dynamoDB&quot; into the search window, and select the &quot;PutDynamoDBRecord processor. Click on ADD to create an Amazon DynamoDB writer. Configure the processor using the fields below.  a. Record Reader - Change it to JSONTreeReader b. AWS Credentials Provider Service - select the previously created configuration c. Region b. Table Name d. Partition Key Field - select the partition field    Hover over the Kinesis consumer and drag it to the DynamoDB writer. The connection will be made, and the success queue will be created.    For the Kinesis Consumer and DynamoDB, create an error route to a funnel. This is to route the unprocessed, failed, and successful records for further processing. Note: Under the Relationship tab, you can see all the options for each processor. For the DynamoDB writer, success should always point to a funnel.    Check that none of the processors have any Hazard symbols. Right-click on the grid and click &quot;run the data flow.&quot; You can start seeing the data flowing in.  ","version":"Next","tagName":"h3"},{"title":"Cleanup​","type":1,"pageTitle":"Apache NiFi on EKS","url":"/data-on-eks/docs/blueprints/streaming-platforms/nifi#cleanup","content":" To clean up your environment, destroy the Terraform modules in reverse order.  Destroy the Kubernetes Add-ons, EKS cluster with Node groups and VPC  terraform destroy -target=&quot;module.eks_blueprints_kubernetes_addons&quot; --auto-approve terraform destroy -target=&quot;module.eks&quot; --auto-approve terraform destroy -target=&quot;module.vpc&quot; --auto-approve   Finally, destroy any additional resources that are not in the above modules  terraform destroy --auto-approve  ","version":"Next","tagName":"h2"},{"title":"Generative AI on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai","content":"","keywords":"","version":"Next"},{"title":"Training​","type":1,"pageTitle":"Generative AI on EKS","url":"/data-on-eks/docs/gen-ai#training","content":" Training in the generative AI world involves teaching a model to understand and generate human-like text by learning from vast amounts of data. This process is crucial as it forms the foundation upon which models like BERT-Large and Llama2 are built, enabling them to perform a wide range of tasks such as text summarization, translation, and more. Effective training ensures that the model can understand complex patterns and generate coherent, contextually appropriate responses.  Our platform supports various ML frameworks including PyTorch, TensorFlow, TensorRT, and vLLM. You can use JupyterHub for interactive and collaborative model development, where you can perform data analysis, build models, and run experiments. The training phase also integrates with Kubeflow and Ray, providing robust solutions for managing complex machine learning workflows, from data preprocessing to training and evaluation.  Are you ready to dive into the world of LLMs and train models for your specific needs? Discover our comprehensive Training resources to get started.  ","version":"Next","tagName":"h2"},{"title":"Inference​","type":1,"pageTitle":"Generative AI on EKS","url":"/data-on-eks/docs/gen-ai#inference","content":" Inference is the process of using a trained model to make predictions or generate outputs based on new input data. In the context of generative AI, inference enables models to perform tasks such as text generation, translation, and summarization in real-time. Building a scalable inference platform is essential to handle the high demand and ensure low latency, which is critical for applications requiring real-time responses.  Unlock the potential of LLMs for powerful inference tasks. Our Inference resources will guide you through deploying LLMs effectively. Utilize deployment tools such as RayServe, NVIDIA Triton Inference Server, and KServe to ensure high-performance model serving. We also offer optimization techniques with AWS Neuron for Inferentia and NVIDIA GPUs to accelerate inference. This section includes step-by-step instructions on setting up inference endpoints, scaling deployments to handle varying loads, and monitoring performance to maintain reliability and efficiency.  ","version":"Next","tagName":"h2"},{"title":"Storage and Data Management​","type":1,"pageTitle":"Generative AI on EKS","url":"/data-on-eks/docs/gen-ai#storage-and-data-management","content":" Efficient data storage and management are fundamental to successful AI/ML operations. Our platform integrates with AWS storage solutions such as S3, EBS, EFS, and FSx to ensure scalable and reliable data handling. Utilize MLflow for model registry and versioning, and manage container images with Amazon ECR. This ensures a seamless workflow from model development to deployment, with robust data management practices to support your ML lifecycle.  Whether you're an experienced practitioner or new to the field, our generative AI on EKS capabilities empower you to harness the latest advancements in language modeling. Dive into each section to begin your journey, and explore how you can leverage these tools and frameworks to build, fine-tune, and deploy powerful AI models on Amazon EKS. ","version":"Next","tagName":"h2"},{"title":"DeepSeek-R1 on EKS with Ray and vLLM","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/inference/GPUs/ray-vllm-deepseek","content":"","keywords":"","version":"Next"},{"title":"Understanding the GPU Memory Requirements​","type":1,"pageTitle":"DeepSeek-R1 on EKS with Ray and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/ray-vllm-deepseek#understanding-the-gpu-memory-requirements","content":" Deploying an 8B parameter model like DeepSeek-R1-Distill-Llama requires careful memory planning. Each model parameter typically consumes 2 bytes (BF16 precision), meaning the full model weights require around 14.99 GiB GPU memory. Below is the actual memory usage observed during deployment:  Log sample from Ray deployment  INFO model_runner.py:1115] Loading model weights took 14.99 GiB INFO worker.py:266] vLLM instance can use total GPU memory (22.30 GiB) x utilization (0.90) = 20.07 GiB INFO worker.py:266] Model weights: 14.99 GiB | Activation memory: 0.85 GiB | KV Cache: 4.17 GiB   G5 instances provide single A10G GPUs with 24 GiB memory, ideal for running one large LLM inference process per instance. For this deployment, we use G5.4xlarge, which has 1x NVIDIA A10G GPU (24 GiB), 16 vCPUs and 64 GiB RAM.  Using vLLM, we optimize memory utilization, enabling us to maximize inference speed while preventing out-of-memory (OOM) crashes.  Deploying EKS Cluster and Addons 👈  ","version":"Next","tagName":"h2"},{"title":"Deploying DeepSeek-R1-Distill-Llama-8B with RayServe and vLLM​","type":1,"pageTitle":"DeepSeek-R1 on EKS with Ray and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/ray-vllm-deepseek#deploying-deepseek-r1-distill-llama-8b-with-rayserve-and-vllm","content":" With the EKS cluster deployed and all necessary components in place, we can now proceed with deploying DeepSeek-R1-Distill-Llama-8B using RayServe and vLLM. This guide outlines the steps to export the Hugging Face Hub token, create a Docker image (if required), and deploy the RayServe cluster.  Step1: Export the Hugging Face Hub Token  Before deploying the model, you need to authenticate with Hugging Face to access the required model files. Follow these steps:  Create a Hugging Face account (if you do not already have one).Generate an access token:  Navigate to Hugging Face Settings → Access Tokens.Create a new token with read permissions.Copy the generated token.  Export the token as an environment variable in your terminal:  export HUGGING_FACE_HUB_TOKEN=$(echo -n &quot;Your-Hugging-Face-Hub-Token-Value&quot; | base64)   Note: The token must be base64-encoded before being used in Kubernetes secrets.  Step2: Create a Docker image  To deploy the model efficiently, you need a Docker image that includes Ray, vLLM, and Hugging Face dependencies. Follow these steps:  Use the provided Dockerfile:  gen-ai/inference/vllm-ray-gpu-deepseek/Dockerfile   This Dockerfile is based on a Ray image and includes vLLM and Hugging Face libraries. No additional packages are required for this deployment. Build and push the Docker image to Amazon ECR  OR  Use a pre-built image (for PoC deployments):  If you want to skip building and pushing a custom image, you can use the public ECR image:  public.ecr.aws/data-on-eks/ray-2.41.0-py310-cu118-vllm0.7.0  Note: If using a custom image, replace the image reference in the RayServe YAML file with your ECR image URI.  Step3: Deploy RayServe Cluster  RayServe cluster is defined in a YAML configuration file that includes multiple resources:  Namespace for isolating the deployment.Secret for securely storing the Hugging Face Hub token.ConfigMap containing the serving script (OpenAI-compatible API interface).RayServe definition that includes: A Ray head pod deployed on an x86 node.Ray worker pods deployed on GPU instances (g5.4xlarge).  Deployment Steps  Note: Ensure that the image: field in ray-vllm-deepseek.yml is correctly set to either your custom ECR image URI or the default public ECR image.  Navigate to the directory containing the RayServe configuration and Apply the configuration using kubectl  cd gen-ai/inference/vllm-ray-gpu-deepseek/ envsubst &lt; ray-vllm-deepseek.yml | kubectl apply -f -   Output  namespace/rayserve-vllm created secret/hf-token created configmap/vllm-serve-script created rayservice.ray.io/vllm created   Step4: Monitor the deployment  To monitor the deployment and check the status of the pods, run:  kubectl get pod -n rayserve-vllm   info Note: The image pull process may take up to 8 minutes on the first deployment. Subsequent updates will leverage the local cache. This can be optimized by building leaner images containing only necessary dependencies.  NAME READY STATUS RESTARTS AGE vllm-raycluster-7qwlm-head-vkqsc 2/2 Running 0 8m47s vllm-raycluster-7qwlm-worker-gpu-group-vh2ng 0/1 PodInitializing 0 8m47s   This deployment also creates a DeepSeek-R1 service with multiple ports:  8265 - Ray Dashboard8000 - DeepSeek-R1 model endpoint  Run the following command to verify the services:  kubectl get svc -n rayserve-vllm NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE vllm ClusterIP 172.20.208.16 &lt;none&gt; 6379/TCP,8265/TCP,10001/TCP,8000/TCP,8080/TCP 48m vllm-head-svc ClusterIP 172.20.239.237 &lt;none&gt; 6379/TCP,8265/TCP,10001/TCP,8000/TCP,8080/TCP 37m vllm-serve-svc ClusterIP 172.20.196.195 &lt;none&gt; 8000/TCP 37m   To access the Ray dashboard, you can port-forward the relevant port to your local machine:  kubectl -n rayserve-vllm port-forward svc/vllm 8265:8265   You can then access the web UI at http://localhost:8265, which displays the deployment of jobs and actors within the Ray ecosystem.  info Model deploymen takes around 4 mins        ","version":"Next","tagName":"h2"},{"title":"Test the DeepSeek-R1 Model​","type":1,"pageTitle":"DeepSeek-R1 on EKS with Ray and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/ray-vllm-deepseek#test-the-deepseek-r1-model","content":" Now it's time to test the DeepSeek-R1-Distill-Llama-8B chat model.  First, execute a port forward to the vllm-serve-svc Service using kubectl:  kubectl -n rayserve-vllm port-forward svc/vllm-serve-svc 8000:8000   Run a test inference request:  curl -X POST http://localhost:8000/v1/chat/completions -H &quot;Content-Type: application/json&quot; -d '{ &quot;model&quot;: &quot;deepseek-ai/DeepSeek-R1-Distill-Llama-8B&quot;, &quot;messages&quot;: [{&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: “Explain about DeepSeek model?”}], &quot;stream&quot;: false }'   Response:  {&quot;id&quot;:&quot;chatcmpl-b86feed9-1482-4d1c-981d-085651d12813&quot;,&quot;object&quot;:&quot;chat.completion&quot;,&quot;created&quot;:1739001265,&quot;model&quot;:&quot;deepseek-ai/DeepSeek-R1-Distill-Llama-8B&quot;,&quot;choices&quot;:[{&quot;index&quot;:0,&quot;message&quot;:{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;&lt;think&gt;\\n\\n&lt;/think&gt;\\n\\nDeepSeek is a powerful AI search engine developed by the Chinese Company DeepSeek Inc. It is designed to solve complex STEM (Science, Technology, Engineering, and Mathematics) problems through precise reasoning and efficient computation. The model works bymidtTeX, combining large-scale dataset and strong reasoning capabilities to provide accurate and reliable answers.\\n\\n### Key Features:\\n1. **AI-powered Search**: DeepSeek uses advanced AI techniques to understand and analyze vast amounts of data, providing more accurate and relevant search results compared to traditional search engines.\\n2. **Reasoning and Problem-solving**: The model is equipped with strong reasoning capabilities, enabling it to solve complex STEM problems, answer research-level questions, and assist in decision-making.\\n3. **Customization**: DeepSeek can be tailored to specific domains or industries, allowing it to be adapted for various use cases such as academic research, business analysis, and technical problem-solving.\\n4. **Efficiency**: The model is highly efficient, fast, and scalable, making it suitable for a wide range of applications and handling large-scale data processing tasks.\\n5. **Domain Expertise**: It can be trained on domain-specific data and knowledge, making it highly specialized in particular fields like mathematics, programming, or engineering.\\n\\n### Applications:\\n- **Education and Research**: Assisting students and researchers with complex STEM problems and research questions.\\n- **Business Analysis**: aiding in market research, data analysis, and strategic decision-making.\\n- **Technical Support**: solving technical issues and providing troubleshooting assistance.\\n- **Custom Problem Solving**: addressing specific challenges in various fields by leveraging domain-specific knowledge.\\n\\nDeepSeek is a valuable tool for any individual or organizationengaged in STEM fields or requires advanced AI-powered search and reasoning capabilities.&quot;,&quot;tool_calls&quot;:[]},&quot;logprobs&quot;:null,&quot;finish_reason&quot;:&quot;stop&quot;,&quot;stop_reason&quot;:null}],&quot;usage&quot;:{&quot;prompt_tokens&quot;:10,&quot;total_tokens&quot;:359,&quot;completion_tokens&quot;:349,&quot;prompt_tokens_details&quot;:null},&quot;prompt_logprobs&quot;:null}%   ","version":"Next","tagName":"h2"},{"title":"Deploy Open Web Ui​","type":1,"pageTitle":"DeepSeek-R1 on EKS with Ray and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/ray-vllm-deepseek#deploy-open-web-ui","content":" Now, let's deploy the open-source Open WebUI, which provides a ChatGPT-style chat interface to interact with the DeepSeek model deployed on EKS. Open WebUI will use the model service to send requests and receive responses.  Deploy Open WebUI  Verify the YAML file gen-ai/inference/vllm-ray-gpu-deepseek/open-webui.yaml for Open WebUI. This is deployed as a container in EKS, and it communicates with the model service.Apply the Open WebUI deployment:  cd gen-ai/inference/vllm-ray-gpu-deepseek/ kubectl apply -f open-webui.yaml   Output:  namespace/openai-webui created deployment.apps/open-webui created service/open-webui created   Accessing the Open WebUI  To open the web UI, port-forward the Open WebUI service:  kubectl -n open-webui port-forward svc/open-webui 8080:80   Then, open a browser and navigate to: http://localhost:8080  You will see a registration page. Register with your name, email, and password.            After submitting a request, you can monitor the GPU and CPU usage returning to normal:    ","version":"Next","tagName":"h2"},{"title":"Key Takeaways​","type":1,"pageTitle":"DeepSeek-R1 on EKS with Ray and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/ray-vllm-deepseek#key-takeaways","content":" 1. Model Initialization &amp; Memory Allocation  Once deployed, the model automatically detects CUDA and initializes its execution environment.GPU memory is allocated dynamically, with 90% utilization reserved for model weights (14.99 GiB), activation memory (0.85 GiB), and KV Cache (4.17 GiB).Expect some initial delay during the first model load, as weights are fetched and optimized for inference.  2. Inference Execution &amp; Optimization  The model supports multiple tasks but defaults to text generation (generate).Flash Attention is enabled, reducing memory overhead and improving inference speed.CUDA Graph Capture is applied, allowing for faster repeated inferences—but if OOM issues arise, decreasing gpu_memory_utilization or enabling eager execution can help.  3. Token Generation &amp; Performance Metrics  The model will initially show 0 tokens/sec for prompt throughput, as it waits for input.Once inference starts, token generation throughput stabilizes at ~29 tokens/sec.GPU KV Cache utilization starts at ~12.5% and increases as more tokens are processed—ensuring smoother text generation over time.  4. System Resource Utilization  Expect 8 CPU and 8 CUDA blocks handling parallel execution.Inference concurrency is limited to 4 requests for 8192 tokens per request, meaning simultaneous requests may be queued if the model is fully utilized.If encountering memory spikes, lowering max_num_seqs will help reduce GPU strain.  5. Monitoring &amp; Observability  You can track average prompt throughput, generation speed, and GPU KV Cache usage in the logs.If inference slows down, check the logs for pending or swapped requests, which may indicate memory pressure or scheduling delays.Real-time observability (e.g., tracing request latency) is disabled by default, but can be enabled for deeper monitoring.  What to Expect Post-Deployment?  The model will take a few minutes to initialize due to memory profiling and CUDA graph optimization.Once running, you should see stable throughput of ~29 tokens/sec with efficient memory usage.If performance dips, adjust KV Cache size, decrease memory utilization, or enable eager execution for better stability.  ","version":"Next","tagName":"h2"},{"title":"Cleanup​","type":1,"pageTitle":"DeepSeek-R1 on EKS with Ray and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/ray-vllm-deepseek#cleanup","content":" Finally, we'll provide instructions for cleaning up and deprovisioning the resources when they are no longer needed.  Delete the RayCluster  cd data-on-eks/gen-ai/inference/vllm-rayserve-gpu kubectl delete -f open-webui.yaml kubectl delete -f ray-vllm-deepseek.yml   cd data-on-eks/ai-ml/jark-stack/terraform/monitoring kubectl delete -f serviceMonitor.yaml kubectl delete -f podMonitor.yaml   Destroy the EKS Cluster and resources  export AWS_DEAFULT_REGION=&quot;DEPLOYED_EKS_CLUSTER_REGION&gt;&quot; cd data-on-eks/ai-ml/jark-stack/terraform/ &amp;&amp; chmod +x cleanup.sh ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"Deploying Stable Diffusion v2 with GPUs, Ray Serve and Gradio","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/inference/GPUs/stablediffusion-gpus","content":"","keywords":"","version":"Next"},{"title":"What is Stable Diffusion?​","type":1,"pageTitle":"Deploying Stable Diffusion v2 with GPUs, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/GPUs/stablediffusion-gpus#what-is-stable-diffusion","content":" Stable Diffusion is a cutting-edge text-to-image model that generates stunning, detailed images from text descriptions. It's a powerful tool for artists, designers, and anyone who wants to unleash their imagination through image generation. This model stands out by offering a high degree of creative control and flexibility in the image generation process.  ","version":"Next","tagName":"h3"},{"title":"Deploying the Solution​","type":1,"pageTitle":"Deploying Stable Diffusion v2 with GPUs, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/GPUs/stablediffusion-gpus#deploying-the-solution","content":" Let's get Stable Diffusion v2-1 up and running on Amazon EKS! In this section, we'll cover:  Prerequisites: Ensuring you have everything in place.Infrastructure Setup: Creating your EKS cluster and preparing it for deployment.Deploying the Ray Cluster: The core of your image generation pipeline, providing scalability and efficiency.Building the Gradio Web UI: A user-friendly interface for interacting with Stable Diffusion.  Prerequisites 👈  ","version":"Next","tagName":"h2"},{"title":"Deploying the Ray Cluster with Stable Diffusion Model​","type":1,"pageTitle":"Deploying Stable Diffusion v2 with GPUs, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/GPUs/stablediffusion-gpus#deploying-the-ray-cluster-with-stable-diffusion-model","content":" Once the jark-stack cluster is deployed, you can proceed to use kubectl to deploy the ray-service-stablediffusion.yaml from /data-on-eks/gen-ai/inference/stable-diffusion-rayserve-gpu/ path.  In this step, we will deploy the Ray Serve cluster, which comprises one Head Pod on x86 CPU instances using Karpenter autoscaling, as well as Ray workers on g5.2xlarge instances, autoscaled by Karpenter.  Let's take a closer look at the key files used in this deployment and understand their functionalities before proceeding with the deployment:  ray_serve_sd.py:This script sets up a FastAPI application with two main components deployed using Ray Serve, which enables scalable model serving on GPU-equipped infrastructure: StableDiffusionV2 Deployment: This class initializes the Stable Diffusion V2 model using a scheduler and moves it to a GPU for processing. It includes functionality to generate images based on textual prompts, with the image size customizable via the input parameter.APIIngress: This FastAPI endpoint acts as an interface to the Stable Diffusion model. It exposes a GET method on the /imagine path that takes a text prompt and an optional image size. It generates an image using the Stable Diffusion model and returns it as a PNG file. ray-service-stablediffusion.yaml:This RayServe deployment pattern sets up a scalable service for hosting the Stable Diffusion model on Amazon EKS with GPU support. It creates a dedicated namespace and configures a RayService with autoscaling capabilities to efficiently manage resource utilization based on incoming traffic. The deployment ensures that the model, served under the RayService umbrella, can automatically adjust between 1 and 4 replicas, depending on demand, with each replica requiring a GPU. This pattern makes use of custom container images designed to maximize performance and minimizes startup delays by ensuring that heavy dependencies are preloaded.  ","version":"Next","tagName":"h2"},{"title":"Deploy the Stable Diffusion V2 Model​","type":1,"pageTitle":"Deploying Stable Diffusion v2 with GPUs, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/GPUs/stablediffusion-gpus#deploy-the-stable-diffusion-v2-model","content":" Ensure the cluster is configured locally  aws eks --region us-west-2 update-kubeconfig --name jark-stack   Deploy RayServe Cluster  cd data-on-eks/gen-ai/inference/stable-diffusion-rayserve-gpu kubectl apply -f ray-service-stablediffusion.yaml   Verify the deployment by running the following commands  info If you did not preload container images into the data volume, the deployment process may take up to 10 to 12 minutes. The Head Pod is expected to be ready within 2 to 3 minutes, while the Ray Serve worker pod may take up to 10 minutes for image retrieval and Model deployment from Huggingface.  This deployment establishes a Ray head pod running on an x86 instance and a worker pod on a GPU G5 instance as shown below.  kubectl get pods -n stablediffusion NAME READY STATUS rservice-raycluster-hb4l4-worker-gpu-worker-group-z8gdw 1/1 Running stablediffusion-service-raycluster-hb4l4-head-4kfzz 2/2 Running   If you have preload container images into the data volume, you can find the message showing Container image &quot;public.ecr.aws/data-on-eks/ray2.11.0-py310-gpu-stablediffusion:latest&quot; already present on machine in the output of kubectl describe pod -n stablediffusion.  kubectl describe pod -n stablediffusion ... Events: Type Reason Age From Message ---- ------ ---- ---- ------- Warning FailedScheduling 41m default-scheduler 0/8 nodes are available: 1 Insufficient cpu, 3 Insufficient memory, 8 Insufficient nvidia.com/gpu. preemption: 0/8 nodes are available: 8 No preemption victims found for incoming pod. Normal Nominated 41m karpenter Pod should schedule on: nodeclaim/gpu-ljvhl Normal Scheduled 40m default-scheduler Successfully assigned stablediffusion/stablediffusion-raycluster-ms6pl-worker-gpu-85d22 to ip-100-64-136-72.us-west-2.compute.internal Normal Pulled 40m kubelet Container image &quot;public.ecr.aws/data-on-eks/ray2.11.0-py310-gpu-stablediffusion:latest&quot; already present on machine Normal Created 40m kubelet Created container wait-gcs-ready Normal Started 40m kubelet Started container wait-gcs-ready Normal Pulled 39m kubelet Container image &quot;public.ecr.aws/data-on-eks/ray2.11.0-py310-gpu-stablediffusion:latest&quot; already present on machine Normal Created 39m kubelet Created container worker Normal Started 38m kubelet Started container worker   This deployment also sets up a stablediffusion service with multiple ports configured; port 8265 is designated for the Ray dashboard and port 8000 for the Stable Diffusion model endpoint.  kubectl get svc -n stablediffusion NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) stablediffusion-service NodePort 172.20.223.142 &lt;none&gt; 8080:30213/TCP,6379:30386/TCP,8265:30857/TCP,10001:30666/TCP,8000:31194/TCP stablediffusion-service-head-svc NodePort 172.20.215.100 &lt;none&gt; 8265:30170/TCP,10001:31246/TCP,8000:30376/TCP,8080:32646/TCP,6379:31846/TCP stablediffusion-service-serve-svc NodePort 172.20.153.125 &lt;none&gt; 8000:31459/TCP   For the Ray dashboard, you can port-forward these ports individually to access the web UI locally using localhost.  kubectl port-forward svc/stablediffusion-service 8266:8265 -n stablediffusion   Access the web UI via http://localhost:8265 . This interface displays the deployment of jobs and actors within the Ray ecosystem.    The screenshots provided will show the Serve deployment and the Ray Cluster deployment, offering a visual overview of the setup and operational status.    ","version":"Next","tagName":"h3"},{"title":"Deploying the Gradio WebUI App​","type":1,"pageTitle":"Deploying Stable Diffusion v2 with GPUs, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/GPUs/stablediffusion-gpus#deploying-the-gradio-webui-app","content":" Discover how to create a user-friendly chat interface using Gradio that integrates seamlessly with deployed models.  Let's move forward with setting up the Gradio app as a Docker container running on localhost. This setup will enable interaction with the Stable Diffusion XL model, which is deployed using RayServe.  ","version":"Next","tagName":"h2"},{"title":"Build the Gradio app docker container​","type":1,"pageTitle":"Deploying Stable Diffusion v2 with GPUs, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/GPUs/stablediffusion-gpus#build-the-gradio-app-docker-container","content":" First, lets build the docker container for the client app.  cd data-on-eks/gen-ai/inference/gradio-ui docker build --platform=linux/amd64 \\ -t gradio-app:sd \\ --build-arg GRADIO_APP=&quot;gradio-app-stable-diffusion.py&quot; \\ .   ","version":"Next","tagName":"h3"},{"title":"Deploy the Gradio container​","type":1,"pageTitle":"Deploying Stable Diffusion v2 with GPUs, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/GPUs/stablediffusion-gpus#deploy-the-gradio-container","content":" Deploy the Gradio app as a container on localhost using docker:  docker run --rm -it -p 7860:7860 -p 8000:8000 gradio-app:sd   info If you are not running Docker Desktop on your machine and using something like finch instead then you will need to additional flags for a custom host-to-IP mapping inside the container. docker run --rm -it \\ --add-host ray-service:&lt;workstation-ip&gt; \\ -e &quot;SERVICE_NAME=http://ray-service:8000&quot; \\ -p 7860:7860 gradio-app:sd   Invoke the WebUI​  Open your web browser and access the Gradio WebUI by navigating to the following URL:  Running on local URL: http://localhost:7860  You should now be able to interact with the Gradio application from your local machine.    ","version":"Next","tagName":"h3"},{"title":"Ray Autoscaling​","type":1,"pageTitle":"Deploying Stable Diffusion v2 with GPUs, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/GPUs/stablediffusion-gpus#ray-autoscaling","content":" The Ray Autoscaling configuration detailed in the ray-serve-stablediffusion.yaml file leverages the capabilities of Ray on Kubernetes to dynamically scale applications based on computational needs.  Incoming Traffic: Incoming requests to your stable-diffusion deployment trigger Ray Serve to monitor the load on existing replicas.Metrics-Based Scaling: Ray Serve tracks the average number of ongoing requests per replica. This configuration has target_num_ongoing_requests_per_replica set to 1. If this metric exceeds the threshold, it signals the need for more replicas.Replica Creation (Within Node): If a node has sufficient GPU capacity, Ray Serve will attempt to add a new replica within the existing node. Your deployment requests 1 GPU per replica (ray_actor_options: num_gpus: 1).Node Scaling (Karpenter): If a node cannot accommodate an additional replica (e.g., only one GPU per node), Ray will signal to Kubernetes that it needs more resources. Karpenter observes pending pod requests from Kubernetes and provisions a new g5 GPU node to fulfill the resource need.Replica Creation (Across Nodes): Once the new node is ready, Ray Serve schedules an additional replica on the newly provisioned node.  To simulate autoscaling:  Generate Load: Create a script or use a load testing tool to send a burst of image generation requests to your stable diffusion service.Observe (Ray Dashboard): Access the Ray Dashboard (via port-forwarding or public NLB if configured) at http://your-cluster/dashboard. Observe how these metrics change: The number of replicas for your deployment. The number of nodes in your Ray cluster.Observe (Kubernetes): Use kubectl get pods -n stablediffusion to see the creation of new pods. Use kubectl get nodes to observe new nodes provisioned by Karpenter.  ","version":"Next","tagName":"h3"},{"title":"Cleanup​","type":1,"pageTitle":"Deploying Stable Diffusion v2 with GPUs, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/GPUs/stablediffusion-gpus#cleanup","content":" Finally, we'll provide instructions for cleaning up and deprovisioning the resources when they are no longer needed.  Step1: Delete Gradio Container  Ctrl-c on the localhost terminal window where docker run is running to kill the container running the Gradio app. Optionally clean up the docker image  docker rmi gradio-app:sd   Step2: Delete Ray Cluster  cd data-on-eks/gen-ai/inference/stable-diffusion-rayserve-gpu kubectl delete -f ray-service-stablediffusion.yaml   Step3: Cleanup the EKS Cluster This script will cleanup the environment using -target option to ensure all the resources are deleted in correct order.  cd data-on-eks/ai-ml/jark-stack/ ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"NVIDIA NIM LLM Deployment on Amazon EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/inference/GPUs/nvidia-nim-llama3","content":"","keywords":"","version":"Next"},{"title":"What is NVIDIA NIM?​","type":1,"pageTitle":"NVIDIA NIM LLM Deployment on Amazon EKS","url":"/data-on-eks/docs/gen-ai/inference/GPUs/nvidia-nim-llama3#what-is-nvidia-nim","content":" NVIDIA NIM makes it easy for IT and DevOps teams to self-host large language models (LLMs) in their own managed environments while still providing developers with industry standard APIs that allow them to build powerful copilots, chatbots, and AI assistants that can transform their business. Leveraging NVIDIA’s cutting-edge GPU acceleration and scalable deployment, NIM offers the fastest path to inference with unparalleled performance.  ","version":"Next","tagName":"h2"},{"title":"Why NIM?​","type":1,"pageTitle":"NVIDIA NIM LLM Deployment on Amazon EKS","url":"/data-on-eks/docs/gen-ai/inference/GPUs/nvidia-nim-llama3#why-nim","content":" NIM abstracts away model inference internals such as execution engine and runtime operations. They are also the most performant option available whether it be with TRT-LLM, vLLM or others.  NIMs are packaged as container images on a per model/model family basis. Each NIM container is with a model, such as meta/llama3-8b-instruct. These containers include a runtime that runs on any NVIDIA GPU with sufficient GPU memory, but some model/GPU combinations are optimized. NIM automatically downloads the model from NVIDIA NGC Catalog, leveraging a local filesystem cache if available.  ","version":"Next","tagName":"h2"},{"title":"Overview of this deployment pattern on Amazon EKS​","type":1,"pageTitle":"NVIDIA NIM LLM Deployment on Amazon EKS","url":"/data-on-eks/docs/gen-ai/inference/GPUs/nvidia-nim-llama3#overview-of-this-deployment-pattern-on-amazon-eks","content":" This pattern combines the capabilities of NVIDIA NIM, Amazon Elastic Kubernetes Service (EKS), and various AWS services to deliver a high-performance and cost-optimized model serving infrastructure.  NVIDIA NIM Container Images: NVIDIA NIM provides a streamlined approach to hosting LLM models like Llama3 within containerized environments. This allows customers to leverage their private models while ensuring seamless integration with existing infrastructure. We will bring detailed setup steps to NIM deployments. Karpenter for Instance-Level Scaling: Karpenter, an open-source node provisioning project, enables rapid and efficient scaling of Amazon EKS clusters at the instance level. This ensures that the model serving infrastructure can adapt to dynamic workload demands, optimizing resource utilization and cost-effectiveness. Spot instances: Considering LLMs are stateless, customers can leverage spot instances to significantly reduce costs. Amazon Elastic File System (EFS): Amazon EFS provides scalable, elastic file storage for use with Amazon EKS. It allows multiple pods to access the same file system concurrently, making it ideal for storing and sharing model artifacts, datasets, and other persistent data across the cluster. EFS automatically grows and shrinks as you add and remove files, eliminating the need for capacity planning and management. Terraform with EKS Blueprints: To streamline the deployment and management of this solution, we leverage Terraform and EKS Blueprints. This infrastructure-as-code approach enables automated provisioning of the entire stack, ensuring consistency, reproducibility, and efficient resource management.  By combining these components, our proposed solution delivers a powerful and cost-effective model serving infrastructure tailored for large language models. With NVIDIA NIM's seamless integration, Amazon EKS's scalability with Karpenter, customers can achieve high performance while minimizing infrastructure costs.    ","version":"Next","tagName":"h2"},{"title":"Deploying the Solution​","type":1,"pageTitle":"NVIDIA NIM LLM Deployment on Amazon EKS","url":"/data-on-eks/docs/gen-ai/inference/GPUs/nvidia-nim-llama3#deploying-the-solution","content":" ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"NVIDIA NIM LLM Deployment on Amazon EKS","url":"/data-on-eks/docs/gen-ai/inference/GPUs/nvidia-nim-llama3#prerequisites","content":" Before getting started with NVIDIA NIM, ensure you have the following:  Click to expand the NVIDIA NIM account setup details NVIDIA AI Enterprise Account Register for an NVIDIA AI Enterprise account. If you don't have one, you can sign up for a trial account using this link. NGC API Key Log in to your NVIDIA AI Enterprise account Navigate to the NGC (NVIDIA GPU Cloud) portal Generate a personal API key: Go to your account settings or navigate directly to: https://org.ngc.nvidia.com/setup/personal-keysClick on &quot;Generate Personal Key&quot;Ensure that at least &quot;NGC Catalog&quot; is selected from the &quot;Services Included&quot; dropdownCopy and securely store your API key, the key should have a prefix with nvapi- Validate NGC API Key and Test Image Pull To ensure your API key is valid and working correctly: Set up your NGC API key as an environment variable: export NGC_API_KEY=&lt;your_api_key_here&gt; Authenticate Docker with the NVIDIA Container Registry: echo &quot;$NGC_API_KEY&quot; | docker login nvcr.io --username '$oauthtoken' --password-stdin Test pulling an image from NGC: docker pull nvcr.io/nim/meta/llama3-8b-instruct:latest You do not have to wait for it to complete, just to make sure the API key is valid to pull the image.  The following are required to run this tutorial  An active AWS account with admin equivalent permissionsaws clikubectlTerraform  ","version":"Next","tagName":"h3"},{"title":"Deploy​","type":1,"pageTitle":"NVIDIA NIM LLM Deployment on Amazon EKS","url":"/data-on-eks/docs/gen-ai/inference/GPUs/nvidia-nim-llama3#deploy","content":" Clone the repository  git clone https://github.com/awslabs/data-on-eks.git   1. Configure the NGC API Key  Retrieve your NGC API key from NVIDIA and set it as an environment variable:  export TF_VAR_ngc_api_key=&lt;replace-with-your-NGC-API-KEY&gt;   2. Installation  Important Note: Ensure that you update the region in the variables.tf file before deploying the blueprint. Additionally, confirm that your local region setting matches the specified region to prevent any discrepancies. For example, set your export AWS_DEFAULT_REGION=&quot;&lt;REGION&gt;&quot; to the desired region:  Run the installation script:  info This pattern deploys a model called nvcr.io/nim/meta/llama3-8b-instruct. You can modify the nim_models variable in the variables.tf file to add more models. Multiple models can be deployed simultaneously using this pattern.  caution Ensure you have specified enough GPUs for each model before enabling additional models through these variables. Also, verify that your AWS account has access to sufficient GPUs. This pattern uses Karpenter to scale GPU nodes, restricted to G5 instances by default. You can modify the Karpenter node pool to include other instances like p4 and p5 if needed.  cd data-on-eks/ai-ml/nvidia-triton-server export TF_VAR_enable_nvidia_nim=true export TF_VAR_enable_nvidia_triton_server=false ./install.sh   This process will take approximately 20 minutes to complete.  3. Verify the Installation  Once the installation finishes, you may find the configure_kubectl command from the output. Run the following to configure EKS cluster access  # Creates k8s config file to authenticate with EKS aws eks --region us-west-2 update-kubeconfig --name nvidia-triton-server   Check the status of your pods deployed  kubectl get all -n nim   You should see output similar to the following:  Click to expand the deployment details NAME READY STATUS RESTARTS AGE pod/nim-llm-llama3-8b-instruct-0 1/1 Running 0 4h2m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/nim-llm-llama3-8b-instruct ClusterIP 172.20.5.230 &lt;none&gt; 8000/TCP 4h2m service/nim-llm-llama3-8b-instruct-sts ClusterIP None &lt;none&gt; 8000/TCP 4h2m NAME READY AGE statefulset.apps/nim-llm-llama3-8b-instruct 1/1 4h2m NAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE horizontalpodautoscaler.autoscaling/nim-llm-llama3-8b-instruct StatefulSet/nim-llm-llama3-8b-instruct 2/5 1 5 1 4h2m   The llama3-8b-instruct model is deployed with a StatefulSet in nim namespace. As it is running, Karpenter provisioned a GPU Check the Karpenter provisioned node.  kubectl get node -l type=karpenter -L node.kubernetes.io/instance-type   NAME STATUS ROLES AGE VERSION INSTANCE-TYPE ip-100-64-77-39.us-west-2.compute.internal Ready &lt;none&gt; 4m46s v1.30.0-eks-036c24b g5.2xlarge   4. Verify the deployed model  Once all pods in nim namespace is ready with 1/1 status, use below command to verify it's ready to serve the traffic. To verify, expose the model serving service with port-forward using kubectl.  kubectl port-forward -n nim service/nim-llm-llama3-8b-instruct 8000   Then you can invoke the deployed model with a simple HTTP request with curl command.  curl -X 'POST' \\ &quot;http://localhost:8000/v1/completions&quot; \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ &quot;model&quot;: &quot;meta/llama3-8b-instruct&quot;, &quot;prompt&quot;: &quot;Once upon a time&quot;, &quot;max_tokens&quot;: 64 }'   you will see similar output like the following  { &quot;id&quot;: &quot;cmpl-63a0b66aeda1440c8b6ca1ce3583b173&quot;, &quot;object&quot;: &quot;text_completion&quot;, &quot;created&quot;: 1719742336, &quot;model&quot;: &quot;meta/llama3-8b-instruct&quot;, &quot;choices&quot;: [ { &quot;index&quot;: 0, &quot;text&quot;: &quot;, there was a young man named Jack who lived in a small village at the foot of a vast and ancient forest. Jack was a curious and adventurous soul, always eager to explore the world beyond his village. One day, he decided to venture into the forest, hoping to discover its secrets.\\nAs he wandered deeper into&quot;, &quot;logprobs&quot;: null, &quot;finish_reason&quot;: &quot;length&quot;, &quot;stop_reason&quot;: null } ], &quot;usage&quot;: { &quot;prompt_tokens&quot;: 5, &quot;total_tokens&quot;: 69, &quot;completion_tokens&quot;: 64 } }   ","version":"Next","tagName":"h3"},{"title":"Testing the Llama3 model deployed with NIM​","type":1,"pageTitle":"NVIDIA NIM LLM Deployment on Amazon EKS","url":"/data-on-eks/docs/gen-ai/inference/GPUs/nvidia-nim-llama3#testing-the-llama3-model-deployed-with-nim","content":" It's time to test the Llama3 just deployed. First setup a simple environment for the testing.  cd data-on-eks/gen-ai/inference/nvidia-nim/nim-client python3 -m venv .venv source .venv/bin/activate pip install openai   We have prepared some prompts in prompts.txt , it contains 20 prompts. You can run following commands with the prompts to verify the generated outputs.  python3 client.py --input-prompts prompts.txt --results-file results.txt   You will see an output something like below:  Loading inputs from `prompts.txt`... Model meta/llama3-8b-instruct - Request 14: 4.68s (4678.46ms) Model meta/llama3-8b-instruct - Request 10: 6.43s (6434.32ms) Model meta/llama3-8b-instruct - Request 3: 7.82s (7824.33ms) Model meta/llama3-8b-instruct - Request 1: 8.54s (8540.69ms) Model meta/llama3-8b-instruct - Request 5: 8.81s (8807.52ms) Model meta/llama3-8b-instruct - Request 12: 8.95s (8945.85ms) Model meta/llama3-8b-instruct - Request 18: 9.77s (9774.75ms) Model meta/llama3-8b-instruct - Request 16: 9.99s (9994.51ms) Model meta/llama3-8b-instruct - Request 6: 10.26s (10263.60ms) Model meta/llama3-8b-instruct - Request 0: 10.27s (10274.35ms) Model meta/llama3-8b-instruct - Request 4: 10.65s (10654.39ms) Model meta/llama3-8b-instruct - Request 17: 10.75s (10746.08ms) Model meta/llama3-8b-instruct - Request 11: 10.86s (10859.91ms) Model meta/llama3-8b-instruct - Request 15: 10.86s (10857.15ms) Model meta/llama3-8b-instruct - Request 8: 11.07s (11068.78ms) Model meta/llama3-8b-instruct - Request 2: 12.11s (12105.07ms) Model meta/llama3-8b-instruct - Request 19: 12.64s (12636.42ms) Model meta/llama3-8b-instruct - Request 9: 13.37s (13370.75ms) Model meta/llama3-8b-instruct - Request 13: 13.57s (13571.28ms) Model meta/llama3-8b-instruct - Request 7: 14.90s (14901.51ms) Storing results into `results.txt`... Accumulated time for all requests: 206.31 seconds (206309.73 milliseconds) PASS: NVIDIA NIM example Actual execution time used with concurrency 20 is: 14.92 seconds (14.92 milliseconds)   Output for results.txt should look like the following  Click to expand the partial output The key differences between traditional machine learning models and very large language models (vLLM) are: 1. **Scale**: vLLMs are massive, with billions of parameters, whereas traditional models typically have millions. 2. **Training data**: vLLMs are trained on vast amounts of text data, often sourced from the internet, whereas traditional models are trained on smaller, curated datasets. 3. **Architecture**: vLLMs often use transformer architectures, which are designed for sequential data like text, whereas traditional models may use feedforward networks or recurrent neural networks. 4. **Training objectives**: vLLMs are often trained using masked language modeling or next sentence prediction tasks, whereas traditional models may use classification, regression, or clustering objectives. 5. **Evaluation metrics**: vLLMs are typically evaluated using metrics like perplexity, accuracy, or fluency, whereas traditional models may use metrics like accuracy, precision, or recall. 6. **Interpretability**: vLLMs are often less interpretable due to their massive size and complex architecture, whereas traditional models may be more interpretable due to their smaller size and simpler architecture. These differences enable vLLMs to excel in tasks like language translation, text generation, and conversational AI, whereas traditional models are better suited for tasks like image classification or regression. ========= TensorRT (Triton Runtime) optimizes LLM (Large Language Model) inference on NVIDIA hardware by: 1. **Model Pruning**: Removing unnecessary weights and connections to reduce model size and computational requirements. 2. **Quantization**: Converting floating-point models to lower-precision integer formats (e.g., INT8) to reduce memory bandwidth and improve performance. 3. **Kernel Fusion**: Combining multiple kernel launches into a single launch to reduce overhead and improve parallelism. 4. **Optimized Tensor Cores**: Utilizing NVIDIA's Tensor Cores for matrix multiplication, which provides significant performance boosts. 5. **Batching**: Processing multiple input batches concurrently to improve throughput. 6. **Mixed Precision**: Using a combination of floating-point and integer precision to balance accuracy and performance. 7. **Graph Optimization**: Reordering and reorganizing the computation graph to minimize memory access and optimize data transfer. By applying these optimizations, TensorRT can significantly accelerate LLM inference on NVIDIA hardware, achieving faster inference times and improved performance. =========   ","version":"Next","tagName":"h3"},{"title":"Open WebUI Deployment​","type":1,"pageTitle":"NVIDIA NIM LLM Deployment on Amazon EKS","url":"/data-on-eks/docs/gen-ai/inference/GPUs/nvidia-nim-llama3#open-webui-deployment","content":" info Open WebUI is compatible only with models that work with the OpenAI API server and Ollama.  1. Deploy the WebUI  Deploy the Open WebUI by running the following command:  kubectl apply -f data-on-eks/gen-ai/inference/nvidia-nim/openai-webui-deployment.yaml   2. Port Forward to Access WebUI  Use kubectl port-forward to access the WebUI locally:  kubectl port-forward svc/open-webui 8081:80 -n openai-webui   3. Access the WebUI  Open your browser and go to http://localhost:8081  4. Sign Up  Sign up using your name, email, and a dummy password.  5. Start a New Chat  Click on New Chat and select the model from the dropdown menu, as shown in the screenshot below:    6. Enter Test Prompt  Enter your prompt, and you will see the streaming results, as shown below:    ","version":"Next","tagName":"h2"},{"title":"Performance Testing with NVIDIA GenAI-Perf Tool​","type":1,"pageTitle":"NVIDIA NIM LLM Deployment on Amazon EKS","url":"/data-on-eks/docs/gen-ai/inference/GPUs/nvidia-nim-llama3#performance-testing-with-nvidia-genai-perf-tool","content":" GenAI-Perf is a command line tool for measuring the throughput and latency of generative AI models as served through an inference server.  GenAI-Perf can be used as standard tool to benchmark with other models deployed with inference server. But this tool requires a GPU. To make it easier, we provide you a pre-configured manifest genaiperf-deploy.yaml to run the tool.  cd data-on-eks/gen-ai/inference/nvidia-nim kubectl apply -f genaiperf-deploy.yaml   Once the pod is ready with running status 1/1, can execute into the pod.  export POD_NAME=$(kubectl get po -l app=tritonserver -ojsonpath='{.items[0].metadata.name}') kubectl exec -it $POD_NAME -- bash   Run the testing to the deployed NIM Llama3 model  genai-perf \\ -m meta/llama3-8b-instruct \\ --service-kind openai \\ --endpoint v1/completions \\ --endpoint-type completions \\ --num-prompts 100 \\ --random-seed 123 \\ --synthetic-input-tokens-mean 200 \\ --synthetic-input-tokens-stddev 0 \\ --output-tokens-mean 100 \\ --output-tokens-stddev 0 \\ --tokenizer hf-internal-testing/llama-tokenizer \\ --concurrency 10 \\ --measurement-interval 4000 \\ --profile-export-file my_profile_export.json \\ --url nim-llm-llama3-8b-instruct.nim:8000   You should see similar output like the following  2024-07-11 03:32 [INFO] genai_perf.parser:166 - Model name 'meta/llama3-8b-instruct' cannot be used to create artifact directory. Instead, 'meta_llama3-8b-instruct' will be used. 2024-07-11 03:32 [INFO] genai_perf.wrapper:137 - Running Perf Analyzer : 'perf_analyzer -m meta/llama3-8b-instruct --async --input-data artifacts/meta_llama3-8b-instruct-openai-completions-concurrency10/llm_inputs.json --endpoint v1/completions --service-kind openai -u nim-llm.nim:8000 --measurement-interval 4000 --stability-percentage 999 --profile-export-file artifacts/meta_llama3-8b-instruct-openai-completions-concurrency10/my_profile_export.json -i http --concurrency-range 10' LLM Metrics ┏━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓ ┃ Statistic ┃ avg ┃ min ┃ max ┃ p99 ┃ p90 ┃ p75 ┃ ┡━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩ │ Request latency (ns) │ 3,934,624,446 │ 3,897,758,114 │ 3,936,987,882 │ 3,936,860,185 │ 3,936,429,317 │ 3,936,333,682 │ │ Num output token │ 112 │ 105 │ 119 │ 119 │ 117 │ 115 │ │ Num input token │ 200 │ 200 │ 200 │ 200 │ 200 │ 200 │ └──────────────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┘ Output token throughput (per sec): 284.64 Request throughput (per sec): 2.54   You should be able to see the metrics that genai-perf collects, including Request latency, Out token throughput, Request throughput.  To understand the command line options, please refer to this documentation.  ","version":"Next","tagName":"h2"},{"title":"Observability​","type":1,"pageTitle":"NVIDIA NIM LLM Deployment on Amazon EKS","url":"/data-on-eks/docs/gen-ai/inference/GPUs/nvidia-nim-llama3#observability","content":" As part of this blueprint, we have also deployed the Kube Prometheus stack, which provides Prometheus server and Grafana deployments for monitoring and observability.  First, let's verify the services deployed by the Kube Prometheus stack:  kubectl get svc -n monitoring   You should see output similar to this:  NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kube-prometheus-stack-grafana ClusterIP 172.20.225.77 &lt;none&gt; 80/TCP 10m kube-prometheus-stack-kube-state-metrics ClusterIP 172.20.237.248 &lt;none&gt; 8080/TCP 10m kube-prometheus-stack-operator ClusterIP 172.20.118.163 &lt;none&gt; 443/TCP 10m kube-prometheus-stack-prometheus ClusterIP 172.20.132.214 &lt;none&gt; 9090/TCP,8080/TCP 10m kube-prometheus-stack-prometheus-node-exporter ClusterIP 172.20.213.178 &lt;none&gt; 9100/TCP 10m prometheus-adapter ClusterIP 172.20.171.163 &lt;none&gt; 443/TCP 10m prometheus-operated ClusterIP None &lt;none&gt; 9090/TCP 10m   The NVIDIA NIM LLM service expose metrics via /metrics endpoint from nim-llm-llama3-8b-instruct service at port 8000. Verify it by running  kubectl get svc -n nim kubectl port-forward -n nim svc/nim-llm-llama3-8b-instruct 8000 curl localhost:8000/metrics # run this in another terminal   ","version":"Next","tagName":"h2"},{"title":"Grafana Dashboard​","type":1,"pageTitle":"NVIDIA NIM LLM Deployment on Amazon EKS","url":"/data-on-eks/docs/gen-ai/inference/GPUs/nvidia-nim-llama3#grafana-dashboard","content":" We provides a pre-configured Grafana dashboard to better visualize NIM status. In the Grafana dashboard below, it contains several important metrics:  Time to First Token (TTFT): The latency between the initial inference request to the model and the return of the first token.Inter-Token Latency (ITL): The latency between each token after the first.Total Throughput: The total number of tokens generated per second by the NIM.  You can find more metrics description from this document.    You can monitor metrics such as Time-to-First-Token, Inter-Token-Latency, KV Cache Utilization metrics.    To view the Grafana dashboard to monitor these metrics, follow the steps below:  Click to expand details 1. Retrieve the Grafana password. The password is saved in the AWS Secret Manager. Below Terraform command will show you the secret name. terraform output grafana_secret_name Then use the output secret name to run below command, aws secretsmanager get-secret-value --secret-id &lt;grafana_secret_name_output&gt; --region $AWS_REGION --query &quot;SecretString&quot; --output text 2. Expose the Grafana Service Use port-forward to expose the Grafana service. kubectl port-forward svc/kube-prometheus-stack-grafana 3000:80 -n monitoring 3. Login to Grafana: Open your web browser and navigate to http://localhost:3000.Login with the username admin and the password retrieved from AWS Secrets Manager. 4. Open the NIM Monitoring Dashboard: Once logged in, click &quot;Dashboards&quot; on the left sidebar and search &quot;nim&quot;You can find the Dashboard NVIDIA NIM Monitoring from the listClick and entering to the dashboard. You should now see the metrics displayed on the Grafana dashboard, allowing you to monitor the performance your NVIDIA NIM service deployment.  info As of writing this guide, NVIDIA also provides an example Grafana dashboard. You can check it from here.  ","version":"Next","tagName":"h3"},{"title":"Cleanup​","type":1,"pageTitle":"NVIDIA NIM LLM Deployment on Amazon EKS","url":"/data-on-eks/docs/gen-ai/inference/GPUs/nvidia-nim-llama3#cleanup","content":" To remove all resources created by this deployment, run:  ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"Deploying Multiple Large Language Models with NVIDIA Triton Server and vLLM","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-NVIDIATritonServer","content":"","keywords":"","version":"Next"},{"title":"What to Expect​","type":1,"pageTitle":"Deploying Multiple Large Language Models with NVIDIA Triton Server and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-NVIDIATritonServer#what-to-expect","content":" When you deploy everything as described, you can expect quick response times for your inference requests. Below is an example output from running the triton-client.py script with the Llama-2-7b-chat-hf and Mistral-7B-Instruct-v0.2 models:  Click to expand comparison results Run 1: Llama2\tRun 2: Mistral7bpython3 triton-client.py --model-name llama2 --input-prompts prompts.txt --results-file llama2_results.txt\tpython3 triton-client.py --model-name mistral7b --input-prompts prompts.txt --results-file mistral_results.txt Loading inputs from prompts.txt...\tLoading inputs from prompts.txt... Model llama2 - Request 11: 0.00 ms\tModel mistral7b - Request 3: 0.00 ms Model llama2 - Request 15: 0.02 ms\tModel mistral7b - Request 14: 0.00 ms Model llama2 - Request 3: 0.00 ms\tModel mistral7b - Request 11: 0.00 ms Model llama2 - Request 8: 0.01 ms\tModel mistral7b - Request 15: 0.00 ms Model llama2 - Request 0: 0.01 ms\tModel mistral7b - Request 5: 0.00 ms Model llama2 - Request 9: 0.01 ms\tModel mistral7b - Request 0: 0.01 ms Model llama2 - Request 14: 0.01 ms\tModel mistral7b - Request 7: 0.01 ms Model llama2 - Request 16: 0.00 ms\tModel mistral7b - Request 13: 0.00 ms Model llama2 - Request 19: 0.02 ms\tModel mistral7b - Request 9: 0.00 ms Model llama2 - Request 4: 0.02 ms\tModel mistral7b - Request 16: 0.01 ms Model llama2 - Request 10: 0.02 ms\tModel mistral7b - Request 18: 0.01 ms Model llama2 - Request 6: 0.01 ms\tModel mistral7b - Request 4: 0.01 ms Model llama2 - Request 1: 0.02 ms\tModel mistral7b - Request 8: 0.01 ms Model llama2 - Request 7: 0.02 ms\tModel mistral7b - Request 1: 0.01 ms Model llama2 - Request 18: 0.01 ms\tModel mistral7b - Request 6: 0.00 ms Model llama2 - Request 12: 0.01 ms\tModel mistral7b - Request 12: 0.00 ms Model llama2 - Request 2: 0.01 ms\tModel mistral7b - Request 17: 0.00 ms Model llama2 - Request 17: 0.02 ms\tModel mistral7b - Request 2: 0.01 ms Model llama2 - Request 13: 0.01 ms\tModel mistral7b - Request 19: 0.01 ms Model llama2 - Request 5: 0.02 ms\tModel mistral7b - Request 10: 0.02 ms Storing results into llama2_results.txt...\tStoring results into mistral_results.txt... Total time for all requests: 0.00 seconds (0.18 milliseconds)\tTotal time for all requests: 0.00 seconds (0.11 milliseconds) PASS: vLLM example\tPASS: vLLM example  Triton Server Internals and Backend Integration  NVIDIA Triton Inference Server is engineered for high-performance inference across a wide range of model types and deployment scenarios. The core strength of Triton lies in its support for various backends, which provide the flexibility and power needed to handle different types of models and workloads effectively.  Once a request reaches the Triton K8s Service, it is processed by the Triton Server. The server supports dynamic batching, allowing multiple inference requests to be grouped together to optimize processing. This is particularly useful in scenarios with high throughput requirements, as it helps reduce latency and improve overall performance.  Requests are then managed by scheduled queues, ensuring that each model's inference requests are processed in an orderly manner. The Triton Server supports selective and compute model loading, which means it can dynamically load models based on the current workload and resource availability. This feature is crucial for efficiently managing the resources in a multi-model deployment.  The backbone of Triton’s inference capabilities are its various backends, including TensorRT-LLM and vLLM:  TensorRT-LLM: TensorRT-LLM backend optimizes large language model (LLM) inference on NVIDIA GPUs. Leveraging TensorRT's high-performance capabilities, it accelerates inference, providing low-latency and high-throughput performance. TensorRT is particularly well-suited for deep learning models that require intensive computational resources, making it ideal for real-time AI applications.  vLLM: vLLM backend is specifically designed to handle various LLM workloads. It offers efficient memory management and execution pipelines tailored for large models. This backend ensures that memory resources are used optimally, allowing for the deployment of very large models without running into memory bottlenecks. vLLM is crucial for applications that need to serve multiple large models simultaneously, providing a robust and scalable solution.    ","version":"Next","tagName":"h2"},{"title":"Mistralai/Mistral-7B-Instruct-v0.2​","type":1,"pageTitle":"Deploying Multiple Large Language Models with NVIDIA Triton Server and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-NVIDIATritonServer#mistralaimistral-7b-instruct-v02","content":" Mistralai/Mistral-7B-Instruct-v0.2 is a state-of-the-art large language model designed to provide high-quality, instructive responses. Trained on a diverse dataset, it excels in understanding and generating human-like text across a variety of topics. Its capabilities make it suitable for applications requiring detailed explanations, complex queries, and natural language understanding.  ","version":"Next","tagName":"h3"},{"title":"Meta-llama/Llama-2-7b-chat-hf​","type":1,"pageTitle":"Deploying Multiple Large Language Models with NVIDIA Triton Server and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-NVIDIATritonServer#meta-llamallama-2-7b-chat-hf","content":" Meta-llama/Llama-2-7b-chat-hf is an advanced conversational AI model developed by Meta. It is optimized for chat applications, delivering coherent and contextually relevant responses. With its robust training on extensive dialogue datasets, this model excels in maintaining engaging and dynamic conversations, making it ideal for customer service bots, interactive agents, and other chat-based applications.  ","version":"Next","tagName":"h3"},{"title":"Deploying the Solution​","type":1,"pageTitle":"Deploying Multiple Large Language Models with NVIDIA Triton Server and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-NVIDIATritonServer#deploying-the-solution","content":" To get started with deploying both mistralai/Mistral-7B-Instruct-v0.2 and meta-llama/Llama-2-7b-chat-hf on Amazon EKS, we will cover the necessary prerequisites and guide you through the deployment process step by step. This process includes setting up the infrastructure, deploying the NVIDIA Triton Inference Server, and creating the Triton client Python application that sends gRPC requests to the Triton server for inferencing.  danger Important: Deploying on g5.24xlarge instances, which are equipped with multiple GPUs, can be expensive. Ensure you carefully monitor and manage your usage to avoid unexpected costs. Consider setting budget alerts and usage limits to keep track of your expenditures.  Prerequisites 👈  ","version":"Next","tagName":"h2"},{"title":"NVIDIA Triton Server with vLLM Backend​","type":1,"pageTitle":"Deploying Multiple Large Language Models with NVIDIA Triton Server and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-NVIDIATritonServer#nvidia-triton-server-with-vllm-backend","content":" This blueprint uses Triton helm chart to install and configure the Triton server on Amazon EKS. The deployment is configured using the following Terraform code in the blueprint.  Click to expand the deployment code module &quot;triton_server_vllm&quot; { depends_on = [module.eks_blueprints_addons.kube_prometheus_stack] source = &quot;aws-ia/eks-data-addons/aws&quot; version = &quot;~&gt; 1.32.0&quot; # ensure to update this to the latest/desired version oidc_provider_arn = module.eks.oidc_provider_arn enable_nvidia_triton_server = false nvidia_triton_server_helm_config = { version = &quot;1.0.0&quot; timeout = 120 wait = false namespace = kubernetes_namespace_v1.triton.metadata[0].name values = [ &lt;&lt;-EOT replicaCount: 1 image: repository: nvcr.io/nvidia/tritonserver tag: &quot;24.06-vllm-python-py3&quot; serviceAccount: create: false name: ${kubernetes_service_account_v1.triton.metadata[0].name} modelRepositoryPath: s3://${module.s3_bucket.s3_bucket_id}/model_repository environment: - name: model_name value: ${local.default_model_name} - name: &quot;LD_PRELOAD&quot; value: &quot;&quot; - name: &quot;TRANSFORMERS_CACHE&quot; value: &quot;/home/triton-server/.cache&quot; - name: &quot;shm-size&quot; value: &quot;5g&quot; - name: &quot;NCCL_IGNORE_DISABLED_P2P&quot; value: &quot;1&quot; - name: tensor_parallel_size value: &quot;1&quot; - name: gpu_memory_utilization value: &quot;0.9&quot; - name: dtype value: &quot;auto&quot; secretEnvironment: - name: &quot;HUGGING_FACE_TOKEN&quot; secretName: ${kubernetes_secret_v1.huggingface_token.metadata[0].name} key: &quot;HF_TOKEN&quot; resources: limits: cpu: 6 memory: 25Gi nvidia.com/gpu: 4 requests: cpu: 6 memory: 25Gi nvidia.com/gpu: 4 nodeSelector: NodeGroupType: g5-gpu-karpenter type: karpenter tolerations: - key: &quot;nvidia.com/gpu&quot; operator: &quot;Exists&quot; effect: &quot;NoSchedule&quot; EOT ] } }   Note: The container image that's being used for Triton server is nvcr.io/nvidia/tritonserver:24.02-vllm-python-py3 and is vLLM backend enabled. You can choose appropriate tags in the NGC Catalog.  Model Repository: The Triton Inference Server serves models from one or more model repositories specified at server startup. Triton can access models from locally accessible file paths and cloud storage locations like Amazon S3.  The directories and files that compose a model repository must follow a required layout. The repository layout should be structured as follows:  Click to expand the model directory hierarchy &lt;model-repository-path&gt;/ &lt;model-name&gt;/ [config.pbtxt] [&lt;output-labels-file&gt; ...] &lt;version&gt;/ &lt;model-definition-file&gt; &lt;version&gt;/ &lt;model-definition-file&gt; &lt;model-name&gt;/ [config.pbtxt] [&lt;output-labels-file&gt; ...] &lt;version&gt;/ &lt;model-definition-file&gt; &lt;version&gt;/ &lt;model-definition-file&gt; ... ------------- Example: ------------- model-repository/ mistral-7b/ config.pbtxt 1/ model.py llama-2/ config.pbtxt 1/ model.py   For vLLM enabled Triton model, the model_repository can be found at gen-ai/inference/vllm-nvidia-triton-server-gpu/model_repository location. During the deployment, the blueprint creates an S3 bucket and syncs the local model_repository contents to the S3 bucket.  model.py: This script uses vLLM library as Triton backend framework and initializes a TritonPythonModel class by loading the model configuration and configuring vLLM engine. The huggingface_hub library's login function is used to establish access to the hugging face repository for model access. It then starts an asyncio event loop to process the received requests asynchronously. The script has several functions that processes the inference requests, issues the requests to vLLM backend and return the response.  config.pbtxt: This is a model configuration file that specifies parameters such as  Name - The name of the model must match the name of the model repository directory containing the model.max_batch_size - The max_batch_size value indicates the maximum batch size that the model supports for the type of batching that can be exploited by TritonInputs and Outputs - Each model input and output must specify a name, datatype, and shape. An input shape indicates the shape of an input tensor expected by the model and by Triton in inference requests. An output shape indicates the shape of an output tensor produced by the model and returned by Triton in response to an inference request. Input and output shapes are specified by a combination of max_batch_size and the dimensions specified by input dims or output dims.  ","version":"Next","tagName":"h3"},{"title":"Verify Deployment​","type":1,"pageTitle":"Deploying Multiple Large Language Models with NVIDIA Triton Server and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-NVIDIATritonServer#verify-deployment","content":" To verify that the Triton Inference Server has been deployed successfully, run the following command:  kubectl get all -n triton-vllm   Output below shows that there is one pod running the Triton server, which is hosting two models. There is one service to interact with the models, and one ReplicaSet for Triton servers. Deployment will be horizontally scaled based on custom metrics and the HPA object.  NAME READY STATUS RESTARTS AGE pod/nvidia-triton-server-triton-inference-server-c49bd559d-szlpf 1/1 Running 0 13m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/nvidia-triton-server-triton-inference-server ClusterIP 172.20.193.97 &lt;none&gt; 8000/TCP,8001/TCP,8002/TCP 13m service/nvidia-triton-server-triton-inference-server-metrics ClusterIP 172.20.5.247 &lt;none&gt; 8080/TCP 13m NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/nvidia-triton-server-triton-inference-server 1/1 1 1 13m NAME DESIRED CURRENT READY AGE replicaset.apps/nvidia-triton-server-triton-inference-server-c49bd559d 1 1 1 13m NAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE horizontalpodautoscaler.autoscaling/nvidia-triton-server-triton-inference-server Deployment/nvidia-triton-server-triton-inference-server &lt;unknown&gt;/80%, &lt;unknown&gt;/80% 1 5 1 13m   This output indicates that the Triton server pods are running, the services are correctly set up, and the deployment is functioning as expected. The Horizontal Pod Autoscaler is also active, ensuring that the number of pods scales based on the specified metrics.  ","version":"Next","tagName":"h3"},{"title":"Testing Llama-2-7b Chat and Mistral-7b Chat Models​","type":1,"pageTitle":"Deploying Multiple Large Language Models with NVIDIA Triton Server and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-NVIDIATritonServer#testing-llama-2-7b-chat-and-mistral-7b-chat-models","content":" It's time to test both the Llama-2-7b chat and Mistral-7b chat models. We will run the following commands with the same prompts to verify the outputs generated by both models.  First, execute a port forward to the Triton-inference-server Service using kubectl:  kubectl -n triton-vllm port-forward svc/nvidia-triton-server-triton-inference-server 8001:8001   Next, run the Triton client for each model using the same prompts:  cd data-on-eks/gen-ai/inference/vllm-nvidia-triton-server-gpu/triton-client python3 -m venv .venv source .venv/bin/activate pip install tritonclient[all] python3 triton-client.py --model-name mistral7b --input-prompts prompts.txt --results-file mistral_results.txt   You will see an output something like below:  python3 triton-client.py --model-name mistral7b --input-prompts prompts.txt --results-file mistral_results.txt Loading inputs from `prompts.txt`... Model mistral7b - Request 3: 0.00 ms Model mistral7b - Request 14: 0.00 ms Model mistral7b - Request 11: 0.00 ms Model mistral7b - Request 15: 0.00 ms Model mistral7b - Request 5: 0.00 ms Model mistral7b - Request 0: 0.01 ms Model mistral7b - Request 7: 0.01 ms Model mistral7b - Request 13: 0.00 ms Model mistral7b - Request 9: 0.00 ms Model mistral7b - Request 16: 0.01 ms Model mistral7b - Request 18: 0.01 ms Model mistral7b - Request 4: 0.01 ms Model mistral7b - Request 8: 0.01 ms Model mistral7b - Request 1: 0.01 ms Model mistral7b - Request 6: 0.00 ms Model mistral7b - Request 12: 0.00 ms Model mistral7b - Request 17: 0.00 ms Model mistral7b - Request 2: 0.01 ms Model mistral7b - Request 19: 0.01 ms Model mistral7b - Request 10: 0.02 ms Storing results into `mistral_results.txt`... Total time for all requests: 0.00 seconds (0.11 milliseconds) PASS: vLLM example   Output for mistral_results.txt should like below:  Click to expand Mistral results partial output &lt;s&gt;[INST]&lt;&lt;SYS&gt;&gt; Keep short answers of no more than 100 sentences. &lt;&lt;/SYS&gt;&gt; What are the key differences between traditional machine learning models and very large language models (vLLM)? [/INST] Traditional machine learning models (MLMs) are trained on specific datasets and features to learn patterns and make predictions based on that data. They require labeled data for training and are limited by the size and diversity of the training data. MLMs can be effective for solving structured problems, such as image recognition or speech recognition. Very Large Language Models (vLLMs), on the other hand, are trained on vast amounts of text data using deep learning techniques. They learn to generate human-like text based on the input they receive. vLLMs can understand and generate text in a more contextually aware and nuanced way than MLMs. They can also perform a wider range of tasks, such as text summarization, translation, and question answering. However, vLLMs can be more computationally expensive and require large amounts of data and power to train. They also have the potential to generate inaccurate or biased responses if not properly managed. ========= &lt;s&gt;[INST]&lt;&lt;SYS&gt;&gt; Keep short answers of no more than 100 sentences. &lt;&lt;/SYS&gt;&gt; Can you explain how TensorRT optimizes LLM inference on NVIDIA hardware? [/INST] TensorRT is a deep learning inference optimization tool from NVIDIA. It utilizes dynamic and static analysis to optimize deep learning models for inference on NVIDIA GPUs. For Maximum Likelihood Modeling (LLM) inference, TensorRT applies the following optimizations: 1. Model Optimization: TensorRT converts the LLM model into an optimized format, such as INT8 or FP16, which reduces memory usage and increases inference speed. 2. Engine Generation: TensorRT generates a custom engine for the optimized model, which includes kernel optimizations for specific NVIDIA GPUs. 3. Memory Optimization: TensorRT minimizes memory usage by using data layout optimizations, memory pooling, and other techniques. 4. Execution Optimization: TensorRT optimizes the execution of the engine on the GPU by scheduling and managing thread execution, reducing latency and increasing throughput. 5. I/O Optimization: TensorRT optimizes input and output data transfer between the host and the GPU, reducing the time spent on data transfer and increasing overall inference speed. 6. Dynamic Batching: TensorRT dynamically batches input data to maximize GPU utilization and reduce latency. 7. Multi-Streaming: TensorRT supports multi-streaming, allowing multiple inference requests to be processed concurrently, increasing overall throughput. 8. Profiling and Monitoring: TensorRT provides profiling and monitoring tools to help developers identify performance bottlenecks and optimize their models further. Overall, TensorRT optimizes LLM inference on NVIDIA hardware by applying a combination of model, engine, memory, execution, I/O, dynamic batching, multi-streaming, and profiling optimizations.   Now, try to run the inference on the Llama-2-7b-chat model with the same prompts and observe the output under a new file called llama2_results.txt.  python3 triton-client.py --model-name llama2 --input-prompts prompts.txt --results-file llama2_results.txt   Output should look like:  python3 triton-client.py --model-name llama2 --input-prompts prompts.txt --results-file llama2_results.txt Loading inputs from `prompts.txt`... Model llama2 - Request 11: 0.00 ms Model llama2 - Request 15: 0.02 ms Model llama2 - Request 3: 0.00 ms Model llama2 - Request 8: 0.03 ms Model llama2 - Request 5: 0.02 ms Model llama2 - Request 0: 0.00 ms Model llama2 - Request 14: 0.00 ms Model llama2 - Request 16: 0.01 ms Model llama2 - Request 19: 0.02 ms Model llama2 - Request 4: 0.01 ms Model llama2 - Request 1: 0.01 ms Model llama2 - Request 10: 0.01 ms Model llama2 - Request 9: 0.01 ms Model llama2 - Request 7: 0.01 ms Model llama2 - Request 18: 0.01 ms Model llama2 - Request 12: 0.00 ms Model llama2 - Request 2: 0.00 ms Model llama2 - Request 6: 0.00 ms Model llama2 - Request 17: 0.01 ms Model llama2 - Request 13: 0.01 ms Storing results into `llama2_results.txt`... Total time for all requests: 0.00 seconds (0.18 milliseconds) PASS: vLLM example   ","version":"Next","tagName":"h3"},{"title":"Observability​","type":1,"pageTitle":"Deploying Multiple Large Language Models with NVIDIA Triton Server and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-NVIDIATritonServer#observability","content":" ","version":"Next","tagName":"h2"},{"title":"Observability with AWS CloudWatch and Neuron Monitor​","type":1,"pageTitle":"Deploying Multiple Large Language Models with NVIDIA Triton Server and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-NVIDIATritonServer#observability-with-aws-cloudwatch-and-neuron-monitor","content":" This blueprint deploys the CloudWatch Observability Agent as a managed add-on, providing comprehensive monitoring for containerized workloads. It includes container insights for tracking key performance metrics such as CPU and memory utilization. Additionally, the blueprint integrates GPU metrics using NVIDIA's DCGM plugin, which is essential for monitoring high-performance GPU workloads. For machine learning models running on AWS Inferentia or Trainium, the Neuron Monitor plugin is added to capture and report Neuron-specific metrics.  All metrics, including container insights, GPU performance, and Neuron metrics, are sent to Amazon CloudWatch, where you can monitor and analyze them in real-time. After the deployment is complete, you should be able to access these metrics directly from the CloudWatch console, allowing you to manage and optimize your workloads effectively.  In addition to deploying CloudWatch EKS addon, we have also deployed the Kube Prometheus stack, which provides Prometheus server and Grafana deployments for monitoring and observability.  First, let's verify the services deployed by the Kube Prometheus stack:  kubectl get svc -n monitoring   You should see output similar to this:  kubectl get svc -n monitoring NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kube-prometheus-stack-grafana ClusterIP 172.20.252.10 &lt;none&gt; 80/TCP 11d kube-prometheus-stack-kube-state-metrics ClusterIP 172.20.34.181 &lt;none&gt; 8080/TCP 11d kube-prometheus-stack-operator ClusterIP 172.20.186.93 &lt;none&gt; 443/TCP 11d kube-prometheus-stack-prometheus ClusterIP 172.20.147.64 &lt;none&gt; 9090/TCP,8080/TCP 11d kube-prometheus-stack-prometheus-node-exporter ClusterIP 172.20.171.165 &lt;none&gt; 9100/TCP 11d prometheus-operated ClusterIP None &lt;none&gt; 9090/TCP 11d   To expose the NVIDIA Triton server metrics, we have deployed a metrics service(nvidia-triton-server-triton-inference-server-metrics) on port 8080. Verify it by running  kubectl get svc -n triton-vllm   The output should be:  kubectl get svc -n triton-vllm NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE nvidia-triton-server-triton-inference-server ClusterIP 172.20.193.97 &lt;none&gt; 8000/TCP,8001/TCP,8002/TCP 34m nvidia-triton-server-triton-inference-server-metrics ClusterIP 172.20.5.247 &lt;none&gt; 8080/TCP 34m   This confirms that the NVIDIA Triton server metrics are being scraped by the Prometheus server. You can visualize these metrics using the Grafana dashboard.  In the Grafana dashboard below, you can see several important metrics:  Average GPU Power Usage: This gauge shows the current power usage of the GPU, which is crucial for monitoring the efficiency and performance of your inference tasks.Compute Time (milliseconds): This bar graph displays the time taken to compute inference requests, helping identify any latency issues.Cumulative Inference Requests: This graph shows the total number of inference requests processed over time, providing insights into the workload and performance trends.Queue Time (milliseconds): This line graph indicates the time requests spend in the queue before being processed, highlighting potential bottlenecks in the system.    To create a new Grafana dashboard to monitor these metrics, follow the steps below:  - Port-forward Grafana service: kubectl port-forward svc/kube-prometheus-stack-grafana 8080:80 -n monitoring - Grafana Admin user admin - Get secret name from Terraform output terraform output grafana_secret_name - Get admin user password aws secretsmanager get-secret-value --secret-id &lt;grafana_secret_name_output&gt; --region $AWS_REGION --query &quot;SecretString&quot; --output text   Login to Grafana:  Open your web browser and navigate to http://localhost:8080.Login with the username admin and the password retrieved from AWS Secrets Manager.  Import an Open Source Grafana Dashboard:  Once logged in, click on the &quot;+&quot; icon on the left sidebar and select &quot;Import&quot;.Enter the following URL to import the dashboard JSON: Triton Server Grafana DashboardFollow the prompts to complete the import process.  You should now see the metrics displayed on your new Grafana dashboard, allowing you to monitor the performance and health of your NVIDIA Triton Inference Server deployment.    ","version":"Next","tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Deploying Multiple Large Language Models with NVIDIA Triton Server and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-NVIDIATritonServer#conclusion","content":" Deploying and managing multiple large language models on Amazon EKS with NVIDIA Triton Inference Server and vLLM backend offers a powerful and scalable solution for modern AI applications. By following this blueprint, you have set up the necessary infrastructure, deployed the Triton server, and configured robust observability using the Kube Prometheus stack and Grafana.  ","version":"Next","tagName":"h2"},{"title":"Cleanup​","type":1,"pageTitle":"Deploying Multiple Large Language Models with NVIDIA Triton Server and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-NVIDIATritonServer#cleanup","content":" Finally, we'll provide instructions for cleaning up and deprovisioning the resources when they are no longer needed.  Cleanup the EKS Cluster:This script will cleanup the environment using -target option to ensure all the resources are deleted in correct order.  export AWS_DEAFULT_REGION=&quot;DEPLOYED_EKS_CLUSTER_REGION&gt;&quot; cd data-on-eks/ai-ml/nvidia-triton-server/ &amp;&amp; chmod +x cleanup.sh ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"Deploying LLMs with RayServe and vLLM","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-rayserve","content":"","keywords":"","version":"Next"},{"title":"RayServe and vLLM Backend Integration​","type":1,"pageTitle":"Deploying LLMs with RayServe and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-rayserve#rayserve-and-vllm-backend-integration","content":" vLLM: is a high-throughput and memory-efficient inference and serving engine for large language models (LLMs), specifically designed to optimize deployment and inference performance. A standout feature is PagedAttention, an innovative attention algorithm inspired by virtual memory paging in operating systems. PagedAttention efficiently manages the attention key and value tensors (KV cache) by storing them in non-contiguous memory spaces, which significantly reduces memory fragmentation and waste. Checkout the blog for comparing vLLM with HuggingFace Transformers (HF) and HuggingFace Text Generation Inference (TGI).  vLLM employs continuous batching of incoming requests, optimizing the use of computational resources and improving inference speed by grouping multiple requests together. This dynamic batching maximizes throughput and reduces latency. The engine also features optimized CUDA kernels for accelerated model execution on GPUs. Another key advantage is vLLM's efficient memory sharing during parallel sampling, where multiple output sequences are generated from a single prompt. This reduces memory usage by up to 55% and improves throughput by up to 2.2 times.  ","version":"Next","tagName":"h2"},{"title":"Mistralai/Mistral-7B-Instruct-v0.2​","type":1,"pageTitle":"Deploying LLMs with RayServe and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-rayserve#mistralaimistral-7b-instruct-v02","content":" In this guide, we are deploying the Mistral-7B-Instruct-v0.2 model with RayServe and vLLM. You can easily adapt these instructions to deploy any large language model, such as Llama2. Mistral-7B-Instruct-v0.2 is a state-of-the-art large language model designed to provide high-quality, instructive responses. Trained on a diverse dataset, it excels in understanding and generating human-like text across a variety of topics, making it suitable for applications requiring detailed explanations, complex queries, and natural language understanding.  Deploying the Solution 👈  ","version":"Next","tagName":"h3"},{"title":"Deploying Mistral-7B-Instruct-v0.2 with RayServe and vLLM​","type":1,"pageTitle":"Deploying LLMs with RayServe and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-rayserve#deploying-mistral-7b-instruct-v02-with-rayserve-and-vllm","content":" Having deployed the EKS cluster with all the necessary components, we can now proceed with the steps to deploy Mistral-7B-Instruct-v0.2 using RayServe and vLLM.  Step1: As a prerequisite for this deployment, you must ensure that you have access to the model via your Hugging Face account:    Step2: Export Hugginface Hub Token  To deploy the Mistral-7B-Instruct-v0.2 model with RayServe and vLLM backend, it's essential to configure your Hugging Face Hub token as an environment variable. This token is required for authentication and accessing the model. For guidance on how to create and manage your Hugging Face tokens, please visit Hugging Face Token Management.  Replace Your-Hugging-Face-Hub-Token-Value with your actual Hugging Face Hub Token. This step ensures that your deployment has the necessary authentication to access the Mistral-7B-Instruct-v0.2 model.  export HUGGING_FACE_HUB_TOKEN=$(echo -n &quot;Your-Hugging-Face-Hub-Token-Value&quot; | base64)   Step3: To deploy the RayService cluster, navigate to the directory containing the ray-service-vllm.yaml file and execute the deployment command. For more information about the RayService YAML configuration, you can refer to the file located at data-on-eks/gen-ai/inference/vllm-rayserve-gpu/ray-service-vllm.yaml.  Execute the following commands in your terminal. This will apply the RayService configuration and deploy the cluster on your EKS setup.  cd data-on-eks/gen-ai/inference/vllm-rayserve-gpu envsubst &lt; ray-service-vllm.yaml| kubectl apply -f -   Step4: Verify the deployment by running the following commands  To ensure that the deployment has been successfully completed, run the following commands:  info Deployment process may take up to 10 minutes. The Head Pod is expected to be ready within 5 to 6 minutes, while the Ray Serve worker pod may take up to 10 minutes for image retrieval and Model deployment from Huggingface.  According to the RayServe configuration, you will have one Ray head pod running on an x86 instance and one worker pod running on a g5 GPU instance. You can modify the RayServe YAML file to run multiple replicas; however, be aware that each additional replica will require a separate GPU, potentially creating new instances.  kubectl get pod -n rayserve-vllm   NAME READY STATUS RESTARTS AGE vllm-raycluster-nvtxg-head-g2cg8 1/1 Running 0 47m vllm-raycluster-nvtxg-worker-gpu-group-msl5p 1/1 Running 0 47m   This deployment also configures a Mistral service with multiple ports. Port 8265 is designated for the Ray dashboard, and port 8000 is for the Mistral model endpoint.  Run the following command to verify the services:  kubectl get svc -n rayserve-vllm NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE vllm ClusterIP 172.20.208.16 &lt;none&gt; 6379/TCP,8265/TCP,10001/TCP,8000/TCP,8080/TCP 48m vllm-head-svc ClusterIP 172.20.239.237 &lt;none&gt; 6379/TCP,8265/TCP,10001/TCP,8000/TCP,8080/TCP 37m vllm-serve-svc ClusterIP 172.20.196.195 &lt;none&gt; 8000/TCP 37m   To access the Ray dashboard, you can port-forward the relevant port to your local machine:  kubectl -n rayserve-vllm port-forward svc/vllm 8265:8265   You can then access the web UI at http://localhost:8265, which displays the deployment of jobs and actors within the Ray ecosystem.    Once the deployment is complete, the Controller and Proxy status should be HEALTHY and Application status should be RUNNING    ","version":"Next","tagName":"h2"},{"title":"Testing Mistral-7b Chat Model​","type":1,"pageTitle":"Deploying LLMs with RayServe and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-rayserve#testing-mistral-7b-chat-model","content":" Now it's time to test the Mistral-7B chat model. We'll use a Python client script to send prompts to the RayServe inference endpoint and verify the outputs generated by the model. The script reads prompts from a prompts.txt file and writes the responses to a results.txt file in the same location. It also logs the response times and token lengths for each response.  First, execute a port forward to the vllm-serve-svc Service using kubectl:  kubectl -n rayserve-vllm port-forward svc/vllm-serve-svc 8000:8000   client.py uses the HTTP POST method to send a list of prompts to the inference endpoint for text completion and Q&amp;A, targeting the /vllm model endpoint.  You can test with your custom prompts by adding them to the prompts.txt file.  To run the Python client application in a virtual environment, follow these steps:  cd data-on-eks/gen-ai/inference/vllm-rayserve-gpu python3 -m venv .venv source .venv/bin/activate pip install requests python3 client.py   You will see an output something like below in the terminal:  Click to expand Python Client Terminal output python3 client.py INFO:__main__:Warm-up successful INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 INFO:__main__:Response status: 200 Prompt: [INST] Explain the concept of generative adversarial networks (GANs). [/INST] Response Time: 20.72 seconds Token Length: 440 ================================================================================ Prompt: [INST] How does a variational autoencoder (VAE) work? [/INST] Response Time: 18.88 seconds Token Length: 397 ================================================================================ Prompt: [INST] What are the applications of generative AI in healthcare? [/INST] Response Time: 15.22 seconds Token Length: 323 ================================================================================ Prompt: [INST] Describe the process of training a GAN. [/INST] Response Time: 20.82 seconds Token Length: 437 ================================================================================ Prompt: [INST] How can generative AI be used in creative arts? [/INST] Response Time: 21.64 seconds Token Length: 454 ================================================================================ Prompt: [INST] What is the difference between supervised and unsupervised learning in the context of generative AI? [/INST] Response Time: 13.76 seconds Token Length: 310 ================================================================================ Prompt: [INST] Explain the role of a discriminator in a GAN. [/INST] Response Time: 11.96 seconds Token Length: 259 ================================================================================ Prompt: [INST] How can generative AI improve natural language processing (NLP)? [/INST] Response Time: 19.92 seconds Token Length: 393 ================================================================================ Prompt: [INST] What are the ethical considerations of using generative AI? [/INST] Response Time: 17.59 seconds Token Length: 361 ================================================================================ Prompt: [INST] How is generative AI used in drug discovery? [/INST] Response Time: 14.31 seconds Token Length: 311 ================================================================================ Prompt: [INST] Describe the architecture of a Transformer model. [/INST] Response Time: 26.96 seconds Token Length: 521 ================================================================================ Prompt: [INST] How can generative AI be applied in the gaming industry? [/INST] Response Time: 16.43 seconds Token Length: 348 ================================================================================ Prompt: [INST] What is the purpose of latent space in generative models? [/INST] Response Time: 11.55 seconds Token Length: 253 ================================================================================ Prompt: [INST] How does text generation with GPT-3 work? [/INST] Response Time: 12.64 seconds Token Length: 265 ================================================================================ Prompt: [INST] What are the challenges of using generative AI in finance? [/INST] Response Time: 18.21 seconds Token Length: 331 ================================================================================ Prompt: [INST] Explain the concept of zero-shot learning in generative AI. [/INST] Response Time: 14.92 seconds Token Length: 340 ================================================================================ Prompt: [INST] How can generative AI be used for image synthesis? [/INST] Response Time: 17.81 seconds Token Length: 352 ================================================================================ Prompt: [INST] What are some real-world applications of deepfakes? [/INST] Response Time: 14.39 seconds Token Length: 284 ================================================================================ Prompt: [INST] How can generative AI contribute to personalized medicine? [/INST] Response Time: 16.90 seconds Token Length: 338 ================================================================================ Prompt: [INST] Describe the use of generative AI in autonomous vehicles. [/INST] Response Time: 13.99 seconds Token Length: 299 ================================================================================   Verify the results.txt file for actual responses for each prompt.  Click to expand Mistral results partial output Prompt: [INST] Explain the theory of relativity. Response: [INST] Explain the theory of relativity. [/INST] The theory of relativity, developed by Albert Einstein, is a fundamental theory in physics that describes the relationship between space and time, and how matter and energy interact within that framework. It is actually composed of two parts: the Special Theory of Relativity, published in 1905, and the General Theory of Relativity, published in 1915. The Special Theory of Relativity is based on two postulates: the first one states that the laws of physics are the same in all inertial frames of reference (frames that are not accelerating); the second one asserts that the speed of light in a vacuum is the same for all observers, regardless of their motion or the source of the light. From these two postulates, several counter-intuitive consequences follow. For example, the length of an object contracts when it is in motion relative to an observer, and time dilation occurs, meaning that a moving clock appears to tick slower than a stationary one. These phenomena have been confirmed by numerous experiments. The General Theory of Relativity is a theory of gravitation, which extended the Special Theory of Relativity by incorporating gravity into the fabric of spacetime. In this theory, mass causes a distortion or curvature in spacetime, which is felt as a gravitational force. This is in contrast to the Newtonian view of gravity as a force acting at a distance between two masses. One of the most famous predictions of General Relativity is the bending of light by gravity, which was first observed during a solar eclipse in 1919. The theory has been extremely successful in explaining various phenomena, such as the precession of Mercury's orbit, the gravitational redshift of light, and the existence of black holes and gravitational waves. In summary, the theory of relativity is a groundbreaking theory in physics that fundamentally changed our understanding of space, time, and matter. It has been incredibly successful in making accurate predictions about the natural world and has stood the test of time through numerous experiments and observations. --------------------------------------------------------------------------------   ","version":"Next","tagName":"h2"},{"title":"Observability​","type":1,"pageTitle":"Deploying LLMs with RayServe and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-rayserve#observability","content":" As part of this blueprint, we have also deployed the Kube Prometheus stack, which provides Prometheus server and Grafana deployments for monitoring and observability.  First, let's verify the services deployed by the Kube Prometheus stack:  kubectl get svc -n kube-prometheus-stack   You should see output similar to this:  kubectl get svc -n kube-prometheus-stack NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kube-prometheus-stack-grafana ClusterIP 172.20.252.10 &lt;none&gt; 80/TCP 11d kube-prometheus-stack-kube-state-metrics ClusterIP 172.20.34.181 &lt;none&gt; 8080/TCP 11d kube-prometheus-stack-operator ClusterIP 172.20.186.93 &lt;none&gt; 443/TCP 11d kube-prometheus-stack-prometheus ClusterIP 172.20.147.64 &lt;none&gt; 9090/TCP,8080/TCP 11d kube-prometheus-stack-prometheus-node-exporter ClusterIP 172.20.171.165 &lt;none&gt; 9100/TCP 11d prometheus-operated ClusterIP None &lt;none&gt; 9090/TCP 11d   After verifying the Kube Prometheus stack services, we need to configure Prometheus to monitor our Ray cluster comprehensively. This requires deploying both ServiceMonitor and PodMonitor resources:  ServiceMonitor is used to collect metrics from the Ray head node, which has a Kubernetes Service exposing its metrics endpoint.PodMonitor is necessary because KubeRay operator does not create a Kubernetes service for the Ray worker Pods. Therefore, we cannot use a ServiceMonitor to scrape metrics from worker Pods and must use PodMonitors CRD instead.  cd data-on-eks/ai-ml/jark-stack/terraform/monitoring   kubectl apply -f serviceMonitor.yaml kubectl apply -f podMonitor.yaml   Grafana and Prometheus Integration  To integrate Grafana and Prometheus with the Ray Dashboard, we set specific environment variables in the Ray cluster configuration:  env: - name: RAY_GRAFANA_HOST value: http://kube-prometheus-stack-grafana.kube-prometheus-stack.svc:80 - name: RAY_PROMETHEUS_HOST value: http://kube-prometheus-stack-prometheus.kube-prometheus-stack.svc:9090   These environment variables are crucial for enabling the embedding of Grafana panels within the Ray Dashboard and for proper communication between Ray, Grafana, and Prometheus:  RAY_GRAFANA_HOST defines the internal Kubernetes service URL for Grafana. The Ray head pod uses this for backend health checks and communication within the cluster.RAY_PROMETHEUS_HOST specifies the internal Kubernetes service URL for Prometheus, allowing Ray to query metrics when needed.  Access Prometheus Web UI  # Forward the port of Prometheus Web UI in the Prometheus server Pod. kubectl port-forward prometheus-kube-prometheus-stack-prometheus-0 -n kube-prometheus-stack 9090:9090   Go to (YOUR_IP):9090/targets (e.g. 127.0.0.1:9090/targets). You should be able to see: podMonitor/kube-prometheus-stack/ray-workers-monitor/0 (1/1 up)serviceMonitor/kube-prometheus-stack/ray-head-monitor/0 (2/2 up)    Access Grafana  - Port-forward Grafana service: kubectl port-forward deployment/kube-prometheus-stack-grafana -n kube-prometheus-stack 3000:3000 # Check (YOUR_IP):3000/login for the Grafana login page (e.g. 127.0.0.1:3000/login). - Grafana Admin user admin - Get secret name from Terraform output terraform output grafana_secret_name - Get admin user password aws secretsmanager get-secret-value --secret-id &lt;grafana_secret_name_output&gt; --region $AWS_REGION --query &quot;SecretString&quot; --output text   Note: kubectl port-forward is not recommended for production use. Refer to this Grafana document for exposing Grafana behind a reverse proxy.  Import Open Source Grafana Dashboards  Create new dashboard by importing JSON file via Dashboards menu.Click 'Dashboards' icon in left panel, 'New', 'Import', then 'Upload JSON file'.Choose a JSON file. Case 1: If you are using Ray 2.24.0, you can use the sample config files in GitHub repository. The file names have a pattern of xxx_grafana_dashboard.json.Case 2: Otherwise, you should import the JSON files from /tmp/ray/session_latest/metrics/grafana/dashboards/ in the head Pod. You can use kubectl cp to copy the files from the head Pod to your local machine. Click “Import”.  TODO: Note that importing the dashboard manually is not ideal. We should find a way to import the dashboard automatically.   In the Grafana dashboard below, you can see several metrics:  Scheduler Task State displays the current number of tasks in a particular state.Active Tasks by Name shows the current number of (live) tasks with a particular name.Scheduler Actor State illustrates the current number of actors in a particular state.Active Actors by Name presents the current number of (live) actors with a particular name.    ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Deploying LLMs with RayServe and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-rayserve#conclusion","content":" Integrating Ray Serve with a vLLM backend offers numerous benefits for large language model (LLM) inference, particularly in terms of efficiency, scalability, and cost-effectiveness. Ray Serve's ability to handle concurrent requests and dynamically batch them ensures optimal GPU utilization, which is crucial for high-throughput LLM applications. The integration with vLLM enhances this further by enabling continuous batching, which significantly improves throughput and reduces latency compared to static batching. Overall, the combination of Ray Serve and vLLM provides a robust, scalable, and cost-efficient solution for deploying LLMs in production.  ","version":"Next","tagName":"h2"},{"title":"Cleanup​","type":1,"pageTitle":"Deploying LLMs with RayServe and vLLM","url":"/data-on-eks/docs/gen-ai/inference/GPUs/vLLM-rayserve#cleanup","content":" Finally, we'll provide instructions for cleaning up and deprovisioning the resources when they are no longer needed.  Delete the RayCluster  cd data-on-eks/gen-ai/inference/vllm-rayserve-gpu kubectl delete -f ray-service-vllm.yaml   cd data-on-eks/ai-ml/jark-stack/terraform/monitoring kubectl delete -f serviceMonitor.yaml kubectl delete -f podMonitor.yaml   Destroy the EKS Cluster and resources  export AWS_DEAFULT_REGION=&quot;DEPLOYED_EKS_CLUSTER_REGION&gt;&quot; cd data-on-eks/ai-ml/jark-stack/terraform/ &amp;&amp; chmod +x cleanup.sh ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"Serving Llama-2-13b Chat Model with Inferentia, Ray Serve and Gradio","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2","content":"","keywords":"","version":"Next"},{"title":"What is Llama-2?​","type":1,"pageTitle":"Serving Llama-2-13b Chat Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2#what-is-llama-2","content":" Llama-2 is a pretrained large language model (LLM) trained on 2 trillion tokens of text and code. It is one of the largest and most powerful LLMs available today. Llama-2 can be used for a variety of tasks, including natural language processing, text generation, and translation.  Llama-2-chat​  Llama-2 is a remarkable language model that has undergone a rigorous training process. It starts with pretraining using publicly available online data. An initial version of Llama-2-chat is then created through supervised fine-tuning. Following that, Llama-2-chat undergoes iterative refinement using Reinforcement Learning from Human Feedback (RLHF), which includes techniques like rejection sampling and proximal policy optimization (PPO). This process results in a highly capable and fine-tuned language model that we will guide you to deploy and utilize effectively on Amazon EKS with Ray Serve.  Llama-2 is available in three different model sizes:  Llama-2-70b: This is the largest Llama-2 model, with 70 billion parameters. It is the most powerful Llama-2 model and can be used for the most demanding tasks.Llama-2-13b: This is a medium-sized Llama-2 model, with 13 billion parameters. It is a good balance between performance and efficiency, and can be used for a variety of tasks.Llama-2-7b: This is the smallest Llama-2 model, with 7 billion parameters. It is the most efficient Llama-2 model and can be used for tasks that do not require the highest level of performance.  ","version":"Next","tagName":"h3"},{"title":"Which Llama-2 model size should I use?​","type":1,"pageTitle":"Serving Llama-2-13b Chat Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2#which-llama-2-model-size-should-i-use","content":" The best Llama-2 model size for you will depend on your specific needs. and it may not always be the largest model for achieving the highest performance. It's advisable to evaluate your needs and consider factors such as computational resources, response time, and cost-efficiency when selecting the appropriate Llama-2 model size. The decision should be based on a comprehensive assessment of your application's goals and constraints.  ","version":"Next","tagName":"h3"},{"title":"Inference on Trn1/Inf2 Instances: Unlocking the Full Potential of Llama-2​","type":1,"pageTitle":"Serving Llama-2-13b Chat Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2#inference-on-trn1inf2-instances-unlocking-the-full-potential-of-llama-2","content":" Llama-2 can be deployed on a variety of hardware platforms, each with its own set of advantages. However, when it comes to maximizing the efficiency, scalability, and cost-effectiveness of Llama-2, AWS Trn1/Inf2 instances shine as the optimal choice.  Scalability and AvailabilityOne of the key challenges in deploying large language models (LLMs) like Llama-2 is the scalability and availability of suitable hardware. Traditional GPU instances often face scarcity due to high demand, making it challenging to provision and scale resources effectively. In contrast, Trn1/Inf2 instances, such as trn1.32xlarge, trn1n.32xlarge, inf2.24xlarge and inf2.48xlarge, are purpose built for high-performance deep learning (DL) training and inference of generative AI models, including LLMs. They offer both scalability and availability, ensuring that you can deploy and scale your Llama-2 models as needed, without resource bottlenecks or delays.  Cost Optimization:Running LLMs on traditional GPU instances can be cost-prohibitive, especially given the scarcity of GPUs and their competitive pricing.Trn1/Inf2 instances provide a cost-effective alternative. By offering dedicated hardware optimized for AI and machine learning tasks, Trn1/Inf2 instances allow you to achieve top-notch performance at a fraction of the cost. This cost optimization enables you to allocate your budget efficiently, making LLM deployment accessible and sustainable.  Performance BoostWhile Llama-2 can achieve high-performance inference on GPUs, Neuron accelerators take performance to the next level. Neuron accelerators are purpose-built for machine learning workloads, providing hardware acceleration that significantly enhances Llama-2's inference speeds. This translates to faster response times and improved user experiences when deploying Llama-2 on Trn1/Inf2 instances.  ","version":"Next","tagName":"h2"},{"title":"Model Specification​","type":1,"pageTitle":"Serving Llama-2-13b Chat Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2#model-specification","content":" The table provides information about the different sizes of Llama-2 models, their weights, and the hardware requirements for deploying them. This information can be used to design the infrastructure required to deploy any size of Llama-2 model. For example, if you want to deploy the Llama-2-13b-chat model, you will need to use an instance type with at least 26 GB of total accelerator memory.  Model\tWeights\tBytes\tParameter Size (Billions)\tTotal Accelerator Memory (GB)\tAccelerator Memory Size for NeuronCore (GB)\tRequired Neuron Cores\tRequired Neuron Accelerators\tInstance Type\ttp_degreeMeta/Llama-2-70b\tfloat16\t2\t70\t140\t16\t9\t5\tinf2.48x\t24 Meta/Llama-2-13b\tfloat16\t2\t13\t26\t16\t2\t1\tinf2.24x\t12 Meta/Llama-2-7b\tfloat16\t2\t7\t14\t16\t1\t1\tinf2.24x\t12  ","version":"Next","tagName":"h3"},{"title":"Example usecase​","type":1,"pageTitle":"Serving Llama-2-13b Chat Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2#example-usecase","content":" A company wants to deploy a Llama-2 chatbot to provide customer support. The company has a large customer base and expects to receive a high volume of chat requests at peak times. The company needs to design an infrastructure that can handle the high volume of requests and provide a fast response time.  The company can use Inferentia2 instances to scale its Llama-2 chatbot efficiently. Inferentia2 instances are specialized hardware accelerators for machine learning tasks. They can provide up to 20x better performance and up to 7x lower cost than GPUs for machine learning workloads.  The company can also use Ray Serve to horizontally scale its Llama-2 chatbot. Ray Serve is a distributed framework for serving machine learning models. It can automatically scale your models up or down based on demand.  To scale its Llama-2 chatbot, the company can deploy multiple Inferentia2 instances and use Ray Serve to distribute the traffic across the instances. This will allow the company to handle a high volume of requests and provide a fast response time.  ","version":"Next","tagName":"h3"},{"title":"Solution Architecture​","type":1,"pageTitle":"Serving Llama-2-13b Chat Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2#solution-architecture","content":" In this section, we will delve into the architecture of our solution, which combines Llama-2 model, Ray Serve and Inferentia2 on Amazon EKS.    ","version":"Next","tagName":"h2"},{"title":"Deploying the Solution​","type":1,"pageTitle":"Serving Llama-2-13b Chat Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2#deploying-the-solution","content":" To get started with deploying Llama-2-13b chat on Amazon EKS, we will cover the necessary prerequisites and guide you through the deployment process step by step. This includes setting up the infrastructure, deploying the Ray cluster, and creating the Gradio WebUI app.  Prerequisites 👈  ","version":"Next","tagName":"h2"},{"title":"Deploying the Ray Cluster with Llama-2-Chat Model​","type":1,"pageTitle":"Serving Llama-2-13b Chat Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2#deploying-the-ray-cluster-with-llama-2-chat-model","content":" Once the Trainium on EKS Cluster is deployed, you can proceed to use kubectl to deploy the ray-service-Llama-2.yaml.  In this step, we will deploy the Ray Serve cluster, which comprises one Head Pod on x86 CPU instances using Karpenter autoscaling, as well as Ray workers on Inf2.48xlarge instances, autoscaled by Karpenter.  Let's take a closer look at the key files used in this deployment and understand their functionalities before proceeding with the deployment:  ray_serve_Llama-2.py:This script uses FastAPI, Ray Serve, and PyTorch-based Hugging Face Transformers to create an efficient API for text generation using the NousResearch/Llama-2-13b-chat-hf language model. Alternatively, users have the flexibility to switch to the meta-llama/Llama-2-13b-chat-hf model. The script establishes an endpoint that accepts input sentences and efficiently generates text outputs, benefiting from Neuron acceleration for enhanced performance. With its high configurability, users can fine-tune model parameters to suit a wide range of natural language processing applications, including chatbots and text generation tasks. ray-service-Llama-2.yaml:This Ray Serve YAML file serves as a Kubernetes configuration for deploying the Ray Serve service, facilitating efficient text generation using the Llama-2-13b-chat model. It defines a Kubernetes namespace named Llama-2 to isolate resources. Within the configuration, the RayService specification, named Llama-2-service, is created and hosted within the Llama-2 namespace. The RayService specification leverages the Python script ray_serve_Llama-2.py (copied into the Dockerfile located within the same folder) to create the Ray Serve service. The Docker image used in this example is publicly available on Amazon Elastic Container Registry (ECR) for ease of deployment. Users can also modify the Dockerfile to suit their specific requirements and push it to their own ECR repository, referencing it in the YAML file.  ","version":"Next","tagName":"h2"},{"title":"Step1: Deploy the Llama-2-Chat Model​","type":1,"pageTitle":"Serving Llama-2-13b Chat Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2#step1-deploy-the-llama-2-chat-model","content":" Ensure the cluster is configured locally  aws eks --region us-west-2 update-kubeconfig --name trainium-inferentia   Deploy RayServe Cluster  cd data-on-eks/gen-ai/inference/llama2-13b-chat-rayserve-inf2 kubectl apply -f ray-service-llama2.yaml   Verify the deployment by running the following commands  info The deployment process may take up to 10 minutes. The Head Pod is expected to be ready within 2 to 3 minutes, while the Ray Serve worker pod may take up to 10 minutes for image retrieval and Model deployment from Huggingface.  kubectl get all -n llama2   Output:  NAME READY STATUS RESTARTS AGE pod/llama2-raycluster-fcmtr-head-bf58d 1/1 Running 0 67m pod/llama2-raycluster-fcmtr-worker-inf2-lgnb2 1/1 Running 0 5m30s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/llama2 ClusterIP 172.20.118.243 &lt;none&gt; 10001/TCP,8000/TCP,8080/TCP,6379/TCP,8265/TCP 67m service/llama2-head-svc ClusterIP 172.20.168.94 &lt;none&gt; 8080/TCP,6379/TCP,8265/TCP,10001/TCP,8000/TCP 57m service/llama2-serve-svc ClusterIP 172.20.61.167 &lt;none&gt; 8000/TCP 57m NAME DESIRED WORKERS AVAILABLE WORKERS CPUS MEMORY GPUS STATUS AGE raycluster.ray.io/llama2-raycluster-fcmtr 1 1 184 704565270Ki 0 ready 67m NAME SERVICE STATUS NUM SERVE ENDPOINTS rayservice.ray.io/llama2 Running 2   kubectl get ingress -n llama2   Output:  NAME CLASS HOSTS ADDRESS PORTS AGE llama2 nginx * k8s-ingressn-ingressn-aca7f16a80-1223456666.elb.us-west-2.amazonaws.com 80 69m   caution This blueprint deploys an internal load balancer for security reasons, so you may not be able to access it from the browser unless you are in the same vpc. You can modify the blueprint to make the NLB public by following the instructions here. Alternatively, you can use port-forwarding to test the service without using a load balancer.  Now, you can access the Ray Dashboard using the Load Balancer URL below by replacing &lt;NLB_DNS_NAME&gt; with your NLB endpoint:  http://\\&lt;NLB_DNS_NAME\\&gt;/dashboard/#/serve   If you don't have access to a public Load Balancer, you can use port-forwarding and browse the Ray Dashboard using localhost with the following command:  kubectl port-forward service/llama2 8265:8265 -n llama2   Open the link in the browser: http://localhost:8265/  From this webpage, you will be able to monitor the progress of Model deployment, as shown in the image below:    ","version":"Next","tagName":"h3"},{"title":"Step2: To Test the Llama-2-Chat Model​","type":1,"pageTitle":"Serving Llama-2-13b Chat Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2#step2-to-test-the-llama-2-chat-model","content":" Once you see the status of the model deployment is in running state then you can start using Llama-2-chat.  Using Port-Forwarding  First, use port-forwarding to access the service locally:  kubectl port-forward service/llama2-serve-svc 8000:8000 -n llama2   Then, you can test the model using the following URL with a query added at the end of the URL:  http://localhost:8000/infer?sentence=what is data parallelism and tensor parallelism and the differences   You will see an output like this in your browser.    Using the NLB:  If you prefer to use a Network Load Balancer (NLB), you can modify the blueprint to make the NLB public by following the instructions here.  Then, you can use the following URL with a query added at the end of the URL:  http://\\&lt;NLB_DNS_NAME\\&gt;/serve/infer?sentence=what is data parallelism and tensor parallelisma and the differences   You will see an output like this in your browser:    ","version":"Next","tagName":"h3"},{"title":"Step3: Deploying the Gradio WebUI App​","type":1,"pageTitle":"Serving Llama-2-13b Chat Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2#step3-deploying-the-gradio-webui-app","content":" Gradio Web UI is used to interact with the Llama2 inference service deployed on EKS Clusters using inf2 instances. The Gradio UI communicates internally with the Llama2 service(llama2-serve-svc.llama2.svc.cluster.local:8000), which is exposed on port 8000, using its service name and port.  We have created a base Docker(gen-ai/inference/gradio-ui/Dockerfile-gradio-base) image for the Gradio app, which can be used with any model inference. This image is published on Public ECR.  Steps to Deploy a Gradio App:​  The following YAML script (gen-ai/inference/llama2-13b-chat-rayserve-inf2/gradio-ui.yaml) creates a dedicated namespace, deployment, service, and a ConfigMap where your model client script goes.  To deploy this, execute:  cd data-on-eks/gen-ai/inference/llama2-13b-chat-rayserve-inf2/ kubectl apply -f gradio-ui.yaml   Verification Steps:Run the following commands to verify the deployment, service, and ConfigMap:  kubectl get deployments -n gradio-llama2-inf2 kubectl get services -n gradio-llama2-inf2 kubectl get configmaps -n gradio-llama2-inf2   Port-Forward the Service:  Run the port-forward command so that you can access the Web UI locally:  kubectl port-forward service/gradio-service 7860:7860 -n gradio-llama2-inf2   Invoke the WebUI​  Open your web browser and access the Gradio WebUI by navigating to the following URL:  Running on local URL: http://localhost:7860  You should now be able to interact with the Gradio application from your local machine.    ","version":"Next","tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Serving Llama-2-13b Chat Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2#conclusion","content":" In conclusion, you will have successfully deployed the Llama-2-13b chat model on EKS with Ray Serve and created a chatGPT-style chat web UI using Gradio. This opens up exciting possibilities for natural language processing and chatbot development.  In summary, when it comes to deploying and scaling Llama-2, AWS Trn1/Inf2 instances offer a compelling advantage. They provide the scalability, cost optimization, and performance boost needed to make running large language models efficient and accessible, all while overcoming the challenges associated with the scarcity of GPUs. Whether you're building chatbots, natural language processing applications, or any other LLM-driven solution, Trn1/Inf2 instances empower you to harness the full potential of Llama-2 on the AWS cloud.  ","version":"Next","tagName":"h2"},{"title":"Cleanup​","type":1,"pageTitle":"Serving Llama-2-13b Chat Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama2-inf2#cleanup","content":" Finally, we'll provide instructions for cleaning up and deprovisioning the resources when they are no longer needed.  Step1: Delete Gradio App and Llama2 Inference deployment  cd data-on-eks/gen-ai/inference/llama2-13b-chat-rayserve-inf2 kubectl delete -f gradio-ui.yaml kubectl delete -f ray-service-llama2.yaml   Step2: Cleanup the EKS Cluster This script will cleanup the environment using -target option to ensure all the resources are deleted in correct order.  cd data-on-eks/ai-ml/trainium-inferentia ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2","content":"","keywords":"","version":"Next"},{"title":"What is Llama-3-8B Instruct?​","type":1,"pageTitle":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2#what-is-llama-3-8b-instruct","content":" Meta developed and released the Meta Llama 3 family of large language models (LLMs), a collection of pretrained and instruction tuned generative text models in 8 and 70B sizes. The Llama 3 instruction tuned models are optimized for dialogue use cases and outperform many of the available open source chat models on common industry benchmarks. Further, in developing these models, we took great care to optimize helpfulness and safety.  More information on Llama3 sizes and model architecture can be found here.  Scalability and Availability  One of the key challenges in deploying large language models (LLMs) like Llama-3 is the scalability and availability of suitable hardware. Traditional GPU instances often face scarcity due to high demand, making it challenging to provision and scale resources effectively.  In contrast, Trn1/Inf2 instances, such as trn1.32xlarge, trn1n.32xlarge, inf2.24xlarge and inf2.48xlarge, are purpose built for high-performance deep learning (DL) training and inference of generative AI models, including LLMs. They offer both scalability and availability, ensuring that you can deploy and scale your Llama-3 models as needed, without resource bottlenecks or delays.  Cost Optimization  Running LLMs on traditional GPU instances can be cost-prohibitive, especially given the scarcity of GPUs and their competitive pricing. Trn1/Inf2 instances provide a cost-effective alternative. By offering dedicated hardware optimized for AI and machine learning tasks, Trn1/Inf2 instances allow you to achieve top-notch performance at a fraction of the cost. This cost optimization enables you to allocate your budget efficiently, making LLM deployment accessible and sustainable.  Performance Boost  While Llama-3 can achieve high-performance inference on GPUs, Neuron accelerators take performance to the next level. Neuron accelerators are purpose-built for machine learning workloads, providing hardware acceleration that significantly enhances Llama-3's inference speeds. This translates to faster response times and improved user experiences when deploying Llama-3 on Trn1/Inf2 instances.  ","version":"Next","tagName":"h3"},{"title":"Example usecase​","type":1,"pageTitle":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2#example-usecase","content":" A company wants to deploy a Llama-3 chatbot to provide customer support. The company has a large customer base and expects to receive a high volume of chat requests at peak times. The company needs to design an infrastructure that can handle the high volume of requests and provide a fast response time.  The company can use Inferentia2 instances to scale its Llama-3 chatbot efficiently. Inferentia2 instances are specialized hardware accelerators for machine learning tasks. They can provide up to 20x better performance and up to 7x lower cost than GPUs for machine learning workloads.  The company can also use Ray Serve to horizontally scale its Llama-3 chatbot. Ray Serve is a distributed framework for serving machine learning models. It can automatically scale your models up or down based on demand.  To scale its Llama-3 chatbot, the company can deploy multiple Inferentia2 instances and use Ray Serve to distribute the traffic across the instances. This will allow the company to handle a high volume of requests and provide a fast response time.  ","version":"Next","tagName":"h3"},{"title":"Solution Architecture​","type":1,"pageTitle":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2#solution-architecture","content":" In this section, we will delve into the architecture of our solution, which combines Llama-3 model, Ray Serve and Inferentia2 on Amazon EKS.    ","version":"Next","tagName":"h2"},{"title":"Deploying the Solution​","type":1,"pageTitle":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2#deploying-the-solution","content":" To get started with deploying Llama-4-8b-instruct on Amazon EKS, we will cover the necessary prerequisites and guide you through the deployment process step by step.  This includes setting up the infrastructure, deploying the Ray cluster, and creating the Gradio WebUI app.  Prerequisites 👈  ","version":"Next","tagName":"h2"},{"title":"Deploying the Ray Cluster with Llama3 Model​","type":1,"pageTitle":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2#deploying-the-ray-cluster-with-llama3-model","content":" Once the Trainium on EKS Cluster is deployed, you can proceed to use kubectl to deploy the ray-service-Llama-3.yaml.  In this step, we will deploy the Ray Serve cluster, which comprises one Head Pod on x86 CPU instances using Karpenter autoscaling, as well as Ray workers on Inf2.48xlarge instances, autoscaled by Karpenter.  Let's take a closer look at the key files used in this deployment and understand their functionalities before proceeding with the deployment:  ray_serve_Llama-3.py:  This script uses FastAPI, Ray Serve, and PyTorch-based Hugging Face Transformers to create an efficient API for text generation using the meta-llama/Meta-Llama-3-8B-Instruct language model.  The script establishes an endpoint that accepts input sentences and efficiently generates text outputs, benefiting from Neuron acceleration for enhanced performance. With its high configurability, users can fine-tune model parameters to suit a wide range of natural language processing applications, including chatbots and text generation tasks.  ray-service-Llama-3.yaml:  This Ray Serve YAML file serves as a Kubernetes configuration for deploying the Ray Serve service, facilitating efficient text generation using the llama-3-8B-Instruct model.  It defines a Kubernetes namespace named llama3 to isolate resources. Within the configuration, the RayService specification, named llama-3, is created and hosted within the llama3 namespace. The RayService specification leverages the Python script ray_serve_llama3.py (copied into the Dockerfile located within the same folder) to create the Ray Serve service.  The Docker image used in this example is publicly available on Amazon Elastic Container Registry (ECR) for ease of deployment. Users can also modify the Dockerfile to suit their specific requirements and push it to their own ECR repository, referencing it in the YAML file.  ","version":"Next","tagName":"h2"},{"title":"Deploy the Llama-3-Instruct Model​","type":1,"pageTitle":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2#deploy-the-llama-3-instruct-model","content":" Ensure the cluster is configured locally  aws eks --region us-west-2 update-kubeconfig --name trainium-inferentia   Deploy RayServe Cluster  info To deploy the llama3-8B-Instruct model, it's essential to configure your Hugging Face Hub token as an environment variable. This token is required for authentication and accessing the model. For guidance on how to create and manage your Hugging Face tokens, please visit Hugging Face Token Management.  # set the Hugging Face Hub Token as an environment variable. This variable will be substituted when applying the ray-service-mistral.yaml file export HUGGING_FACE_HUB_TOKEN=&lt;Your-Hugging-Face-Hub-Token-Value&gt; cd data-on-eks/gen-ai/inference/llama3-8b-rayserve-inf2 envsubst &lt; ray-service-llama3.yaml| kubectl apply -f -   Verify the deployment by running the following commands  info The deployment process may take up to 10 minutes. The Head Pod is expected to be ready within 2 to 3 minutes, while the Ray Serve worker pod may take up to 10 minutes for image retrieval and Model deployment from Huggingface.  $ kubectl get all -n llama3 NAME READY STATUS RESTARTS AGE pod/llama3-raycluster-smqrl-head-4wlbb 0/1 Running 0 77s pod/service-raycluster-smqrl-worker-inf2-wjxqq 0/1 Running 0 77s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/llama3 ClusterIP 172.20.246.48 &lt;none&gt; 8000:32138/TCP,52365:32653/TCP,8080:32604/TCP,6379:32739/TCP,8265:32288/TCP,10001:32419/TCP 78s $ kubectl get ingress -n llama3 NAME CLASS HOSTS ADDRESS PORTS AGE llama3 nginx * k8s-ingressn-ingressn-randomid-randomid.elb.us-west-2.amazonaws.com 80 2m4s   Now, you can access the Ray Dashboard from the Load balancer URL below.  http://&lt;NLB_DNS_NAME&gt;/dashboard/#/serve  If you don't have access to a public Load Balancer, you can use port-forwarding and browse the Ray Dashboard using localhost with the following command:  kubectl port-forward svc/llama3 8265:8265 -n llama3 # Open the link in the browser http://localhost:8265/   From this webpage, you will be able to monitor the progress of Model deployment, as shown in the image below:    ","version":"Next","tagName":"h3"},{"title":"To Test the Llama3 Model​","type":1,"pageTitle":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2#to-test-the-llama3-model","content":" Once you see the status of the model deployment is in running state then you can start using Llama-3-instruct.  You can use the following URL with a query added at the end of the URL.  http://&lt;NLB_DNS_NAME&gt;/serve/infer?sentence=what is data parallelism and tensor parallelisma and the differences  You will see an output like this in your browser:    ","version":"Next","tagName":"h3"},{"title":"Deploying the Gradio WebUI App​","type":1,"pageTitle":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2#deploying-the-gradio-webui-app","content":" Discover how to create a user-friendly chat interface using Gradio that integrates seamlessly with deployed models.  Let's deploy Gradio app locally on your machine to interact with the LLama-3-Instruct model deployed using RayServe.  info The Gradio app interacts with the locally exposed service created solely for the demonstration. Alternatively, you can deploy the Gradio app on EKS as a Pod with Ingress and Load Balancer for wider accessibility.  ","version":"Next","tagName":"h2"},{"title":"Execute Port Forward to the llama3 Ray Service​","type":1,"pageTitle":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2#execute-port-forward-to-the-llama3-ray-service","content":" First, execute a port forward to the Llama-3 Ray Service using kubectl:  kubectl port-forward svc/llama2-service 8000:8000 -n llama3   ","version":"Next","tagName":"h3"},{"title":"Deploying the Gradio WebUI App​","type":1,"pageTitle":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2#deploying-the-gradio-webui-app-1","content":" Discover how to create a user-friendly chat interface using Gradio that integrates seamlessly with deployed models.  Let's move forward with setting up the Gradio app as a Docker container running on localhost. This setup will enable interaction with the Stable Diffusion XL model, which is deployed using RayServe.  ","version":"Next","tagName":"h2"},{"title":"Build the Gradio app docker container​","type":1,"pageTitle":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2#build-the-gradio-app-docker-container","content":" First, lets build the docker container for the client app.  cd data-on-eks/gen-ai/inference/gradio-ui docker build --platform=linux/amd64 \\ -t gradio-app:llama \\ --build-arg GRADIO_APP=&quot;gradio-app-llama.py&quot; \\ .   ","version":"Next","tagName":"h3"},{"title":"Deploy the Gradio container​","type":1,"pageTitle":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2#deploy-the-gradio-container","content":" Deploy the Gradio app as a container on localhost using docker:  docker run --rm -it -p 7860:7860 -p 8000:8000 gradio-app:llama   info If you are not running Docker Desktop on your machine and using something like finch instead then you will need to additional flags for a custom host-to-IP mapping inside the container. docker run --rm -it \\ --add-host ray-service:&lt;workstation-ip&gt; \\ -e &quot;SERVICE_NAME=http://ray-service:8000&quot; \\ -p 7860:7860 gradio-app:llama   Invoke the WebUI​  Open your web browser and access the Gradio WebUI by navigating to the following URL:  Running on local URL: http://localhost:7860  You should now be able to interact with the Gradio application from your local machine.    ","version":"Next","tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2#conclusion","content":" In summary, when it comes to deploying and scaling Llama-3, AWS Trn1/Inf2 instances offer a compelling advantage. They provide the scalability, cost optimization, and performance boost needed to make running large language models efficient and accessible, all while overcoming the challenges associated with the scarcity of GPUs. Whether you're building chatbots, natural language processing applications, or any other LLM-driven solution, Trn1/Inf2 instances empower you to harness the full potential of Llama-3 on the AWS cloud.  ","version":"Next","tagName":"h2"},{"title":"Cleanup​","type":1,"pageTitle":"Serving Llama-3-8B Instruct Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/llama3-inf2#cleanup","content":" Finally, we'll provide instructions for cleaning up and deprovisioning the resources when they are no longer needed.  Step1: Delete Gradio Container  Ctrl-c on the localhost terminal window where docker run is running to kill the container running the Gradio app. Optionally clean up the docker image  docker rmi gradio-app:llama   Step2: Delete Ray Cluster  cd data-on-eks/gen-ai/inference/llama3-8b-instruct-rayserve-inf2 kubectl delete -f ray-service-llama3.yaml   Step3: Cleanup the EKS Cluster This script will cleanup the environment using -target option to ensure all the resources are deleted in correct order.  cd data-on-eks/ai-ml/trainium-inferentia/ ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"Serving Mistral-7B-Instruct-v0.2 using Inferentia2, Ray Serve, Gradio","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/inference/Neuron/Mistral-7b-inf2","content":"","keywords":"","version":"Next"},{"title":"What is Mistral-7B-Instruct-v0.2 Model?​","type":1,"pageTitle":"Serving Mistral-7B-Instruct-v0.2 using Inferentia2, Ray Serve, Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/Mistral-7b-inf2#what-is-mistral-7b-instruct-v02-model","content":" The mistralai/Mistral-7B-Instruct-v0.2 is an instruction-tuned version of the Mistral-7B-v0.2 base model, which has been fine-tuned using publicly available conversation datasets. It is designed to follow instructions and complete tasks, making it suitable for applications such as chatbots, virtual assistants, and task-oriented dialogue systems. It is built on top of the Mistral-7B-v0.2 base model, which has 7.3 billion parameters and employs a state-of-the-art architecture including Grouped-Query Attention (GQA) for faster inference and a Byte-fallback BPE tokenizer for improved robustness.  Please refer to the Model Card for more detail.  ","version":"Next","tagName":"h3"},{"title":"Deploying the Solution​","type":1,"pageTitle":"Serving Mistral-7B-Instruct-v0.2 using Inferentia2, Ray Serve, Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/Mistral-7b-inf2#deploying-the-solution","content":" Let's get Mistral-7B-Instruct-v0.2 model up and running on Amazon EKS! In this section, we'll cover:  Prerequisites: Ensuring all necessary tools are installed before you begin.Infrastructure Setup: Creating your your EKS cluster and setting the stage for deployment.Deploying the Ray Cluster: The core of your image generation pipeline, providing scalability and efficiency.Building the Gradio Web UI: Creating a user-friendly interface for seamless interaction with the Mistral 7B model.  Prerequisites 👈  ","version":"Next","tagName":"h2"},{"title":"Deploying the Ray Cluster with Mistral 7B Model​","type":1,"pageTitle":"Serving Mistral-7B-Instruct-v0.2 using Inferentia2, Ray Serve, Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/Mistral-7b-inf2#deploying-the-ray-cluster-with-mistral-7b-model","content":" Once the trainium-inferentia EKS cluster is deployed, you can proceed to use kubectl to deploy the ray-service-mistral.yaml from /data-on-eks/gen-ai/inference/mistral-7b-rayserve-inf2/ path.  In this step, we will deploy the Ray Serve cluster, which comprises one Head Pod on x86 CPU instances using Karpenter autoscaling, as well as Ray workers on inf2.24xlarge instances, autoscaled by Karpenter.  Let's take a closer look at the key files used in this deployment and understand their functionalities before proceeding with the deployment:  ray_serve_mistral.py:This script sets up a FastAPI application with two main components deployed using Ray Serve, which enables scalable model serving on AWS Neuron infrastructure(Inf2): mistral-7b Deployment: This class initializes the Mistral 7B model using a scheduler and moves it to an Inf2 node for processing. The script leverages Transformers Neuron support for grouped-query attention (GQA) models for this Mistral model. The mistral-7b-instruct-v0.2 is a chat based model. The script also adds the required prefix for instructions by adding [INST] and [/INST] tokens surrounding the actual prompt.APIIngress: This FastAPI endpoint acts as an interface to the Mistral 7B model. It exposes a GET method on the /infer path that takes a text prompt. It responds to the prompt by replying with a text. ray-service-mistral.yaml:This RayServe deployment pattern sets up a scalable service for hosting the Mistral-7B-Instruct-v0.2 Model model on Amazon EKS with AWS Inferentia2 support. It creates a dedicated namespace and configures a RayService with autoscaling capabilities to efficiently manage resource utilization based on incoming traffic. The deployment ensures that the model, served under the RayService umbrella, can automatically adjust replicas, depending on demand, with each replica requiring 2 neuron cores. This pattern makes use of custom container images designed to maximize performance and minimizes startup delays by ensuring that heavy dependencies are preloaded.  ","version":"Next","tagName":"h2"},{"title":"Deploy the Mistral-7B-Instruct-v0.2 Model​","type":1,"pageTitle":"Serving Mistral-7B-Instruct-v0.2 using Inferentia2, Ray Serve, Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/Mistral-7b-inf2#deploy-the-mistral-7b-instruct-v02-model","content":" Ensure the cluster is configured locally  aws eks --region us-west-2 update-kubeconfig --name trainium-inferentia   Deploy RayServe Cluster  info To deploy the Mistral-7B-Instruct-v0.2 model, it's essential to configure your Hugging Face Hub token as an environment variable. This token is required for authentication and accessing the model. For guidance on how to create and manage your Hugging Face tokens, please visit Hugging Face Token Management.  # set the Hugging Face Hub Token as an environment variable. This variable will be substituted when applying the ray-service-mistral.yaml file export HUGGING_FACE_HUB_TOKEN=$(echo -n &quot;Your-Hugging-Face-Hub-Token-Value&quot; | base64) cd data-on-eks/gen-ai/inference/mistral-7b-rayserve-inf2 envsubst &lt; ray-service-mistral.yaml| kubectl apply -f -   Verify the deployment by running the following commands  info The deployment process may take up to 10 minutes. The Head Pod is expected to be ready within 2 to 3 minutes, while the Ray Serve worker pod may take up to 10 minutes for image retrieval and Model deployment from Huggingface.  This deployment establishes a Ray head pod running on an x86 instance and a worker pod on inf2.24xl instance as shown below.  kubectl get pods -n mistral NAME READY STATUS service-raycluster-68tvp-worker-inf2-worker-group-2kckv 1/1 Running mistral-service-raycluster-68tvp-head-dmfz5 2/2 Running   This deployment also sets up a mistral service with multiple ports configured; port 8265 is designated for the Ray dashboard and port 8000 for the Mistral model endpoint.  kubectl get svc -n mistral NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) mistral-service NodePort 172.20.118.238 &lt;none&gt; 10001:30998/TCP,8000:32437/TCP,52365:31487/TCP,8080:30351/TCP,6379:30392/TCP,8265:30904/TCP mistral-service-head-svc NodePort 172.20.245.131 &lt;none&gt; 6379:31478/TCP,8265:31393/TCP,10001:32627/TCP,8000:31251/TCP,52365:31492/TCP,8080:31471/TCP mistral-service-serve-svc NodePort 172.20.109.223 &lt;none&gt; 8000:31679/TCP   For the Ray dashboard, you can port-forward these ports individually to access the web UI locally using localhost.  kubectl -n mistral port-forward svc/mistral-service 8265:8265   Access the web UI via http://localhost:8265 . This interface displays the deployment of jobs and actors within the Ray ecosystem.    Once the deployment is complete, the Controller and Proxy status should be HEALTHY and Application status should be RUNNING    You can monitor Serve deployment and the Ray Cluster deployment including resource utilization using the Ray Dashboard.    ","version":"Next","tagName":"h3"},{"title":"Deploying the Gradio WebUI App​","type":1,"pageTitle":"Serving Mistral-7B-Instruct-v0.2 using Inferentia2, Ray Serve, Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/Mistral-7b-inf2#deploying-the-gradio-webui-app","content":" Gradio Web UI is used to interact with the Mistral7b inference service deployed on EKS Clusters using inf2 instances. The Gradio UI communicates internally with the mistral service(mistral-serve-svc.mistral.svc.cluster.local:8000), which is exposed on port 8000, using its service name and port.  We have created a base Docker(gen-ai/inference/gradio-ui/Dockerfile-gradio-base) image for the Gradio app, which can be used with any model inference. This image is published on Public ECR.  Steps to Deploy a Gradio App:​  The following YAML script (gen-ai/inference/mistral-7b-rayserve-inf2/gradio-ui.yaml) creates a dedicated namespace, deployment, service, and a ConfigMap where your model client script goes.  To deploy this, execute:  cd data-on-eks/gen-ai/inference/mistral-7b-rayserve-inf2/ kubectl apply -f gradio-ui.yaml   Verification Steps:Run the following commands to verify the deployment, service, and ConfigMap:  kubectl get deployments -n gradio-mistral7b-inf2 kubectl get services -n gradio-mistral7b-inf2 kubectl get configmaps -n gradio-mistral7b-inf2   Port-Forward the Service:  Run the port-forward command so that you can access the Web UI locally:  kubectl port-forward service/gradio-service 7860:7860 -n gradio-mistral7b-inf2   Invoke the WebUI​  Open your web browser and access the Gradio WebUI by navigating to the following URL:  Running on local URL: http://localhost:7860  You should now be able to interact with the Gradio application from your local machine.    Interaction With Mistral Model​  Mistral-7B-Instruct-v0.2 Model can be used for purposes such as chat applications (Q&amp;A, conversation), text generation, knowledge retrieval and others.  Below screenshots provide some examples of the model response based on different text prompts.        ","version":"Next","tagName":"h2"},{"title":"Cleanup​","type":1,"pageTitle":"Serving Mistral-7B-Instruct-v0.2 using Inferentia2, Ray Serve, Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/Mistral-7b-inf2#cleanup","content":" Finally, we'll provide instructions for cleaning up and deprovisioning the resources when they are no longer needed.  Step1: Delete Gradio App and mistral Inference deployment  cd data-on-eks/gen-ai/inference/mistral-7b-rayserve-inf2 kubectl delete -f gradio-ui.yaml kubectl delete -f ray-service-mistral.yaml   Step2: Cleanup the EKS Cluster This script will cleanup the environment using -target option to ensure all the resources are deleted in correct order.  cd data-on-eks/ai-ml/trainium-inferentia/ ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"Ray Serve High Availability","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/inference/Neuron/rayserve-ha","content":"","keywords":"","version":"Next"},{"title":"Ray Head Node High Availability With Elastic Cache for Redis​","type":1,"pageTitle":"Ray Serve High Availability","url":"/data-on-eks/docs/gen-ai/inference/Neuron/rayserve-ha#ray-head-node-high-availability-with-elastic-cache-for-redis","content":" A critical component of a Ray cluster is the head node, which orchestrates the entire cluster by managing task scheduling, state synchronization, and node coordination. However, by default, the Ray head Pod represents a single point of failure; if it fails, the entire cluster including the Ray worker Pods need to be restarted.  To address this, High Availability (HA) for the Ray head node is essential. Global Control Service (GCS) manages cluster-level metadata in a RayCluster. By default, the GCS lacks fault tolerance as it stores all data in-memory, and a failure can cause the entire Ray cluster to fail. To avoid this, one must add fault tolerance to Ray’s Global Control Store (GCS), which allows the Ray Serve application to serve traffic even when the head node crashes. In the event of a GCS restart, it retrieves all the data from the Redis instance and resumes its regular functions.      Following sections provide the steps on how to enable GCS fault tolerance and ensure high availability for the Ray head Pod. We're using the Mistral-7B-Instruct-v0.2 model to demonstrate the Ray head high availability.  ","version":"Next","tagName":"h2"},{"title":"Add an External Redis Server​","type":1,"pageTitle":"Ray Serve High Availability","url":"/data-on-eks/docs/gen-ai/inference/Neuron/rayserve-ha#add-an-external-redis-server","content":" GCS fault tolerance requires an external Redis database. You can choose to host your own Redis database, or you can use one through a third-party vendor.  For development and testing purposes, you can also host a containerized Redis database on the same EKS cluster as your Ray cluster. However, for production setups, it's recommended to use a highly available external Redis cluster. In this pattern, we've used Amazon ElasticCache for Redis to create an external Redis cluster. You can also choose to use Amazon memoryDB for setting up a Redis cluster.  As part of the current blueprint, we've added a terraform module named elasticache that creates an Elastic Cache Redis cluster in AWS. This uses The Redis cluster has cluster mode disabled and contain one node. This cluster node's endpoint can be used for both reads and writes.  Key things to note in this module are -  The Redis Cluster is in the same VPC as the EKS cluster. If the Redis cluster is created in a separate VPC, then VPC peering needs to be set up between the EKS cluster VPC and the Elastic Cache Redis cluster VPC to enable network connectivity.A cache subnet group needs to be created at the time of creating the Redis cluster. A subnet group is a collection of subnets that you may want to designate for your caches in a VPC. ElastiCache uses that cache subnet group to assign IP addresses within that subnet to each cache node in the cache. The blueprint automatically adds all the subnets used by the EKS cluster in the subnet group for the Elastic cache Redis cluster.Security Group - The Security Group assigned to the Redis cache needs to have an inbound rule that allows TCP traffic from EKS Cluster's worker node security group to the Redis cluster security group over port 6379. This is because the Ray head Pod needs to establish a connection to the Elastic cache Redis cluster over port 6379. The blueprint automatically sets up the security group with the inbound rule.  To create the Redis cluster using Amazon Elastic Cache, please follow the below steps.  info This Mistral7b deployment is using Ray Serve with High availability. If you have already deployed mistral7b in the previous steps, then you can delete the deployment and run the below steps.  Prerequisites:  aws clikubectlterraformenvsubstjq  First, enable the creation of the Redis cluster by setting the enable_rayserve_ha_elastic_cache_redis variable to true by running the below command. By default it's set to false.  export TF_VAR_enable_rayserve_ha_elastic_cache_redis=true   Then, run the install.sh script to install the EKS cluster with KubeRay operator and other add-ons.  cd data-on-eks/ai-ml/trainimum-inferentia ./install.sh   In addition to the EKS cluster, this blueprint creates an AWS Elastic Cache Redis Cluster. Sample output looks like below  Apply complete! Resources: 8 added, 1 changed, 0 destroyed. Outputs: configure_kubectl = &quot;aws eks --region us-west-2 update-kubeconfig --name trainium-inferentia&quot; elastic_cache_redis_cluster_arn = &quot;arn:aws:elasticache:us-west-2:11111111111:cluster:trainium-inferentia&quot;   ","version":"Next","tagName":"h3"},{"title":"Add External Redis Information to RayService​","type":1,"pageTitle":"Ray Serve High Availability","url":"/data-on-eks/docs/gen-ai/inference/Neuron/rayserve-ha#add-external-redis-information-to-rayservice","content":" Once the elastic cache Redis cluster is created, we need to modify the RayService configuration for mistral-7b model inference.  First we need to obtain the Elastic Cache Redis Cluster endpoint by using AWS CLI and jq like below.  export EXT_REDIS_ENDPOINT=$(aws elasticache describe-cache-clusters \\ --cache-cluster-id &quot;trainium-inferentia&quot; \\ --show-cache-node-info | jq -r '.CacheClusters[0].CacheNodes[0].Endpoint.Address')   Now, add the annotation ray.io/ft-enabled: &quot;true&quot; under RayService CRD. The annotation ray.io/ft-enabled enables GCS fault tolerance when set to true.  apiVersion: ray.io/v1 kind: RayService metadata: name: mistral namespace: mistral annotations: ray.io/ft-enabled: &quot;true&quot;   Add the external Redis cluster information in the headGroupSpec as RAY_REDIS_ADDRESS environment variable.  headGroupSpec: headService: metadata: name: mistral namespace: mistral rayStartParams: dashboard-host: '0.0.0.0' num-cpus: &quot;0&quot; template: spec: containers: - name: head .... env: - name: RAY_REDIS_ADDRESS value: $EXT_REDIS_ENDPOINT:6379   RAY_REDIS_ADDRESS’s value should be your Redis database’s address. It should contain the Redis cluster endpoint and the port.  You can find the full RayService configuration with GCS fault tolerance enabled in gen-ai/inference/mistral-7b-rayserve-inf2/ray-service-mistral-ft.yaml file.  With the above RayService configuration, we have enabled GCS fault tolerance for the Ray head Pod and the Ray cluster can recover from head Pod crashes without restarting all the Ray workers.  Let's apply the above RayService configuration and check the behavior.  cd data-on-eks/gen-ai/inference/ envsubst &lt; mistral-7b-rayserve-inf2/ray-service-mistral-ft.yaml| kubectl apply -f -   The output should look like below  namespace/mistral created secret/hf-token created rayservice.ray.io/mistral created ingress.networking.k8s.io/mistral created   Check the status of the Ray Pods in the cluster.  kubectl get po -n mistral   The Ray head and worker Pods should be in Running state as below.  NAME READY STATUS RESTARTS AGE mistral-raycluster-rf6l9-head-hc8ch 2/2 Running 0 31m mistral-raycluster-rf6l9-worker-inf2-tdrs6 1/1 Running 0 31m   ","version":"Next","tagName":"h3"},{"title":"Simulate Ray Head Pod Crash​","type":1,"pageTitle":"Ray Serve High Availability","url":"/data-on-eks/docs/gen-ai/inference/Neuron/rayserve-ha#simulate-ray-head-pod-crash","content":" Simulate Ray head Pod crashing by deleting the Pod  kubectl -n mistral delete po mistral-raycluster-rf6l9-head-xxxxx pod &quot;mistral-raycluster-rf6l9-head-xxxxx&quot; deleted   We can see that the Ray worker Pod is still running when the Ray head Pod is terminated and auto-restarted. Please see the below screenshots from Lens IDE.      Test the Mistral AI Gradio App​  Let's also test our Gradio UI App to see whether it's able to answer questions while the Ray head Pod is deleted.  Open the Gradio Mistral AI Chat application by pointing your browser to localhost:7860.  Now repeat the Ray head Pod crash simulation by deleting the Ray head Pod as shown in the above steps.  While the Ray head Pod is terminated and is recovering, submit questions into the Mistral AI Chat interface. We can see from below screenshots that the chat application is indeed able to serve traffic while the Ray head Pod is deleted and is recovering. This is because the RayServe service points to the Ray worker Pod which in this case is never restarted because of the GCS fault tolerance.        For a complete guide on enabling end-to-end fault tolerance to your RayServe application, please refer to Ray Guide.  ","version":"Next","tagName":"h3"},{"title":"Cleanup​","type":1,"pageTitle":"Ray Serve High Availability","url":"/data-on-eks/docs/gen-ai/inference/Neuron/rayserve-ha#cleanup","content":" Finally, we'll provide instructions for cleaning up and deprovisioning the resources when they are no longer needed.  Step1: Delete Gradio App and mistral Inference deployment  cd data-on-eks/gen-ai/inference/mistral-7b-rayserve-inf2 kubectl delete -f gradio-ui.yaml kubectl delete -f ray-service-mistral-ft.yaml   Step2: Cleanup the EKS Cluster This script will cleanup the environment using -target option to ensure all the resources are deleted in correct order.  cd data-on-eks/ai-ml/trainium-inferentia/ ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"Serving Stable Diffusion XL Base Model with Inferentia, Ray Serve and Gradio","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2","content":"","keywords":"","version":"Next"},{"title":"What is Stable Diffusion?​","type":1,"pageTitle":"Serving Stable Diffusion XL Base Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2#what-is-stable-diffusion","content":" Stable Diffusion is a text-to-image model for creating stunning art within seconds. It is one of the largest and most powerful LLMs available today. It is primarily used to generate detailed images conditioned on text descriptions, though it can also be applied to other tasks such as inpainting, outpainting, and generating image-to-image translations guided by a text prompt.  Stable Diffusion XL(SDXL)​  SDXL is a latent diffusion model for text-to-image synthesis. Compared to previous versions of Stable Diffusion, SDXL uses pipelines for latent diffusion and noise reduction. SDXL also improves the quality of generated images compared to prior Stable Diffusion models by using a times larger UNet. The increase of model parameters is mainly due to more attention blocks and a larger cross-attention context as SDXL uses a second text encoder.  SDXL has been designed with multiple novel conditioning schemes and trained on multiple aspect ratios. It also uses a refinement model which is used to improve the visual fidelity of samples generated by SDXL using a post-hoc image-to-image technique.  This process results in a highly capable and fine-tuned language model that we will guide you to deploy and utilize effectively on Amazon EKS with Ray Serve.  ","version":"Next","tagName":"h3"},{"title":"Inference on Trn1/Inf2 Instances: Unlocking the Full Potential of Stable Diffusion LLMs​","type":1,"pageTitle":"Serving Stable Diffusion XL Base Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2#inference-on-trn1inf2-instances-unlocking-the-full-potential-of-stable-diffusion-llms","content":" Stable Diffusion XL can be deployed on a variety of hardware platforms, each with its own set of advantages. However, when it comes to maximizing the efficiency, scalability, and cost-effectiveness of Stable Diffusion models, AWS Trn1/Inf2 instances shine as the optimal choice.  Scalability and AvailabilityOne of the key challenges in deploying large language models (LLMs) like StableDiffusion XL is the scalability and availability of suitable hardware. Traditional GPU instances often face scarcity due to high demand, making it challenging to provision and scale resources effectively. In contrast, Trn1/Inf2 instances, such as trn1.32xlarge, trn1n.32xlarge, inf2.24xlarge and inf2.48xlarge, are purpose built for high-performance deep learning (DL) training and inference of generative AI models, including LLMs. They offer both scalability and availability, ensuring that you can deploy and scale your Stable-diffusion-xl models as needed, without resource bottlenecks or delays.  Cost Optimization:Running LLMs on traditional GPU instances can be cost-prohibitive, especially given the scarcity of GPUs and their competitive pricing.Trn1/Inf2 instances provide a cost-effective alternative. By offering dedicated hardware optimized for AI and machine learning tasks, Trn1/Inf2 instances allow you to achieve top-notch performance at a fraction of the cost. This cost optimization enables you to allocate your budget efficiently, making LLM deployment accessible and sustainable.  Performance BoostWhile Stable-Diffusion-xl can achieve high-performance inference on GPUs, Neuron accelerators take performance to the next level. Neuron accelerators are purpose-built for machine learning workloads, providing hardware acceleration that significantly enhances Stable-diffusion's inference speeds. This translates to faster response times and improved user experiences when deploying Stable-Diffusion-xl on Trn1/Inf2 instances.  ","version":"Next","tagName":"h2"},{"title":"Example usecase​","type":1,"pageTitle":"Serving Stable Diffusion XL Base Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2#example-usecase","content":" A digital art company wants to deploy Stable-diffusion-xl powered image generator to help generate possible art based on prompts. Using a selection of textual prompts, users can create artwork, graphics and logos in a wide variety of styles. The image generator can be used to predict or fine-tune the art and can result in significant time saving in product iteration cycle. Company has a large customer base and wants the model to be scalable at high load. The company needs to design an infrastructure that can handle the high volume of requests and provide a fast response time.  The company can use Inferentia2 instances to scale its Stable diffusion image generator efficiently. Inferentia2 instances are specialized hardware accelerators for machine learning tasks. They can provide up to 20x better performance and up to 7x lower cost than GPUs for machine learning workloads.  The company can also use Ray Serve to horizontally scale its Stable diffusion image generator. Ray Serve is a distributed framework for serving machine learning models. It can automatically scale your models up or down based on demand.  To scale its Stable diffusion image generator, the company can deploy multiple Inferentia2 instances and use Ray Serve to distribute the traffic across the instances. This will allow the company to handle a high volume of requests and provide a fast response time.  ","version":"Next","tagName":"h3"},{"title":"Solution Architecture​","type":1,"pageTitle":"Serving Stable Diffusion XL Base Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2#solution-architecture","content":" In this section, we will delve into the architecture of our solution, which combines Stable diffusion xl model, Ray Serve and Inferentia2 on Amazon EKS.    ","version":"Next","tagName":"h2"},{"title":"Deploying the Solution​","type":1,"pageTitle":"Serving Stable Diffusion XL Base Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2#deploying-the-solution","content":" To get started with deploying stable-diffusion-xl-base-1-0 on Amazon EKS, we will cover the necessary prerequisites and guide you through the deployment process step by step. This includes setting up the infrastructure, deploying the Ray cluster, and creating the Gradio WebUI app.  Prerequisites 👈  ","version":"Next","tagName":"h2"},{"title":"Deploying the Ray Cluster with Stable Diffusion XL Model​","type":1,"pageTitle":"Serving Stable Diffusion XL Base Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2#deploying-the-ray-cluster-with-stable-diffusion-xl-model","content":" Once the Trainium on EKS Cluster is deployed, you can proceed to use kubectl to deploy the ray-service-stablediffusion.yaml.  In this step, we will deploy the Ray Serve cluster, which comprises one Head Pod on x86 CPU instances using Karpenter autoscaling, as well as Ray workers on Inf2.48xlarge instances, autoscaled by Karpenter.  Let's take a closer look at the key files used in this deployment and understand their functionalities before proceeding with the deployment:  ray_serve_stablediffusion.py:This script uses FastAPI, Ray Serve, and Hugging Face Optimum Neuron library of tools to create an efficient text to image generator using the Neuronx model for stable-diffusion-xl-base-1.0 language model.  For this example blueprint, we are using a precompiled model that's been compiled to run on AWS Neuron. You can use any stable diffusion model of your choice and compile it to run on AWS Neuron before driving inference on it.  ray-service-stablediffusion.yaml:This Ray Serve YAML file serves as a Kubernetes configuration for deploying the Ray Serve service, facilitating efficient text generation using the stable-diffusion-xl-base-1.0 model. It defines a Kubernetes namespace named stablediffusion to isolate resources. Within the configuration, the RayService specification, named stablediffusion-service, is created and hosted within the stablediffusion namespace. The RayService specification leverages the Python script ray_serve_stablediffusion.py (copied into the Dockerfile located within the same folder) to create the Ray Serve service. The Docker image used in this example is publicly available on Amazon Elastic Container Registry (ECR) for ease of deployment. Users can also modify the Dockerfile to suit their specific requirements and push it to their own ECR repository, referencing it in the YAML file.  ","version":"Next","tagName":"h2"},{"title":"Deploy the Stable-Diffusion-xl-base-1-0 Model​","type":1,"pageTitle":"Serving Stable Diffusion XL Base Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2#deploy-the-stable-diffusion-xl-base-1-0-model","content":" Ensure the cluster is configured locally  aws eks --region us-west-2 update-kubeconfig --name trainium-inferentia   Deploy RayServe Cluster  cd data-on-eks/gen-ai/inference/stable-diffusion-xl-base-rayserve-inf2 kubectl apply -f ray-service-stablediffusion.yaml   Verify the deployment by running the following commands  info The deployment process may take up to 10 minutes. The Head Pod is expected to be ready within 2 to 3 minutes, while the Ray Serve worker pod may take up to 10 minutes for image retrieval and Model deployment from Huggingface.  $ kubectl get po -n stablediffusion -w NAME READY STATUS RESTARTS AGE service-raycluster-gc7gb-worker-inf2-worker-group-k2kf2 0/1 Init:0/1 0 7s stablediffusion-service-raycluster-gc7gb-head-6fqvv 1/1 Running 0 7s service-raycluster-gc7gb-worker-inf2-worker-group-k2kf2 0/1 PodInitializing 0 9s service-raycluster-gc7gb-worker-inf2-worker-group-k2kf2 1/1 Running 0 10s stablediffusion-service-raycluster-gc7gb-head-6fqvv 1/1 Running 0 53s service-raycluster-gc7gb-worker-inf2-worker-group-k2kf2 1/1 Running 0 53s   Also check the service and ingress resources that got created  kubectl get svc -n stablediffusion NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE stablediffusion-service NodePort 172.20.175.61 &lt;none&gt; 6379:32190/TCP,8265:32375/TCP,10001:32117/TCP,8000:30770/TCP,52365:30334/TCP,8080:30094/TCP 16h stablediffusion-service-head-svc NodePort 172.20.193.225 &lt;none&gt; 6379:32228/TCP,8265:30215/TCP,10001:30767/TCP,8000:31482/TCP,52365:30170/TCP,8080:31584/TCP 16h stablediffusion-service-serve-svc NodePort 172.20.15.224 &lt;none&gt; 8000:30982/TCP 16h $ kubectl get ingress -n stablediffusion NAME CLASS HOSTS ADDRESS PORTS AGE stablediffusion-ingress nginx * k8s-ingressn-ingressn-7f3f4b475b-1b8966c0b8f4d3da.elb.us-west-2.amazonaws.com 80 16h   Now, you can access the Ray Dashboard from the Load balancer URL below.  http://&lt;NLB_DNS_NAME&gt;/dashboard/#/serve  If you don't have access to a public Load Balancer, you can use port-forwarding and browse the Ray Dashboard using localhost with the following command:  kubectl port-forward svc/stablediffusion-service 8265:8265 -n stablediffusion # Open the link in the browser http://localhost:8265/   From this webpage, you will be able to monitor the progress of Model deployment, as shown in the image below:    ","version":"Next","tagName":"h3"},{"title":"To Test the Stable Diffusion XL Model​","type":1,"pageTitle":"Serving Stable Diffusion XL Base Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2#to-test-the-stable-diffusion-xl-model","content":" Once you've verified that the Stable Diffusion model deployment status has switched to a running state in Ray Dashboard , you're all set to start leveraging the model. This change in status signifies that the Stable Diffusion model is now fully functional and prepared to handle your image generation requests based on textual descriptions.&quot;  You can use the following URL with a query added at the end of the URL.  http://&lt;NLB_DNS_NAME&gt;/serve/imagine?prompt=an astronaut is dancing on green grass, sunlit  You will see an output like this in your browser:    ","version":"Next","tagName":"h3"},{"title":"Deploying the Gradio WebUI App​","type":1,"pageTitle":"Serving Stable Diffusion XL Base Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2#deploying-the-gradio-webui-app","content":" Discover how to create a user-friendly chat interface using Gradio that integrates seamlessly with deployed models.  Let's move forward with setting up the Gradio app as a Docker container running on localhost. This setup will enable interaction with the Stable Diffusion XL model, which is deployed using RayServe.  ","version":"Next","tagName":"h2"},{"title":"Build the Gradio app docker container​","type":1,"pageTitle":"Serving Stable Diffusion XL Base Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2#build-the-gradio-app-docker-container","content":" First, lets build the docker container for the client app.  cd data-on-eks/gen-ai/inference/gradio-ui docker build --platform=linux/amd64 \\ -t gradio-app:sd \\ --build-arg GRADIO_APP=&quot;gradio-app-stable-diffusion.py&quot; \\ .   ","version":"Next","tagName":"h3"},{"title":"Deploy the Gradio container​","type":1,"pageTitle":"Serving Stable Diffusion XL Base Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2#deploy-the-gradio-container","content":" Deploy the Gradio app as a container on localhost using docker:  docker run --rm -it -p 7860:7860 -p 8000:8000 gradio-app:sd   info If you are not running Docker Desktop on your machine and using something like finch instead then you will need to additional flags for a custom host-to-IP mapping inside the container. docker run --rm -it \\ --add-host ray-service:&lt;workstation-ip&gt; \\ -e &quot;SERVICE_NAME=http://ray-service:8000&quot; \\ -p 7860:7860 gradio-app:sd   Invoke the WebUI​  Open your web browser and access the Gradio WebUI by navigating to the following URL:  Running on local URL: http://localhost:7860  You should now be able to interact with the Gradio application from your local machine.    ","version":"Next","tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Serving Stable Diffusion XL Base Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2#conclusion","content":" In conclusion, you will have successfully deployed the Stable-diffusion-xl-base model on EKS with Ray Serve and created a prompt based web UI using Gradio. This opens up exciting possibilities for natural language processing and prompt based image generator and image predictor development.  In summary, when it comes to deploying and scaling Stable diffusion models, AWS Trn1/Inf2 instances offer a compelling advantage. They provide the scalability, cost optimization, and performance boost needed to make running large language models efficient and accessible, all while overcoming the challenges associated with the scarcity of GPUs. Whether you're building text-to-image generators, image-to-image generators or any other LLM-driven solution, Trn1/Inf2 instances empower you to harness the full potential of Stable Diffusion LLMs on the AWS cloud.  ","version":"Next","tagName":"h2"},{"title":"Cleanup​","type":1,"pageTitle":"Serving Stable Diffusion XL Base Model with Inferentia, Ray Serve and Gradio","url":"/data-on-eks/docs/gen-ai/inference/Neuron/stablediffusion-inf2#cleanup","content":" Finally, we'll provide instructions for cleaning up and deprovisioning the resources when they are no longer needed.  Step1: Delete Gradio Container  Ctrl-c on the localhost terminal window where docker run is running to kill the container running the Gradio app. Optionally clean up the docker image  docker rmi gradio-app:sd   Step2: Delete Ray Cluster  cd data-on-eks/gen-ai/inference/stable-diffusion-xl-base-rayserve-inf2 kubectl delete -f ray-service-stablediffusion.yaml   Step3: Cleanup the EKS Cluster This script will cleanup the environment using -target option to ensure all the resources are deleted in correct order.  cd data-on-eks/ai-ml/trainium-inferentia/ ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"BioNeMo on EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/training/GPUs/bionemo","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"BioNeMo on EKS","url":"/data-on-eks/docs/gen-ai/training/GPUs/bionemo#introduction","content":" NVIDIA BioNeMo is a generative AI platform for drug discovery that simplifies and accelerates the training of models using your own data and scaling the deployment of models for drug discovery applications. BioNeMo offers the quickest path to both AI model development and deployment, accelerating the journey to AI-powered drug discovery. It has a growing community of users and contributors, and is actively maintained and developed by the NVIDIA.  Given its containerized nature, BioNeMo finds versatility in deployment across various environments such as Amazon Sagemaker, AWS ParallelCluster, Amazon ECS, and Amazon EKS. This solution, however, zeroes in on the specific deployment of BioNeMo on Amazon EKS.  Source: https://blogs.nvidia.com/blog/bionemo-on-aws-generative-ai-drug-discovery/  ","version":"Next","tagName":"h2"},{"title":"Deploying BioNeMo on Kubernetes​","type":1,"pageTitle":"BioNeMo on EKS","url":"/data-on-eks/docs/gen-ai/training/GPUs/bionemo#deploying-bionemo-on-kubernetes","content":" This blueprint leverages three major components for its functionality. The NVIDIA Device Plugin facilitates GPU usage, FSx stores training data, and the Kubeflow Training Operator manages the actual training process.  Kubeflow Training OperatorNVIDIA Device PluginFSx for Lustre CSI Driver  In this blueprint, we will deploy an Amazon EKS cluster and execute both a data preparation job and a distributed model training job.  Pre-requisites 👈  Deploy the blueprint 👈  Verify Deployment 👈  ","version":"Next","tagName":"h2"},{"title":"Run BioNeMo Training jobs​","type":1,"pageTitle":"BioNeMo on EKS","url":"/data-on-eks/docs/gen-ai/training/GPUs/bionemo#run-bionemo-training-jobs","content":" Once you've ensured that all components are functioning properly, you can proceed to submit jobs to your clusters.  Step1: Initiate the Uniref50 Data Preparation Task​  The first task, named the uniref50-job.yaml, involves downloading and partitioning the data to enhance processing efficiency. This task specifically retrieves the uniref50 dataset and organizes it within the FSx for Lustre Filesystem. This structured layout is designed for training, testing, and validation purposes. You can learn more about the uniref dataset here.  To execute this job, navigate to the examples\\training directory and deploy the uniref50-job.yaml manifest using the following commands:  cd examples/training kubectl apply -f uniref50-job.yaml   info It's important to note that this task requires a significant amount of time, typically ranging from 50 to 60 hours.  Run the below command to look for the pod uniref50-download-*  kubectl get pods   To verify its progress, examine the logs generated by the corresponding pod:  kubectl logs uniref50-download-xnz42 [NeMo I 2024-02-26 23:02:20 preprocess:289] Download and preprocess of UniRef50 data does not currently use GPU. Workstation or CPU-only instance recommended. [NeMo I 2024-02-26 23:02:20 preprocess:115] Data processing can take an hour or more depending on system resources. [NeMo I 2024-02-26 23:02:20 preprocess:117] Downloading file from https://ftp.uniprot.org/pub/databases/uniprot/uniref/uniref50/uniref50.fasta.gz... [NeMo I 2024-02-26 23:02:20 preprocess:75] Downloading file to /fsx/raw/uniref50.fasta.gz... [NeMo I 2024-02-26 23:08:33 preprocess:89] Extracting file to /fsx/raw/uniref50.fasta... [NeMo I 2024-02-26 23:12:46 preprocess:311] UniRef50 data processing complete. [NeMo I 2024-02-26 23:12:46 preprocess:313] Indexing UniRef50 dataset. [NeMo I 2024-02-26 23:16:21 preprocess:319] Writing processed dataset files to /fsx/processed... [NeMo I 2024-02-26 23:16:21 preprocess:255] Creating train split...   After finishing this task, the processed dataset will be saved in the /fsx/processed directory. Once this is done, we can move forward and start the pre-training job by running the following command:  Following this, we can proceed to execute the pre-training job by running:  In this PyTorchJob YAML, the command python3 -m torch.distributed.run plays a crucial role in orchestrating distributed training across multiple worker pods in your Kubernetes cluster.  It handles the following tasks:  Initializes a distributed backend (e.g., c10d, NCCL) for communication between worker processes.In our example it's using c10d. This is a commonly used distributed backend in PyTorch that can leverage different communication mechanisms like TCP or Infiniband depending on your environment.Sets up environment variables to enable distributed training within your training script.Launches your training script on all worker pods, ensuring each process participates in the distributed training.  cd examples/training kubectl apply -f esm1nv_pretrain-job.yaml   Run the below command to look for the pods esm1nv-pretraining-worker-*  kubectl get pods   NAME READY STATUS RESTARTS AGE esm1nv-pretraining-worker-0 1/1 Running 0 13m esm1nv-pretraining-worker-1 1/1 Running 0 13m esm1nv-pretraining-worker-10 1/1 Running 0 13m esm1nv-pretraining-worker-11 1/1 Running 0 13m esm1nv-pretraining-worker-12 1/1 Running 0 13m esm1nv-pretraining-worker-13 1/1 Running 0 13m esm1nv-pretraining-worker-14 1/1 Running 0 13m esm1nv-pretraining-worker-15 1/1 Running 0 13m esm1nv-pretraining-worker-2 1/1 Running 0 13m esm1nv-pretraining-worker-3 1/1 Running 0 13m esm1nv-pretraining-worker-4 1/1 Running 0 13m esm1nv-pretraining-worker-5 1/1 Running 0 13m esm1nv-pretraining-worker-6 1/1 Running 0 13m esm1nv-pretraining-worker-7 1/1 Running 0 13m esm1nv-pretraining-worker-8 1/1 Running 0 13m esm1nv-pretraining-worker-9 1/1 Running 0 13m   We should see 16 pods running. We chose p3.16xlarge instances and each instance has 8 GPUs. In the pod definition we specified each job will leverage 1 gpu. Since we set up &quot;nprocPerNode&quot; to &quot;8&quot;, each node will be responsible for 8 jobs. Since we have 2 nodes, total of 16 pods will start. For more details around distributed pytorch training see pytorch docs.  info This training job can run for at least 3-4 days with 2 p3.16xlarge nodes.  This configuration utilizes Kubeflow's PyTorch training Custom Resource Definition (CRD). Within this manifest, various parameters are available for customization. For detailed insights into each parameter and guidance on fine-tuning, you can refer to BioNeMo's documentation.  info Based on the Kubeflow training operator documentation, if you do not specify the master replica pod explicitly, the first worker replica pod(worker-0) will be treated as the master pod.  To track the progress of this process, follow these steps:  kubectl logs esm1nv-pretraining-worker-0 Epoch 0: 7%|▋ | 73017/1017679 [00:38&lt;08:12, 1918.0%   Additionally, to monitor the usage of the GPUs, you have the option to connect to your nodes through the EC2 console using Session Manager and run nvidia-smi command. If you want to have a more robust observability, you can refer to the DCGM Exporter.  sh-4.2$ nvidia-smi Thu Mar 7 16:31:01 2024 +---------------------------------------------------------------------------------------+ | NVIDIA-SMI 535.129.03 Driver Version: 535.129.03 CUDA Version: 12.2 | |-----------------------------------------+----------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+======================+======================| | 0 Tesla V100-SXM2-16GB On | 00000000:00:17.0 Off | 0 | | N/A 51C P0 80W / 300W | 3087MiB / 16384MiB | 100% Default | | | | N/A | +-----------------------------------------+----------------------+----------------------+ | 1 Tesla V100-SXM2-16GB On | 00000000:00:18.0 Off | 0 | | N/A 44C P0 76W / 300W | 3085MiB / 16384MiB | 100% Default | | | | N/A | +-----------------------------------------+----------------------+----------------------+ | 2 Tesla V100-SXM2-16GB On | 00000000:00:19.0 Off | 0 | | N/A 43C P0 77W / 300W | 3085MiB / 16384MiB | 100% Default | | | | N/A | +-----------------------------------------+----------------------+----------------------+ | 3 Tesla V100-SXM2-16GB On | 00000000:00:1A.0 Off | 0 | | N/A 52C P0 77W / 300W | 3085MiB / 16384MiB | 100% Default | | | | N/A | +-----------------------------------------+----------------------+----------------------+ | 4 Tesla V100-SXM2-16GB On | 00000000:00:1B.0 Off | 0 | | N/A 49C P0 79W / 300W | 3085MiB / 16384MiB | 100% Default | | | | N/A | +-----------------------------------------+----------------------+----------------------+ | 5 Tesla V100-SXM2-16GB On | 00000000:00:1C.0 Off | 0 | | N/A 44C P0 74W / 300W | 3085MiB / 16384MiB | 100% Default | | | | N/A | +-----------------------------------------+----------------------+----------------------+ | 6 Tesla V100-SXM2-16GB On | 00000000:00:1D.0 Off | 0 | | N/A 44C P0 78W / 300W | 3085MiB / 16384MiB | 100% Default | | | | N/A | +-----------------------------------------+----------------------+----------------------+ | 7 Tesla V100-SXM2-16GB On | 00000000:00:1E.0 Off | 0 | | N/A 50C P0 79W / 300W | 3085MiB / 16384MiB | 100% Default | | | | N/A | +-----------------------------------------+----------------------+----------------------+ +---------------------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=======================================================================================| | 0 N/A N/A 1552275 C /usr/bin/python3 3084MiB | | 1 N/A N/A 1552277 C /usr/bin/python3 3082MiB | | 2 N/A N/A 1552278 C /usr/bin/python3 3082MiB | | 3 N/A N/A 1552280 C /usr/bin/python3 3082MiB | | 4 N/A N/A 1552279 C /usr/bin/python3 3082MiB | | 5 N/A N/A 1552274 C /usr/bin/python3 3082MiB | | 6 N/A N/A 1552273 C /usr/bin/python3 3082MiB | | 7 N/A N/A 1552276 C /usr/bin/python3 3082MiB | +---------------------------------------------------------------------------------------+   Benefits of Distributed Training:​  By distributing the training workload across multiple GPUs in your worker pods, you can train large models faster by leveraging the combined computational power of all GPUs. Handle larger datasets that might not fit on a single GPU's memory.  Conclusion​  BioNeMo stands as a formidable generative AI tool tailored for the realm of drug discovery. In this illustrative example, we took the initiative to pretrain a custom model entirely from scratch, utilizing the extensive uniref50 dataset. However, it's worth noting that BioNeMo offers the flexibility to expedite the process by employing pretrained models directly provided by NVidia. This alternative approach can significantly streamline your workflow while maintaining the robust capabilities of the BioNeMo framework.  Cleanup 👈 ","version":"Next","tagName":"h3"},{"title":"BERT-Large on Trainium","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/training/Neuron/BERT-Large","content":"BERT-Large on Trainium info COMING SOON Please note that this section is currently a work in progress and will serve as a comprehensive collection of resources for running data and ML workloads on EKS.","keywords":"","version":"Next"},{"title":"Serving LLMs with RayServe and vLLM on AWS Neuron","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2","content":"","keywords":"","version":"Next"},{"title":"What is AWS Neuron?​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#what-is-aws-neuron","content":" In this tutorial, you'll leverage AWS Neuron, a powerful SDK that optimizes deep learning performance on AWS Inferentia and Trainium accelerators. Neuron seamlessly integrates with frameworks like PyTorch and TensorFlow, providing a comprehensive toolkit for developing, profiling, and deploying high-performance machine learning models on specialized EC2 instances such as Inf1, Inf2, Trn1, and Trn1n.  ","version":"Next","tagName":"h3"},{"title":"What is vLLM?​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#what-is-vllm","content":" vLLM is a high-performance library for LLM inference and serving, designed to maximize throughput and minimize latency. At its core, vLLM utilizes PagedAttention, an innovative attention algorithm that dramatically improves memory efficiency, allowing for optimal utilization of GPU resources. This open-source solution offers seamless integration through its Python API and OpenAI-compatible server, enabling developers to deploy and scale large language models like Llama 3 with unprecedented efficiency in production environments.  ","version":"Next","tagName":"h3"},{"title":"What is RayServe?​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#what-is-rayserve","content":" Ray Serve is a scalable model serving library built on top of Ray, designed for deploying machine learning models and AI applications with features like framework-agnostic deployment, model composition, and built-in scaling. You will also encounter RayService, which is a Kubernetes custom resource that's part of the KubeRay project, used to deploy and manage Ray Serve applications on Kubernetes clusters.  ","version":"Next","tagName":"h3"},{"title":"What is Llama-3-8B Instruct?​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#what-is-llama-3-8b-instruct","content":" Meta developed and released the Meta Llama 3 family of large language models (LLMs), a collection of pretrained and instruction tuned generative text models in 8 and 70B sizes. The Llama 3 instruction tuned models are optimized for dialogue use cases and outperform many of the available open source chat models on common industry benchmarks. Further, in developing these models, we took great care to optimize helpfulness and safety.  More information on Llama3 sizes and model architecture can be found here.  ","version":"Next","tagName":"h3"},{"title":"Why AWS Accelerators?​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#why-aws-accelerators","content":" Scalability and Availability  One of the key challenges in deploying large language models (LLMs) like Llama-3 is the scalability and availability of suitable hardware. Traditional GPU instances often face scarcity due to high demand, making it challenging to provision and scale resources effectively.  In contrast, Trn1/Inf2 instances, such as trn1.32xlarge, trn1n.32xlarge, inf2.24xlarge and inf2.48xlarge, are purpose built for high-performance deep learning (DL) training and inference of generative AI models, including LLMs. They offer both scalability and availability, ensuring that you can deploy and scale your Llama-3 models as needed, without resource bottlenecks or delays.  Cost Optimization  Running LLMs on traditional GPU instances can be cost-prohibitive, especially given the scarcity of GPUs and their competitive pricing. Trn1/Inf2 instances provide a cost-effective alternative. By offering dedicated hardware optimized for AI and machine learning tasks, Trn1/Inf2 instances allow you to achieve top-notch performance at a fraction of the cost. This cost optimization enables you to allocate your budget efficiently, making LLM deployment accessible and sustainable.  Performance Boost  While Llama-3 can achieve high-performance inference on GPUs, Neuron accelerators take performance to the next level. Neuron accelerators are purpose-built for machine learning workloads, providing hardware acceleration that significantly enhances Llama-3's inference speeds. This translates to faster response times and improved user experiences when deploying Llama-3 on Trn1/Inf2 instances.  ","version":"Next","tagName":"h3"},{"title":"Solution Architecture​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#solution-architecture","content":" In this section, we will delve into the architecture of our solution, which combines Llama-3 model, Ray Serve and Inferentia2 on Amazon EKS.    ","version":"Next","tagName":"h2"},{"title":"Deploying the Solution​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#deploying-the-solution","content":" To get started with deploying Llama-3-8B-instruct on Amazon EKS, we will cover the necessary prerequisites and guide you through the deployment process step by step.  This includes setting up the infrastructure using AWS Inferentia instances and deploying the Ray cluster.  Prerequisites 👈  ","version":"Next","tagName":"h2"},{"title":"Deploying the Ray Cluster with Llama3 Model​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#deploying-the-ray-cluster-with-llama3-model","content":" In this tutorial, we leverage the KubeRay operator, which extends Kubernetes with custom resource definitions for Ray-specific constructs like RayCluster, RayJob, and RayService. The operator watches for user events related to these resources, automatically creates necessary Kubernetes artifacts to form Ray clusters, and continuously monitors cluster state to ensure the desired configuration matches the actual state. It handles lifecycle management including setup, dynamic scaling of worker groups, and teardown, abstracting away the complexity of managing Ray applications on Kubernetes.  Each Ray cluster consists of a head node pod and a collection of worker node pods, with optional autoscaling support to size clusters according to workload requirements. KubeRay supports heterogeneous compute nodes (including GPUs) and running multiple Ray clusters with different Ray versions in the same Kubernetes cluster. Additionally, KubeRay can integrate with AWS Inferentia accelerators, enabling efficient deployment of large language models like Llama 3 on specialized hardware, potentially improving performance and cost-effectiveness for machine learning inference tasks.  Having deployed the EKS cluster with all the necessary components, we can now proceed with the steps to deploy NousResearch/Meta-Llama-3-8B-Instruct using RayServe and vLLM on AWS Accelerators.  Step 1: To deploy the RayService cluster, navigate to the directory containing the vllm-rayserve-deployment.yaml file and execute the kubectl apply command in your terminal. This will apply the RayService configuration and deploy the cluster on your EKS setup.  cd data-on-eks/gen-ai/inference/vllm-rayserve-inf2 kubectl apply -f vllm-rayserve-deployment.yaml   Optional Configuration  By default, an inf2.8xlarge instance will be provisioned. If you would like to use inf2.48xlarge, modify the file vllm-rayserve-deployment.yaml to change resources section under worker container.  limits: cpu: &quot;30&quot; memory: &quot;110G&quot; aws.amazon.com/neuron: &quot;1&quot; requests: cpu: &quot;30&quot; memory: &quot;110G&quot; aws.amazon.com/neuron: &quot;1&quot;   to the following:  limits: cpu: &quot;90&quot; memory: &quot;360G&quot; aws.amazon.com/neuron: &quot;12&quot; requests: cpu: &quot;90&quot; memory: &quot;360G&quot; aws.amazon.com/neuron: &quot;12&quot;   Step 2: Verify the deployment by running the following commands  To ensure that the deployment has been successfully completed, run the following commands:  info Deployment process may take up to 10 minutes. The Head Pod is expected to be ready within 5 to 6 minutes, while the Ray Serve worker pod may take up to 10 minutes for image retrieval and Model deployment from Huggingface.  According to the RayServe configuration, you will have one Ray head pod running on an x86 instance and one worker pod running on a inf2 instance. You can modify the RayServe YAML file to run multiple replicas; however, be aware that each additional replica can potentially create new instances.  kubectl get pods -n vllm   NAME READY STATUS RESTARTS AGE lm-llama3-inf2-raycluster-ksh7w-worker-inf2-group-dcs5n 1/1 Running 0 2d4h vllm-llama3-inf2-raycluster-ksh7w-head-4ck8f 2/2 Running 0 2d4h   This deployment also configures a service with multiple ports. Port 8265 is designated for the Ray dashboard, and port 8000 is for the vLLM inference server endpoint.  Run the following command to verify the services:  kubectl get svc -n vllm NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE vllm ClusterIP 172.20.23.54 &lt;none&gt; 8080/TCP,6379/TCP,8265/TCP,10001/TCP,8000/TCP 2d4h vllm-llama3-inf2-head-svc ClusterIP 172.20.18.130 &lt;none&gt; 6379/TCP,8265/TCP,10001/TCP,8000/TCP,8080/TCP 2d4h vllm-llama3-inf2-serve-svc ClusterIP 172.20.153.10 &lt;none&gt; 8000/TCP 2d4h   To access the Ray dashboard, you can port-forward the relevant port to your local machine:  kubectl -n vllm port-forward svc/vllm 8265:8265   You can then access the web UI at http://localhost:8265, which displays the deployment of jobs and actors within the Ray ecosystem.    Once the deployment is complete, the Controller and Proxy status should be HEALTHY and Application status should be RUNNING    ","version":"Next","tagName":"h2"},{"title":"To Test the Llama3 Model​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#to-test-the-llama3-model","content":" Now it's time to test the Meta-Llama-3-8B-Instruct chat model. We'll use a Python client script to send prompts to the RayServe inference endpoint and verify the outputs generated by the model.  First, execute a port forward to the vllm-llama3-inf2-serve-svc Service using kubectl:  kubectl -n vllm port-forward svc/vllm-llama3-inf2-serve-svc 8000:8000   openai-client.py uses the HTTP POST method to send a list of prompts to the inference endpoint for text completion and Q&amp;A, targeting the vllm server.  To run the Python client application in a virtual environment, follow these steps:  cd data-on-eks/gen-ai/inference/vllm-rayserve-inf2 python3 -m venv .venv source .venv/bin/activate pip3 install openai python3 openai-client.py   You will see an output something like below in the terminal:  Click to expand Python Client Terminal output Example 1 - Simple chat completion: Handling connection for 8000 The capital of India is New Delhi. Example 2 - Chat completion with different parameters: The twin suns of Tatooine set slowly in the horizon, casting a warm orange glow over the bustling spaceport of Anchorhead. Amidst the hustle and bustle, a young farm boy named Anakin Skywalker sat atop a dusty speeder, his eyes fixed on the horizon as he dreamed of adventure beyond the desert planet. As the suns dipped below the dunes, Anakin's uncle, Owen Lars, called out to him from the doorway of their humble moisture farm. &quot;Anakin, it's time to head back! Your aunt and I have prepared a special dinner in your honor.&quot; But Anakin was torn. He had received a strange message from an unknown sender, hinting at a great destiny waiting for him. Against his uncle's warnings, Anakin decided to investigate further, sneaking away into the night to follow the mysterious clues. As he rode his speeder through the desert, the darkness seemed to grow thicker, and the silence was broken only by the distant Example 3 - Streaming chat completion: I'd be happy to help you with that. Here we go: 1... (Pause) 2... (Pause) 3... (Pause) 4... (Pause) 5... (Pause) 6... (Pause) 7... (Pause) 8... (Pause) 9... (Pause) 10! Let me know if you have any other requests!   ","version":"Next","tagName":"h3"},{"title":"Observability​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#observability","content":" ","version":"Next","tagName":"h2"},{"title":"Observability with AWS CloudWatch and Neuron Monitor​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#observability-with-aws-cloudwatch-and-neuron-monitor","content":" This blueprint deploys the CloudWatch Observability Agent as a managed add-on, providing comprehensive monitoring for containerized workloads. It includes container insights for tracking key performance metrics such as CPU and memory utilization. Additionally, the addon utilizes the Neuron Monitor plugin to capture and report Neuron-specific metrics.  All metrics, including container insights and Neuron metrics such as Neuron Core utilization, NeuronCore memory usage are sent to Amazon CloudWatch, where you can monitor and analyze them in real-time. After the deployment is complete, you should be able to access these metrics directly from the CloudWatch console, allowing you to manage and optimize your workloads effectively.    ","version":"Next","tagName":"h3"},{"title":"Open WebUI Deployment​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#open-webui-deployment","content":" info Open WebUI is compatible only with models that work with the OpenAI API server and Ollama.  1. Deploy the WebUI  Deploy the Open WebUI by running the following command:  kubectl apply -f openai-webui-deployment.yaml   2. Port Forward to Access WebUI  Note If you're running a port forward already to test the inference with python client, then press ctrl+c to interrupt that.  Use kubectl port-forward to access the WebUI locally:  kubectl port-forward svc/open-webui 8081:80 -n openai-webui   3. Access the WebUI  Open your browser and go to http://localhost:8081  4. Sign Up  Sign up using your name, email, and a dummy password.  5. Start a New Chat  Click on New Chat and select the model from the dropdown menu, as shown in the screenshot below:    6. Enter Test Prompt  Enter your prompt, and you will see the streaming results, as shown below:    ","version":"Next","tagName":"h2"},{"title":"Performance Benchmarking with LLMPerf Tool​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#performance-benchmarking-with-llmperf-tool","content":" LLMPerf is an open-source tool designed for benchmarking the performance of large language models (LLMs).  LLMPerf tool connects to the vllm service via port 8000 using the port forwarding setup above done using the command kubectl -n vllm port-forward svc/vllm-llama3-inf2-serve-svc 8000:8000.  Execute the commands below in your terminal.  Clone the LLMPerf repository:  git clone https://github.com/ray-project/llmperf.git cd llmperf pip install -e . pip install pandas pip install ray   Create the vllm_benchmark.sh file using the command below:  cat &lt;&lt; 'EOF' &gt; vllm_benchmark.sh #!/bin/bash model=${1:-NousResearch/Meta-Llama-3-8B-Instruct} vu=${2:-1} export OPENAI_API_KEY=EMPTY export OPENAI_API_BASE=&quot;http://localhost:8000/v1&quot; export TOKENIZERS_PARALLELISM=true #if you have more vllm servers, append the below line to the above #;http://localhost:8001/v1;http://localhost:8002/v1&quot; max_requests=$(expr ${vu} \\* 8 ) date_str=$(date '+%Y-%m-%d-%H-%M-%S') python ./token_benchmark_ray.py \\ --model ${model} \\ --mean-input-tokens 512 \\ --stddev-input-tokens 20 \\ --mean-output-tokens 245 \\ --stddev-output-tokens 20 \\ --max-num-completed-requests ${max_requests} \\ --timeout 7200 \\ --num-concurrent-requests ${vu} \\ --results-dir &quot;vllm_bench_results/${date_str}&quot; \\ --llm-api openai \\ --additional-sampling-params '{}' EOF   --mean-input-tokens: specifies the average number of tokens in the input prompts  --stddev-input-tokens: specifies the variability in input token lengths for creating a more realistic testing environment  --mean-output-tokens: specifies the average number of tokens expected in the model's output to simulate realistic response lengths  --stddev-output-tokens: specifies the variability in output token lengths introducing diversity in response sizes  --max-num-completed-requests: sets the maximum number of requests to process  --num-concurrent-requests: specifies the number of simultaneous requests to simulate parallel workload  The command below executes the benchmarking script with the specified model, NousResearch/Meta-Llama-3-8B-Instruct, and sets the number of virtual users to 2. This results in the benchmark testing the model's performance with 2 concurrent requests, calculating a maximum of 16 requests to be processed.  Execute the command below:  ./vllm_benchmark.sh NousResearch/Meta-Llama-3-8B-Instruct 2   You should see similar output like the following:  ./vllm_benchmark.sh NousResearch/Meta-Llama-3-8B-Instruct 2 None of PyTorch, TensorFlow &gt;= 2.0, or Flax have been found. Models won't be available and only tokenizers, configuration and file/data utilities can be used. You are using the default legacy behaviour of the &lt;class 'transformers.models.llama.tokenization_llama_fast.LlamaTokenizerFast'&gt;. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565 - if you loaded a llama tokenizer from a GGUF file you can ignore this message. 2024-09-03 09:54:45,976\tINFO worker.py:1783 -- Started a local Ray instance. 0%| | 0/16 [00:00&lt;?, ?it/s]Handling connection for 8000 Handling connection for 8000 12%|█████████████████████████████▌ | 2/16 [00:17&lt;02:00, 8.58s/it]Handling connection for 8000 Handling connection for 8000 25%|███████████████████████████████████████████████████████████ | 4/16 [00:33&lt;01:38, 8.20s/it]Handling connection for 8000 Handling connection for 8000 38%|████████████████████████████████████████████████████████████████████████████████████████▌ | 6/16 [00:47&lt;01:17, 7.75s/it]Handling connection for 8000 Handling connection for 8000 50%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████ | 8/16 [01:00&lt;00:58, 7.36s/it]Handling connection for 8000 Handling connection for 8000 62%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉ | 10/16 [01:15&lt;00:43, 7.31s/it]Handling connection for 8000 Handling connection for 8000 75%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎ | 12/16 [01:29&lt;00:28, 7.20s/it]Handling connection for 8000 Handling connection for 8000 88%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋ | 14/16 [01:45&lt;00:15, 7.52s/it]Handling connection for 8000 Handling connection for 8000 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 16/16 [02:01&lt;00:00, 7.58s/it] \\Results for token benchmark for NousResearch/Meta-Llama-3-8B-Instruct queried with the openai api. inter_token_latency_s p25 = 0.051964785839225695 p50 = 0.053331799814278796 p75 = 0.05520852723583741 p90 = 0.05562424625711179 p95 = 0.05629651696856784 p99 = 0.057518213120178636 mean = 0.053548951905597324 min = 0.0499955879607504 max = 0.05782363715808134 stddev = 0.002070751885022901 ttft_s p25 = 1.5284210312238429 p50 = 1.7579061459982768 p75 = 1.8209733433031943 p90 = 1.842437624989543 p95 = 1.852818323241081 p99 = 1.8528624982456676 mean = 1.5821313202395686 min = 0.928935999982059 max = 1.8528735419968143 stddev = 0.37523908630204694 end_to_end_latency_s p25 = 13.74749460403109 p50 = 14.441407957987394 p75 = 15.53337344751344 p90 = 16.104882833489683 p95 = 16.366086292022374 p99 = 16.395070491998922 mean = 14.528114874927269 min = 10.75658329098951 max = 16.40231654199306 stddev = 1.4182672949824733 request_output_throughput_token_per_s p25 = 18.111220396798153 p50 = 18.703139371912407 p75 = 19.243016652511997 p90 = 19.37836414194298 p95 = 19.571455249271224 p99 = 19.915057038539217 mean = 18.682678715983627 min = 17.198769813363445 max = 20.000957485856215 stddev = 0.725563381521316 number_input_tokens p25 = 502.5 p50 = 509.5 p75 = 516.5 p90 = 546.5 p95 = 569.25 p99 = 574.65 mean = 515.25 min = 485 max = 576 stddev = 24.054105678657024 number_output_tokens p25 = 259.75 p50 = 279.5 p75 = 291.75 p90 = 297.0 p95 = 300.5 p99 = 301.7 mean = 271.625 min = 185 max = 302 stddev = 29.257192847799555 Number Of Errored Requests: 0 Overall Output Throughput: 35.827933968528434 Number Of Completed Requests: 16 Completed Requests Per Minute: 7.914131755588426   You can try generating benchmarking results with multiple concurrent requests to understand how performance varies with increasing number of concurrent requests:  ./vllm_benchmark.sh NousResearch/Meta-Llama-3-8B-Instruct 2 ./vllm_benchmark.sh NousResearch/Meta-Llama-3-8B-Instruct 4 ./vllm_benchmark.sh NousResearch/Meta-Llama-3-8B-Instruct 8 ./vllm_benchmark.sh NousResearch/Meta-Llama-3-8B-Instruct 16 . .   ","version":"Next","tagName":"h2"},{"title":"Performance Benchmarking Metrics​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#performance-benchmarking-metrics","content":" You can find the results of the benchmarking script under vllm_bench_results directory in the llmperf directory. The results are stored in folders following a date-time naming convention. New folders are created every time the benchmarking script is executed.  You will find that the results for every execution of the benchmarking script comprise of 2 files in the format below:  NousResearch-Meta-Llama-3-8B-Instruct_512_245_summary_32.json - contains the summary of performance metrics across all the request/response pairs.  NousResearch-Meta-Llama-3-8B-Instruct_512_245_individual_responses.json - contains performance metrics for each and every request / response pair.  Each of these files contain the following Performance Benchmarking Metrics:  results_inter_token_latency_s_*: Also referred to as Token generation latency (TPOT).Inter-Token latency refers to the average time elapsed between generating consecutive output tokens by a large language model (LLM) during the decoding or generation phase  results_ttft_s_*: Time taken to generate the first token (TTFT)  results_end_to_end_s_*: End-to-End latency - total time taken from when a user submits an input prompt to when the complete output response is generated by the LLM  results_request_output_throughput_token_per_s_*: Number of output tokens generated by a large language model (LLM) per second across all user requests or queries  results_number_input_tokens_*: Number of input tokens in the requests (Input length)  results_number_output_tokens_*: Number of output tokens in the requests (Output length)  ","version":"Next","tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#conclusion","content":" In summary, when it comes to deploying and scaling Llama-3, AWS Trn1/Inf2 instances offer a compelling advantage. They provide the scalability, cost optimization, and performance boost needed to make running large language models efficient and accessible, all while overcoming the challenges associated with the scarcity of GPUs. Whether you're building chatbots, natural language processing applications, or any other LLM-driven solution, Trn1/Inf2 instances empower you to harness the full potential of Llama-3 on the AWS cloud.  ","version":"Next","tagName":"h2"},{"title":"Cleanup​","type":1,"pageTitle":"Serving LLMs with RayServe and vLLM on AWS Neuron","url":"/data-on-eks/docs/gen-ai/inference/Neuron/vllm-ray-inf2#cleanup","content":" Finally, we'll provide instructions for cleaning up and deprovisioning the resources when they are no longer needed.  Delete the RayCluster  cd data-on-eks/gen-ai/inference/vllm-rayserve-inf2 kubectl delete -f vllm-rayserve-deployment.yaml   Destroy the EKS Cluster and resources  cd data-on-eks/ai-ml/trainium-inferentia/ ./cleanup.sh  ","version":"Next","tagName":"h2"},{"title":"intro","type":0,"sectionRef":"#","url":"/data-on-eks/docs/intro","content":"intro","keywords":"","version":"Next"},{"title":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2","content":"","keywords":"","version":"Next"},{"title":"What is Llama-2?​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#what-is-llama-2","content":" Llama-2 is a large language model (LLM) trained on 2 trillion tokens of text and code. It is one of the largest and most powerful LLMs available today. Llama-2 can be used for a variety of tasks, including natural language processing, text generation, and translation.  Although Llama-2 is available as a pretrained model, in this tutorial we will show how to pretrain the model from scratch.  Llama-2-chat​  Llama-2 is a remarkable language model that has undergone a rigorous training process. It starts with pretraining using publicly available online data.  Llama-2 is available in three different model sizes:  Llama-2-70b: This is the largest Llama-2 model, with 70 billion parameters. It is the most powerful Llama-2 model and can be used for the most demanding tasks.Llama-2-13b: This is a medium-sized Llama-2 model, with 13 billion parameters. It is a good balance between performance and efficiency, and can be used for a variety of tasks.Llama-2-7b: This is the smallest Llama-2 model, with 7 billion parameters. It is the most efficient Llama-2 model and can be used for tasks that do not require the highest level of performance.  ","version":"Next","tagName":"h3"},{"title":"Which Llama-2 model size should I use?​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#which-llama-2-model-size-should-i-use","content":" The best Llama-2 model size for you will depend on your specific needs. and it may not always be the largest model for achieving the highest performance. It's advisable to evaluate your needs and consider factors such as computational resources, response time, and cost-efficiency when selecting the appropriate Llama-2 model size. The decision should be based on a comprehensive assessment of your application's goals and constraints.  Performance BoostWhile Llama-2 can achieve high-performance inference on GPUs, Neuron accelerators take performance to the next level. Neuron accelerators are purpose-built for machine learning workloads, providing hardware acceleration that significantly enhances Llama-2's inference speeds. This translates to faster response times and improved user experiences when deploying Llama-2 on Trn1/Inf2 instances.  ","version":"Next","tagName":"h3"},{"title":"Solution Architecture​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#solution-architecture","content":" In this section, we will delve into the architecture of our solution.  Trn1.32xl Instance: This is an EC2 accelerated instance type that is part of the EC2 Trn1 (Trainium) instance family, optimized for machine learning training workloads  MPI Worker Pods: These are Kubernetes pods configured for running MPI (Message Passing Interface) tasks. MPI is a standard for distributed memory parallel computing. Each worker pod runs on a trn1.32xlarge instance which is equipped with 16 Trainium accelerators and 8 Elastic Fabric Adapters (EFAs). EFAs are network devices that support high-performance computing applications running on Amazon EC2 instances.  MPI Launcher Pod: This pod is responsible for coordinating the MPI job across the worker pods. When a training job is first submitted to the cluster, an MPI launcher pod is created which waits for the workers to come online, connects to each worker, and invokes the training script.  MPI Operator: An operator in Kubernetes is a method of packaging, deploying, and managing a Kubernetes application. The MPI Operator automates the deployment and management of MPI workloads.  FSx for Lustre: A shared, high-performance filesystem which is well suited for workloads such as machine learning, high performance computing (HPC), video processing, and financial modeling. The FSx for Lustre filesystem will be shared across worker pods in the training job, providing a central repository to access the training data and to store model artifacts and logs.    ","version":"Next","tagName":"h2"},{"title":"Deploying the Solution​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#deploying-the-solution","content":" Steps to train Llama-2 using AWS Trainium on Amazon EKS  Note: This post makes use of Meta’s Llama tokenizer, which is protected by a user license that must be accepted before the tokenizer files can be downloaded. Please ensure that you have access to the Llama files by requesting access here.  Prerequisites 👈  ","version":"Next","tagName":"h2"},{"title":"Distributed training​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#distributed-training","content":" Once the EKS Cluster is deployed, you can proceed with the next steps of building neuronx-nemo-megatron container image and pushing the image to ECR.  ","version":"Next","tagName":"h2"},{"title":"Build the neuronx-nemo-megatron container image​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#build-the-neuronx-nemo-megatron-container-image","content":" Navigate to examples/llama2 directory  cd examples/llama2/   Run the 1-llama2-neuronx-pretrain-build-image.sh script to build the neuronx-nemo-megatron container image and push the image into ECR.  When prompted for a region, enter the region in which you launched your EKS cluster, above.  ./1-llama2-neuronx-pretrain-build-image.sh   Note: The image building and pushing to ECR will take ~10 minutes  ","version":"Next","tagName":"h3"},{"title":"Launch and connect to a CLI pod​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#launch-and-connect-to-a-cli-pod","content":" In this step we need access to the shared FSx storage. To copy files to this storage, we’ll first launch and connect to a CLI pod running the neuronx-nemo-megatron docker image that you created above.  Run the following script to launch the CLI pod:  ./2-launch-cmd-shell-pod.sh   Next, periodically run the following command until you see the CLI pod go into ‘Running’ state:  kubectl get pod -w   Once the CLI pod is ‘Running’, connect to it using the following command:  kubectl exec -it cli-cmd-shell -- /bin/bash   ","version":"Next","tagName":"h3"},{"title":"Download the Llama tokenizer and Redpajama dataset to FSx​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#download-the-llama-tokenizer-and-redpajama-dataset-to-fsx","content":" From within the CLI pod, we’ll download the Llama tokenizer files. These files are protected by Meta's Llama license, so you will need to run the huggingface-cli login command to login to Hugging Face using your access token. The access token is found under Settings → Access Tokens on the Hugging Face website.  huggingface-cli login   When prompted for your token, paste-in the access token and hit ENTER.  Next, you download the llama7-7b tokenizer files to /shared/llama7b_tokenizer by running the following python code:  python3 &lt;&lt;EOF import transformers tok = transformers.AutoTokenizer.from_pretrained(&quot;meta-llama/Llama-2-7b-hf&quot;) tok.save_pretrained(&quot;/shared/llama7b_tokenizer&quot;) EOF   Next, download the RedPajama-Data-1T-Sample dataset (a small subset of the full RedPajama dataset that contains 1B tokens).  While still connected to the CLI pod, use git to download the dataset  cd /shared git clone https://huggingface.co/datasets/togethercomputer/RedPajama-Data-1T-Sample \\ data/RedPajama-Data-1T-Sample   ","version":"Next","tagName":"h3"},{"title":"Tokenize the dataset​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#tokenize-the-dataset","content":" Tokenize the dataset using the preprocessing script included with neuronx-nemo-megatron. This preprocessing step will take ~60 minutes to run on a trn1.32xl instance.  cd /shared # Clone the neuronx-nemo-megatron repo, which includes the required scripts git clone https://github.com/aws-neuron/neuronx-nemo-megatron.git # Combine the separate redpajama files to a single jsonl file cat /shared/data/RedPajama-Data-1T-Sample/*.jsonl &gt; /shared/redpajama_sample.jsonl # Run preprocessing script using llama tokenizer python3 neuronx-nemo-megatron/nemo/scripts/nlp_language_modeling/preprocess_data_for_megatron.py \\ --input=/shared/redpajama_sample.jsonl \\ --json-keys=text \\ --tokenizer-library=huggingface \\ --tokenizer-type=/shared/llama7b_tokenizer \\ --dataset-impl=mmap \\ --output-prefix=/shared/data/redpajama_sample \\ --append-eod \\ --need-pad-id \\ --workers=32   ","version":"Next","tagName":"h3"},{"title":"Modify dataset and tokenizer paths in the training script​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#modify-dataset-and-tokenizer-paths-in-the-training-script","content":" Note: When we later launch our training jobs in EKS, the training pods will run the training script from within neuronx-nemo-megatron/nemo/examples directory on FSx. This is convenient, because it will let you modify your training script directly on FSx without requiring that you rebuild the neuronx-nemo-megatron container for every change.  Modify the test_llama.sh script /shared/neuronx-nemo-megatron/nemo/examples/nlp/language_modeling/test_llama.sh to update the following two lines. These lines tell the training pod workers where to find the Llama tokenizer and the dataset on the FSx filesystem.  Run:  sed -i 's#^\\(: ${TOKENIZER_PATH=\\).*#\\1/shared/llama7b_tokenizer}#' /shared/neuronx-nemo-megatron/nemo/examples/nlp/language_modeling/test_llama.sh sed -i 's#^\\(: ${DATASET_PATH=\\).*#\\1/shared/data/redpajama_sample_text_document}#' /shared/neuronx-nemo-megatron/nemo/examples/nlp/language_modeling/test_llama.sh   Before changes:  : ${TOKENIZER_PATH=$HOME/llamav2_weights/7b-hf} : ${DATASET_PATH=$HOME/examples_datasets/llama_7b/book.jsonl-processed_text_document}   After changes:  : ${TOKENIZER_PATH=/shared/llama7b_tokenizer} : ${DATASET_PATH=/shared/data/redpajama_sample_text_document}   You can save your changes in nano by pressing CTRL-X, then y, then ENTER.  When you are finished, type exit or press CTRL-d to exit the CLI pod.  If you no longer need the CLI pod you can remove it by running:  kubectl delete pod cli-cmd-shell   We are finally ready to launch our pre-compilation and training jobs!  First, let's check to make sure the MPI operator is functional by running this command:  kubectl get all -n mpi-operator   If the MPI Operator is not installed, please follow the MPI Operator installation instructions before proceeding.  Before we can run the training job, we first run a pre-compilation job in order to prepare the model artifacts. This step extracts and compiles the underlying compute graphs for the Llama-2-7b model and generates Neuron executable files (NEFFs) that can run on the Trainium accelerators. These NEFFs are stored in a persistent Neuron cache on FSx so that the training job can later access them.  ","version":"Next","tagName":"h3"},{"title":"Run pre-compilation job​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#run-pre-compilation-job","content":" Run the pre-compilation script  ./3-llama2-neuronx-mpi-compile.sh   Pre-compilation will take ~10 minutes when using 4 trn1.32xlarge nodes.  Periodically run kubectl get pods | grep compile and wait until you see that the compile job shows ‘Completed’.  When pre-compilation is complete, you can then launch the pre-training job on 4 trn1.32xl nodes by running the following script:  ","version":"Next","tagName":"h3"},{"title":"Run training job​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#run-training-job","content":" ./4-llama2-neuronx-mpi-train.sh   ","version":"Next","tagName":"h3"},{"title":"View training job output​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#view-training-job-output","content":" To monitor the training job output - first, find the name of the launcher pod associated with your training job:  kubectl get pods | grep launcher   Once you have identified the name of the launcher pod and see that it is ‘Running’, the next step is to determine its UID. Replace test-mpi-train-launcher-xxx with your launcher pod name in the following command and it will output the UID:  kubectl get pod test-mpi-train-launcher-xxx -o json | jq -r &quot;.metadata.uid&quot;   Use the UID to determine the log path so you can tail the training logs. Replace UID in the following command with the above value.  kubectl exec -it test-mpi-train-worker-0 -- tail -f /shared/nemo_experiments/UID/0/log   When you are done viewing the logs, you can press CTRL-C to quit the tail command.  ","version":"Next","tagName":"h3"},{"title":"Monitor Trainium accelerator utilization​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#monitor-trainium-accelerator-utilization","content":" To monitor Trainium accelerator utilization you can use the neuron-top command. Neuron-top is a console-based tool for monitoring Neuron and system-related performance metrics on trn1/inf2/inf1 instances. You can launch neuron-top on one of the worker pods as follows:  kubectl exec -it test-mpi-train-worker-0 -- /bin/bash -l neuron-top   ","version":"Next","tagName":"h3"},{"title":"View training job metrics in TensorBoard​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#view-training-job-metrics-in-tensorboard","content":" TensorBoard is a web-based visualization tool that is commonly used to monitor and explore training jobs. It allows you to quickly monitor training metrics, and you can also easily compare metrics across different training runs.  TensorBoard logs available in the /shared/nemo_experiments/ directory on the FSx for Lustre filesystem.  Run the following script to create a TensorBoard deployment so you can visualize your Llama-2 training job progress:  ./5-deploy-tensorboard.sh   Once the deployment is ready the script will output a password-protected URL for your new TensorBoard deployment.  Launch the URL to view your training progress.  When you have opened the TensorBoard interface, choose your training job UID from the left-hand menu, and then explore the various training metrics (ex: reduced-train-loss, throughput, and grad-norm) from the main application window.  ","version":"Next","tagName":"h3"},{"title":"Stopping the training job​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#stopping-the-training-job","content":" To stop your training job and remove the launcher/worker pods, run the following command:  kubectl delete mpijob test-mpi-train   You can then run kubectl get pods to confirm that the launcher/worker pods have been removed.  ","version":"Next","tagName":"h3"},{"title":"Cleaning up​","type":1,"pageTitle":"Training a Llama-2 Model using Trainium, Neuronx-Nemo-Megatron and MPI operator","url":"/data-on-eks/docs/gen-ai/training/Neuron/Llama2#cleaning-up","content":" To remove the resources created using this solution, run the cleanup script:  cd data-on-eks/ai-ml/trainium-inferentia ./cleanup.sh  ","version":"Next","tagName":"h3"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/data-on-eks/docs/introduction/intro","content":"Introduction Data on Amazon EKS(DoEKS) - A tool for building aws managed and self-managed scalable data platforms on Amazon EKS. With DoEKS, You have access to: Robust Deployment Infrastructure as Code (IaC) Templates using Terraform and AWS CDK, among otherBest Practices for Deploying Data Solutions on Amazon EKSDetailed Performance Benchmark ReportsHands-on Samples of Apache Spark/ML Jobs and various other frameworksIn-depth Reference Architectures and Data Blogs to keep you ahead of the curve Architecture The diagram displays the open source data tools, k8s operators and frameworks that runs on Kubernetes covered in DoEKS. AWS Data Analytics managed services integration with Data on EKS OSS tools. Main Features 🚀 EMR on EKS 🚀 Open Source Spark on EKS 🚀 Custom Kubernetes Schedulers (e.g., Apache YuniKorn, Volcano) 🚀 Job Schedulers (e.g., Apache Airflow, Argo Workflows) 🚀 AI/ML on Kubernetes (e.g., KubeFlow, MLFlow, Tensorflow, PyTorch, etc.) 🚀 Distributed Databases (e.g., Cassandra, CockroachDB, MongoDB etc.) 🚀 Streaming Platforms (e.g., Apache Kafka, Apache Flink, Apache Beam etc.) Getting Started Checkout the documentation for each section to deploy infrastructure and run sample Spark/ML jobs.","keywords":"","version":"Next"},{"title":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","type":0,"sectionRef":"#","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2","content":"","keywords":"","version":"Next"},{"title":"What is Llama-2?​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#what-is-llama-2","content":" Llama-2 is a state-of-the-art large language model (LLM) designed for various natural language processing (NLP) tasks, including text generation, summarization, translation, question answering, and more. It's a powerful tool that can be fine-tuned for specific use cases.  ","version":"Next","tagName":"h3"},{"title":"Why RayTrain and KubeRay for Distributed Training?​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#why-raytrain-and-kuberay-for-distributed-training","content":" Distributed training is essential for large models like Llama-2 due to their extensive computational and memory requirements. The combination of RayTrain and KubeRay, especially when leveraged with AWS Trainium, provides a robust framework for handling these demands efficiently and effectively:  RayTrain:​  Simplified Distributed Training: RayTrain is a high-level library built on the Ray framework that abstracts the complexities of distributed training. It allows you to scale your Llama-2 training across multiple nodes with minimal code changes. Ray's actor-based architecture and task-based parallelism enable efficient execution of distributed workloads.Flexible Strategies: RayTrain supports various distributed training strategies such as data parallelism and model parallelism. Data parallelism splits the dataset across multiple nodes, while model parallelism splits the model itself. This flexibility allows you to optimize training based on the specific needs of your model and the architecture of your training environment.Fault Tolerance: RayTrain includes built-in fault tolerance mechanisms. If a node fails, Ray can reschedule the tasks on other available nodes, ensuring that the training job continues without interruption. This feature is crucial for maintaining robustness in large-scale distributed training environments.Ease of Use: RayTrain offers intuitive APIs that simplify the setup and execution of distributed training jobs. Integrations with popular machine learning libraries like Hugging Face Transformers make it easier to incorporate RayTrain into your existing workflows without extensive modifications.  KubeRay:​  Integration with Kubernetes: KubeRay leverages Kubernetes' native capabilities to deploy, manage, and scale Ray clusters. This integration allows you to use Kubernetes' robust orchestration features to handle Ray workloads effectively.Dynamic Scaling: KubeRay supports dynamic scaling of Ray clusters. Ray's built-in autoscaler can request additional actor replicas based on workload demands, while Kubernetes tools like Karpenter or Cluster Autoscaler manage the creation of new nodes to meet these demands.Horizontal Scaling: Scale your Ray clusters horizontally by adding more worker nodes as the computational load increases. This allows efficient handling of large-scale distributed training and inference tasks.Custom Resource Definitions (CRDs): KubeRay utilizes Kubernetes CRDs to define and manage Ray clusters and jobs. This provides a standardized way to handle Ray workloads within the Kubernetes ecosystem.Fault Tolerance: KubeRay takes advantage of Kubernetes' self-healing capabilities. If a Ray head node or worker node fails, Kubernetes automatically restarts the failed components, ensuring minimal downtime and continuous operation.Distributed Scheduling: Ray's actor-based model and distributed task scheduling, combined with Kubernetes' orchestration, ensure high availability and efficient task execution even in the event of node failures.Declarative Configuration: KubeRay allows you to define Ray clusters and jobs using declarative YAML configurations. This simplifies the deployment and management process, making it easier to set up and maintain Ray clusters.Integrated Logging and Monitoring: KubeRay integrates with Kubernetes' logging and monitoring tools, such as Prometheus and Grafana. This provides comprehensive insights into the performance and health of Ray clusters, facilitating easier debugging and optimization.Spot Instances: Use Kubernetes' support for spot instances to run Ray clusters cost-effectively. This allows you to take advantage of lower-cost compute resources while maintaining the ability to scale as needed.  AWS Trainium:​  Optimized for Deep Learning: AWS Trainium-based Trn1 instances are specifically designed for deep learning workloads. They offer high throughput and low latency, making them ideal for training large-scale models like Llama-2. Trainium chips provide significant performance improvements over traditional processors, accelerating training times.Neuron SDK: The AWS Neuron SDK is tailored to optimize your deep learning models for Trainium. It includes features like advanced compiler optimizations and support for mixed precision training, which can further accelerate your training workloads while maintaining accuracy.  ","version":"Next","tagName":"h3"},{"title":"Why This Combination is Powerful​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#why-this-combination-is-powerful","content":" Simplified Scaling: RayTrain and KubeRay simplify the process of scaling Llama-2 training across multiple nodes. With Ray's efficient distributed execution and KubeRay's Kubernetes-native orchestration, you can easily scale your training workloads to leverage the full power of AWS Trainium on Trn1 instances.Optimized Performance: The Neuron SDK enhances the performance of your training jobs by optimizing them specifically for Trainium's architecture. Combined with Ray's ability to efficiently manage distributed tasks and KubeRay's resource orchestration, this setup ensures optimal training performance.Cost-Effective: Ray's autoscaling capabilities and Kubernetes' resource management help you optimize costs by efficiently allocating resources and scaling your cluster based on demand. This ensures you only use the resources you need, reducing unnecessary expenditure.  By using this combination of technologies, you can take advantage of the latest advancements in distributed training and hardware to pre-train Llama-2 efficiently and effectively.  ","version":"Next","tagName":"h3"},{"title":"What is Volcano?​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#what-is-volcano","content":" Volcano is an open-source batch scheduling system built on Kubernetes, specifically designed to manage high-performance computing (HPC) and machine learning workloads. It provides advanced scheduling capabilities such as gang scheduling, fair sharing, and preemption, which are essential for efficiently running large-scale, distributed training jobs in a Kubernetes environment.  ","version":"Next","tagName":"h3"},{"title":"How Volcano Works with Gang Scheduling​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#how-volcano-works-with-gang-scheduling","content":" Volcano's gang scheduling ensures that all pods in a job (or &quot;gang&quot;) are scheduled simultaneously. This is critical for distributed training workloads where multiple pods need to start together to function correctly. If even one pod in the gang cannot be scheduled due to resource constraints, none of the pods in the gang will start. This prevents partial execution and ensures that all resources required for the job are available before execution begins.  ","version":"Next","tagName":"h3"},{"title":"1. Deploying the Solution​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#1-deploying-the-solution","content":" Prerequisites 👈  ","version":"Next","tagName":"h2"},{"title":"2. Build the Docker Image (Optional Step)​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#2-build-the-docker-image-optional-step","content":" To simplify the blueprint deployment, we have already built the Docker image and made it available under the public ECR. If you want to customize the Docker image, you can update the Dockerfile and follow the optional step to build the Docker image. Please note that you will also need to modify the RayCluster YAML file, llama2-pretrain-trn1-raycluster.yaml, with the newly created image using your own private ECR.  cd gen-ai/training/raytrain-llama2-pretrain-trn1 ./kuberay-trn1-llama2-pretrain-build-image.sh   After running this script, note the Docker image URL and tag that are produced. You will need this information for the next step.  ","version":"Next","tagName":"h2"},{"title":"3. Launch the Ray Cluster with KubeRay Operator​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#3-launch-the-ray-cluster-with-kuberay-operator","content":" If you skip step 2, you don't need to modify the YAML file. You can simply run the kubectl apply command on the file, and it will use the public ECR image that we published.  If you built a custom Docker image in Step 2, update the gen-ai/training/raytrain-llama2-pretrain-trn1/llama2-pretrain-trn1-raycluster.yaml file with the Docker image URL and tag obtained from the previous step.  Once you have updated the YAML file (if needed), run the following command to launch the KubeRay cluster pods in your EKS cluster:  kubectl apply -f llama2-pretrain-trn1-raycluster.yaml   Verify the Pod Status:  kubectl get pods -l &quot;ray.io/cluster=kuberay-trn1&quot;   ","version":"Next","tagName":"h2"},{"title":"Gang Scheduling of Ray Head and Worker Pods with Volcano​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#gang-scheduling-of-ray-head-and-worker-pods-with-volcano","content":" In the context of deploying a Ray cluster for training Llama2, Volcano is crucial for ensuring that the Ray head and worker pods are scheduled together efficiently. The Ray head pod, typically running on an x86 instance, coordinates the distributed training, while the worker pods, running on AWS Trainium (Trn1) instances, perform the computationally intensive tasks. By leveraging Volcano's gang scheduling, we can ensure that the head and all worker pods are allocated the necessary resources simultaneously, enabling the distributed training job to start without delays.  Here's an example configuration for integrating Volcano with a RayCluster for Llama2 training:  info We are using the default namespace for this deployment because the fsx-claim PVC is created under the default namespace by the Terraform blueprint. If you want to deploy the cluster in a dedicated namespace, ensure that the FSX for Lustre file system is also created in the same namespace since PVCs are namespace-bound.  # Docs for Volcano with KubeRay: https://docs.ray.io/en/master/cluster/kubernetes/k8s-ecosystem/volcano.html --- apiVersion: scheduling.volcano.sh/v1beta1 kind: Queue metadata: name: llama2-training-queue namespace: default spec: weight: 1 capability: cpu: '500' memory: 1500Gi --- apiVersion: ray.io/v1 kind: RayCluster metadata: name: kuberay-trn1 namespace: default labels: ray.io/scheduler-name: volcano volcano.sh/queue-name: llama2-training-queue spec: rayVersion: 2.22.0 headGroupSpec: ... ...   You should see one ray-head pod and two ray-worker pods in the Running state:  warning Please be aware that it may take up to 10 minutes for the image to be pulled and the pod to become ready.  NAME READY STATUS RESTARTS AGE kuberay-trn1-head-67t46 0/1 Pending 0 2m50s kuberay-trn1-worker-workergroup-fz8bs 0/1 Pending 0 2m50s kuberay-trn1-worker-workergroup-gpnxh 0/1 Pending 0 2m50s   Check the logs of the head pod:  Look for messages indicating that the Ray head has started and the cluster is operational.  kubectl logs kuberay-trn1-head-xxxxx   ","version":"Next","tagName":"h3"},{"title":"Accessing the Ray Dashboard (Port Forwarding):​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#accessing-the-ray-dashboard-port-forwarding","content":" The Ray dashboard provides valuable insights into your cluster's status and job progress. To access it:  Forward the Port:  This forwards the Ray dashboard port (8265) from your local machine to the head pod within the cluster.  kubectl port-forward service/kuberay-trn1-head-svc 8265:8265   Open Browser and navigate to http://localhost:8265 in your web browser to view the dashboard.  ","version":"Next","tagName":"h3"},{"title":"4. Generate Pre-training Data on FSx Shared Filesystem​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#4-generate-pre-training-data-on-fsx-shared-filesystem","content":" warning Data generation step can take up to 20 minutes to create all the data in FSx for Lustre.  In this step, we'll leverage KubeRay's Job specification to kickstart the data generation process. We'll submit a job directly to the Ray head pod. This job plays a key role in preparing your model for training.  Check out the RayJob definition spec below to leverage the existing RayCluster using clusterSelector to submit the jobs to RayCluster.  # ---------------------------------------------------------------------------- # RayJob: llama2-generate-pretraining-test-data # # Description: # This RayJob is responsible for generating pre-training test data required for # the Llama2 model training. It sources data from the specified dataset, processes # it, and prepares it for use in subsequent training stages. The job runs a Python # script (`get_dataset.py`) that performs these data preparation steps. # Usage: # Apply this configuration to your Kubernetes cluster using `kubectl apply -f 1-llama2-pretrain-trn1-rayjob-create-test-data.yaml`. # Ensure that the Ray cluster (`kuberay-trn1`) is running and accessible in the specified namespace. # ---------------------------------------------------------------------------- apiVersion: ray.io/v1 kind: RayJob metadata: name: llama2-generate-pretraining-test-data namespace: default spec: submissionMode: K8sJobMode entrypoint: &quot;python3 get_dataset.py&quot; runtimeEnvYAML: | working_dir: /llama2_pretrain env_vars: PYTHONUNBUFFERED: '0' resources: requests: cpu: &quot;6&quot; memory: &quot;30Gi&quot; clusterSelector: ray.io/cluster: kuberay-trn1 rayClusterNamespace: default # Replace with the namespace where your RayCluster is deployed ttlSecondsAfterFinished: 60 # Time to live for the pod after completion (in seconds)   Execute the following command to run the Test Data creation Ray job:  kubectl apply -f 1-llama2-pretrain-trn1-rayjob-create-test-data.yaml   What Happens Behind the Scenes:  Job Launch: You'll use kubectl to submit the KubeRay job specification. The Ray head pod in your kuberay-trn1 cluster receives and executes this job.  Data Generation: The job runs the gen-ai/training/raytrain-llama2-pretrain-trn1/llama2_pretrain/get_dataset.py script, which harnesses the power of the Hugging Face datasets library to fetch and process the raw English Wikipedia dataset (&quot;wikicorpus&quot;).  Tokenization: The script tokenizes the text using a pre-trained tokenizer from Hugging Face transformers. Tokenization breaks down the text into smaller units (words or subwords) for the model to understand.  Data Storage: The tokenized data is neatly organized and saved to a specific directory (/shared/wikicorpus_llama2_7B_tokenized_4k/) within your FSx for Lustre shared filesystem. This ensures all worker nodes in your cluster can readily access this standardized data during pre-training.  ","version":"Next","tagName":"h2"},{"title":"Monitoring the Job:​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#monitoring-the-job","content":" To keep tabs on the job's progress:  Ray Dashboard: Head over to the Ray dashboard, accessible via your Ray head pod's IP address and port 8265. You'll see real-time updates on the job's status.        Alternatively, you can use the following command in your terminal:  kubectl get pods | grep llama2   Output:  llama2-generate-pretraining-test-data-g6ccl 1/1 Running 0 5m5s   The following screenshot taken from Lens K8s IDE to show the logs of the pod.    ","version":"Next","tagName":"h3"},{"title":"5. Run Pre-compilation Job (Optimization Step)​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#5-run-pre-compilation-job-optimization-step","content":" info Pre-compilation job can take upto 6 min  Before starting the actual training, we'll perform a pre-compilation step to optimize the model for the Neuron SDK. This helps the model run more efficiently on the Trn1 instances. This script will use the Neuron SDK to compile and optimize the model's computational graph, making it ready for efficient training on the Trn1 processors.  In this step, you will run a pre-compilation job where the Neuron SDK will identify, compile, and cache the compute graphs associated with Llama2 pretraining.  Check out the RayJob definition spec below to run the pre-compilation job:  # ---------------------------------------------------------------------------- # RayJob: llama2-precompilation-job # # Description: # This RayJob is responsible for the pre-compilation step required for the Llama2 model # training. It runs a Python script (`ray_train_llama2.py`) with the `--neuron_parallel_compile` # option to compile the model in parallel using AWS Neuron devices. This step is crucial for # optimizing the model for efficient training on AWS infrastructure. # Usage: # Apply this configuration to your Kubernetes cluster using `kubectl apply -f 2-llama2-pretrain-trn1-rayjob-precompilation.yaml`. # Ensure that the Ray cluster (`kuberay-trn1`) is running and accessible in the specified namespace. # ---------------------------------------------------------------------------- --- apiVersion: ray.io/v1 kind: RayJob metadata: name: llama2-precompilation-job namespace: default spec: submissionMode: K8sJobMode entrypoint: &quot;NEURON_NUM_DEVICES=32 python3 /llama2_pretrain/ray_train_llama2.py --neuron_parallel_compile&quot; runtimeEnvYAML: | working_dir: /llama2_pretrain env_vars: PYTHONUNBUFFERED: '0' clusterSelector: ray.io/cluster: kuberay-trn1 rayClusterNamespace: default # Replace with the namespace where your RayCluster is deployed ttlSecondsAfterFinished: 60 # Time to live for the pod after completion (in seconds)   Execute the following command to run the pre-compilation job:  kubectl apply -f 2-llama2-pretrain-trn1-rayjob-precompilation.yaml   Verification Steps:  To monitor the job's progress and verify that it is running correctly, use the following commands and tools:  Ray Dashboard: Access the Ray dashboard via your Ray head pod's IP address and port 8265 to see real-time updates on the job's status.      The following screenshot taken from Lens K8s IDE to show the logs of the pod.    ","version":"Next","tagName":"h2"},{"title":"6. Run Distributed Pre-training Job​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#6-run-distributed-pre-training-job","content":" warning This job can run for many hours so feel free to cancel the job using Ctrl+C once you are convinced that the loss is decreasing and the model is learning.  Now, you're ready to begin the actual training of the Llama 2 model! This step involves running the distributed pre-training job using a RayJob. The job will utilize AWS Neuron devices to efficiently train the model with the prepared dataset.  Check out the RayJob definition spec below to run the pretraining job:  # ---------------------------------------------------------------------------- # RayJob: llama2-pretraining-job # # Description: # This RayJob is responsible for the main pretraining step of the Llama2 model. # It runs a Python script (`ray_train_llama2.py`) to perform the pretraining using AWS Neuron devices. # This step is critical for training the language model with the prepared dataset. # Usage: # Apply this configuration to your Kubernetes cluster using `kubectl apply -f 3-llama2-pretrain-trn1-rayjob.yaml`. # Ensure that the Ray cluster (`kuberay-trn1`) is running and accessible in the specified namespace. # ---------------------------------------------------------------------------- --- apiVersion: ray.io/v1 kind: RayJob metadata: name: llama2-pretraining-job namespace: default spec: submissionMode: K8sJobMode entrypoint: &quot;NEURON_NUM_DEVICES=32 python3 ray_train_llama2.py&quot; runtimeEnvYAML: | working_dir: /llama2_pretrain env_vars: PYTHONUNBUFFERED: '0' clusterSelector: ray.io/cluster: kuberay-trn1 rayClusterNamespace: default # Replace with the namespace where your RayCluster is deployed shutdownAfterJobFinishes: true activeDeadlineSeconds: 600 # The job will be terminated if it runs longer than 600 seconds (10 minutes) ttlSecondsAfterFinished: 60 # Time to live for the pod after completion (in seconds)   Execute the following command to run the pretraining job:  kubectl apply -f 3-llama2-pretrain-trn1-rayjob.yaml   Monitor Progress:  You can monitor the progress of the training job using the Ray Dashboard or by observing the logs output to your terminal. Look for information like the training loss, learning rate, and other metrics to assess how well the model is learning.    Ray Dashboard: Access the Ray dashboard via your Ray head pod's IP address and port 8265 to see real-time updates on the job's status.      ","version":"Next","tagName":"h2"},{"title":"Cleaning up​","type":1,"pageTitle":"Llama2 Distributed Pre-training on Trn1 with RayTrain and KubeRay","url":"/data-on-eks/docs/gen-ai/training/Neuron/RayTrain-Llama2#cleaning-up","content":" To remove the resources created using this solution, run the cleanup script:  # Delete the RayCluster Resources: cd gen-ai/training/raytrain-llama2-pretrain-trn1 kubectl delete -f llama2-pretrain-trn1-raycluster.yaml # Clean Up the EKS Cluster and Associated Resources: cd data-on-eks/ai-ml/trainium-inferentia ./cleanup.sh  ","version":"Next","tagName":"h3"},{"title":"Bin packing for Amazon EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/resources/binpacking-custom-scheduler-eks","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Bin packing for Amazon EKS","url":"/data-on-eks/docs/resources/binpacking-custom-scheduler-eks#introduction","content":" In this post, we will show you how to enable a custom scheduler with Amazon EKS when running DoEKS especially for Spark on EKS, including OSS Spark and EMR on EKS. The custom scheduler is a custom Kubernetes scheduler with MostAllocated strategy running in data plane.  ","version":"Next","tagName":"h2"},{"title":"Why bin packing​","type":1,"pageTitle":"Bin packing for Amazon EKS","url":"/data-on-eks/docs/resources/binpacking-custom-scheduler-eks#why-bin-packing","content":" By default, the scheduling-plugin NodeResourcesFit use the LeastAllocated for score strategies. For the long running workloads, that is good because of high availability. But for batch jobs, like Spark workloads, this would lead high cost. By changing the from LeastAllocated to MostAllocated, it avoids spreading pods across all running nodes, leading to higher resource utilization and better cost efficiency.  Batch jobs like Spark are running on demand with limited or predicted time. With MostAllocated strategy, Spark executors are always bin packing into one node util the node can not host any pods. You can see the following picture shows the  MostAllocated in EMR on EKS.    LeastAllocated in EMR on EKS    ","version":"Next","tagName":"h3"},{"title":"Pros​","type":1,"pageTitle":"Bin packing for Amazon EKS","url":"/data-on-eks/docs/resources/binpacking-custom-scheduler-eks#pros","content":" Improve the node utilizationsSave the cost  ","version":"Next","tagName":"h3"},{"title":"Considerations​","type":1,"pageTitle":"Bin packing for Amazon EKS","url":"/data-on-eks/docs/resources/binpacking-custom-scheduler-eks#considerations","content":" Although we have provided upgrade guidance, support matrix and high availability design, but maintaining a custom scheduler in data plane needs effort including:  Upgrade operations. Plan the upgrading along with your batch jobs, make sure the scheduler are running as desired.Monitoring the scheduler. Monitoring and alerting are required for production purpose.Adjust the scheduler pod resource and other customizations regarding your requirements.  ","version":"Next","tagName":"h3"},{"title":"Deploying the Solution​","type":1,"pageTitle":"Bin packing for Amazon EKS","url":"/data-on-eks/docs/resources/binpacking-custom-scheduler-eks#deploying-the-solution","content":" ","version":"Next","tagName":"h2"},{"title":"Clone the repo​","type":1,"pageTitle":"Bin packing for Amazon EKS","url":"/data-on-eks/docs/resources/binpacking-custom-scheduler-eks#clone-the-repo","content":" git clone https://github.com/aws-samples/custom-scheduler-eks cd custom-scheduler-eks   ","version":"Next","tagName":"h3"},{"title":"Manifests​","type":1,"pageTitle":"Bin packing for Amazon EKS","url":"/data-on-eks/docs/resources/binpacking-custom-scheduler-eks#manifests","content":" Amazon EKS 1.24  kubectl apply -f deploy/manifests/custom-scheduler/amazon-eks-1.24-custom-scheduler.yaml   Amazon EKS 1.29  kubectl apply -f deploy/manifests/custom-scheduler/amazon-eks-1.29-custom-scheduler.yaml   Other Amazon EKS versions  replace the related image URL(https://gallery.ecr.aws/eks-distro/kubernetes/kube-scheduler)  Please refer to custom-scheduler for more info.  ","version":"Next","tagName":"h3"},{"title":"Set up pod template to use the custom scheduler for Spark​","type":1,"pageTitle":"Bin packing for Amazon EKS","url":"/data-on-eks/docs/resources/binpacking-custom-scheduler-eks#set-up-pod-template-to-use-the-custom-scheduler-for-spark","content":" We should add custom scheduler name to the pod template as follows  kind: Pod spec: schedulerName: custom-k8s-scheduler volumes: - name: spark-local-dir-1 hostPath: path: /local1 initContainers: - name: volume-permission image: public.ecr.aws/docker/library/busybox # grant volume access to hadoop user command: ['sh', '-c', 'if [ ! -d /data1 ]; then mkdir /data1;fi; chown -R 999:1000 /data1'] volumeMounts: - name: spark-local-dir-1 mountPath: /data1 containers: - name: spark-kubernetes-executor volumeMounts: - name: spark-local-dir-1 mountPath: /data1   ","version":"Next","tagName":"h3"},{"title":"Verification and Monitor via eks-node-viewer​","type":1,"pageTitle":"Bin packing for Amazon EKS","url":"/data-on-eks/docs/resources/binpacking-custom-scheduler-eks#verification-and-monitor-via-eks-node-viewer","content":" Before apply the change in the pod template    After the change: Higher CPU usage at pod schedule time  ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Bin packing for Amazon EKS","url":"/data-on-eks/docs/resources/binpacking-custom-scheduler-eks#conclusion","content":" By using the custom scheduler, we can fully improve the node utilizations for the Spark workloads which will save the cost by triggering node scale in.  For the users that running Spark on EKS, we recommend you adopt this custom scheduler before Amazon EKS officially support the kube-scheduler customization. ","version":"Next","tagName":"h2"},{"title":"Introduction to Resources","type":0,"sectionRef":"#","url":"/data-on-eks/docs/resources/intro","content":"Introduction to Resources Welcome to the Resources section. This area is dedicated to providing you with a wealth of information, insights, and learning materials to enhance your understanding and skills in Data and AI workloads running on EKS. This area is a hub of valuable information, offering a range of materials from insightful mini blogs and AWS workshop links to engaging video content and reInvent talks.","keywords":"","version":"Next"},{"title":"Mounpoint S3: Enhancing Amazon S3 File Access for Data & AI Workloads on Amazon EKS","type":0,"sectionRef":"#","url":"/data-on-eks/docs/resources/mountpoint-s3","content":"","keywords":"","version":"Next"},{"title":"What is Mountpoint-S3?​","type":1,"pageTitle":"Mounpoint S3: Enhancing Amazon S3 File Access for Data & AI Workloads on Amazon EKS","url":"/data-on-eks/docs/resources/mountpoint-s3#what-is-mountpoint-s3","content":" Mountpoint-S3 is an open-source file client developed by AWS that translates file operations into S3 API calls, enabling your applications to interact with Amazon S3 buckets as if they were local disks. Mountpoint for Amazon S3 is optimized for applications that need high read throughput to large objects, potentially from many clients at once, and to write new objects sequentially from a single client at a time. It offers significant performance gains compared to traditional S3 access methods, making it ideal for data-intensive workloads and AI/ML training.  A key feature of Mountpoint-S3 is its compatibility with both Amazon S3 Standrad and Amazon S3 Express One Zone. S3 Express One Zone is a high-performance storage class designed for single-Availability Zone deployment. It offers consistent single-digit millisecond data access, making it ideal for frequently accessed data and latency-sensitive applications. S3 Express One Zone is known for delivering data access speeds up to 10 times faster and at up to 50% lower request costs compared to S3 Standard. This storage class enables users to co-locate storage and compute resources in the same Availability Zone, optimizing performance and potentially reducing compute costs.  The integration with S3 Express One Zone enhances Mountpoint-S3's capabilities, particularly for machine learning and analytics workloads, as it can be used with services like Amazon EKS, Amazon SageMaker Model Training, Amazon Athena, Amazon EMR, and AWS Glue Data Catalog. The automatic scaling of storage based on consumption in S3 Express One Zone simplifies management for low-latency workloads, making Mountpoint-S3 a highly effective tool for a wide range of data-intensive tasks and AI/ML training environments.  warning Mountpoint-S3 does not support file renaming operations, which may limit its applicability in scenarios where such functionality is essential.  ","version":"Next","tagName":"h2"},{"title":"Deploying Mountpoint-S3 on Amazon EKS:​","type":1,"pageTitle":"Mounpoint S3: Enhancing Amazon S3 File Access for Data & AI Workloads on Amazon EKS","url":"/data-on-eks/docs/resources/mountpoint-s3#deploying-mountpoint-s3-on-amazon-eks","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1: Set Up IAM Role for S3 CSI Driver​","type":1,"pageTitle":"Mounpoint S3: Enhancing Amazon S3 File Access for Data & AI Workloads on Amazon EKS","url":"/data-on-eks/docs/resources/mountpoint-s3#step-1-set-up-iam-role-for-s3-csi-driver","content":" Create an IAM role using Terraform with the necessary permissions for the S3 CSI driver. This step is critical for ensuring secure and efficient communication between EKS and S3.   #--------------------------------------------------------------- # IRSA for Mountpoint for Amazon S3 CSI Driver #--------------------------------------------------------------- module &quot;s3_csi_driver_irsa&quot; { source = &quot;terraform-aws-modules/iam/aws//modules/iam-role-for-service-accounts-eks&quot; version = &quot;~&gt; 5.34&quot; role_name_prefix = format(&quot;%s-%s-&quot;, local.name, &quot;s3-csi-driver&quot;) role_policy_arns = { # WARNING: Demo purpose only. Bring your own IAM policy with least privileges s3_csi_driver = &quot;arn:aws:iam::aws:policy/AmazonS3FullAccess&quot; } oidc_providers = { main = { provider_arn = module.eks.oidc_provider_arn namespace_service_accounts = [&quot;kube-system:s3-csi-driver-sa&quot;] } } tags = local.tags }   ","version":"Next","tagName":"h3"},{"title":"Step 2: Configure EKS Blueprints Addons​","type":1,"pageTitle":"Mounpoint S3: Enhancing Amazon S3 File Access for Data & AI Workloads on Amazon EKS","url":"/data-on-eks/docs/resources/mountpoint-s3#step-2-configure-eks-blueprints-addons","content":" Configure EKS Blueprints Addons Terraform module to utilize this role for the Amazon EKS Add-on of S3 CSI driver.  #--------------------------------------------------------------- # EKS Blueprints Addons #--------------------------------------------------------------- module &quot;eks_blueprints_addons&quot; { source = &quot;aws-ia/eks-blueprints-addons/aws&quot; version = &quot;~&gt; 1.2&quot; cluster_name = module.eks.cluster_name cluster_endpoint = module.eks.cluster_endpoint cluster_version = module.eks.cluster_version oidc_provider_arn = module.eks.oidc_provider_arn #--------------------------------------- # Amazon EKS Managed Add-ons #--------------------------------------- eks_addons = { aws-mountpoint-s3-csi-driver = { service_account_role_arn = module.s3_csi_driver_irsa.iam_role_arn } } }   ","version":"Next","tagName":"h3"},{"title":"Step 3: Define a PersistentVolume​","type":1,"pageTitle":"Mounpoint S3: Enhancing Amazon S3 File Access for Data & AI Workloads on Amazon EKS","url":"/data-on-eks/docs/resources/mountpoint-s3#step-3-define-a-persistentvolume","content":" Specify the S3 bucket, region details and access modes in a PersistentVolume (PV) configuration. This step is crucial for defining how EKS interacts with the S3 bucket.  --- apiVersion: v1 kind: PersistentVolume metadata: name: s3-pv spec: capacity: storage: 1200Gi # ignored, required accessModes: - ReadWriteMany # supported options: ReadWriteMany / ReadOnlyMany mountOptions: - uid=1000 - gid=2000 - allow-other - allow-delete - region &lt;ENTER_REGION&gt; csi: driver: s3.csi.aws.com # required volumeHandle: s3-csi-driver-volume volumeAttributes: bucketName: &lt;ENTER_S3_BUCKET_NAME&gt;   ","version":"Next","tagName":"h3"},{"title":"Step 4: Create a PersistentVolumeClaim​","type":1,"pageTitle":"Mounpoint S3: Enhancing Amazon S3 File Access for Data & AI Workloads on Amazon EKS","url":"/data-on-eks/docs/resources/mountpoint-s3#step-4-create-a-persistentvolumeclaim","content":" Establish a PersistentVolumeClaim (PVC) to utilize the defined PV, specifying access modes and static provisioning requirements.  --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: s3-claim namespace: spark-team-a spec: accessModes: - ReadWriteMany # supported options: ReadWriteMany / ReadOnlyMany storageClassName: &quot;&quot; # required for static provisioning resources: requests: storage: 1200Gi # ignored, required volumeName: s3-pv   ","version":"Next","tagName":"h3"},{"title":"Step 5: Using PVC with Pod Definition​","type":1,"pageTitle":"Mounpoint S3: Enhancing Amazon S3 File Access for Data & AI Workloads on Amazon EKS","url":"/data-on-eks/docs/resources/mountpoint-s3#step-5-using-pvc-with-pod-definition","content":" After setting up the PersistentVolumeClaim (PVC), the next step is to utilize it within a Pod definition. This allows your applications running in Kubernetes to access the data stored in the S3 bucket. Below are examples demonstrating how to reference the PVC in a Pod definition for different scenarios.  Example 1: Basic Pod Using PVC for Storage​  This example shows a basic Pod definition that mounts the s3-claim PVC to a directory within the container.  In this example, the PVC s3-claim is mounted to the /data directory of the nginx container. This setup allows the application running within the container to read and write data to the S3 bucket as if it were a local directory.   apiVersion: v1 kind: Pod metadata: name: example-pod namespace: spark-team-a spec: containers: - name: app-container image: nginx # Example image volumeMounts: - name: s3-storage mountPath: &quot;/data&quot; # The path where the S3 bucket will be mounted volumes: - name: s3-storage persistentVolumeClaim: claimName: s3-claim   Example 2: AI/ML Training Job Using PVC​  In AI/ML training scenarios, data accessibility and throughput are critical. This example demonstrates a Pod configuration for a machine learning training job that accesses datasets stored in S3.   apiVersion: v1 kind: Pod metadata: name: ml-training-pod namespace: spark-team-a spec: containers: - name: training-container image: ml-training-image # Replace with your ML training image volumeMounts: - name: dataset-storage mountPath: &quot;/datasets&quot; # Mount path for training data volumes: - name: dataset-storage persistentVolumeClaim: claimName: s3-claim   warning Mountpoint S3, when used with Amazon S3 or S3 express, may not be suitable as a shuffle storage for Spark workloads. This limitation arises due to the nature of shuffle operations in Spark, which often involve multiple clients reading and writing to the same location simultaneously. Additionally, Mountpoint S3 does not support file renaming, a critical feature required for efficient shuffle operations in Spark. This lack of renaming capability can lead to operational challenges and potential performance bottlenecks in data processing tasks.  ","version":"Next","tagName":"h3"},{"title":"Next Steps:​","type":1,"pageTitle":"Mounpoint S3: Enhancing Amazon S3 File Access for Data & AI Workloads on Amazon EKS","url":"/data-on-eks/docs/resources/mountpoint-s3#next-steps","content":" Explore the provided Terraform code snippet for detailed deployment instructions.Refer to the official Mountpoint-S3 documentation for further configuration options and limitations.Utilize Mountpoint-S3 to unlock high-performance, scalable S3 access within your EKS applications.  By understanding Mountpoint-S3's capabilities and limitations, you can make informed decisions to optimize your data-driven workloads on Amazon EKS. ","version":"Next","tagName":"h2"},{"title":"Mountpoint-S3 for Spark Workloads","type":0,"sectionRef":"#","url":"/data-on-eks/docs/resources/mountpoint-s3-for-spark","content":"","keywords":"","version":"Next"},{"title":"What is Mountpoint-S3?​","type":1,"pageTitle":"Mountpoint-S3 for Spark Workloads","url":"/data-on-eks/docs/resources/mountpoint-s3-for-spark#what-is-mountpoint-s3","content":" Mountpoint-S3 is an open-source file client developed by AWS that translates file operations into S3 API calls, enabling your applications to interact with Amazon S3 buckets as if they were local disks. Mountpoint for Amazon S3 is optimized for applications that need high read throughput to large objects, potentially from many clients at once, and to write new objects sequentially from a single client at a time. It offers significant performance gains compared to traditional S3 access methods, making it ideal for data-intensive workloads or AI/ML training.  Mountpoint for Amazon S3 is optimized for high-throughput performance, largely due to its foundation on the AWS Common Runtime (CRT) library. The CRT library is a collection of libraries and modules designed to deliver high performance and low resource usage, specifically tailored for AWS services. Key features of the CRT library that enable high-throughput performance include:  Efficient I/O Management: The CRT library is optimized for non-blocking I/O operations, reducing latency and maximizing the utilization of network bandwidth.Lightweight and Modular Design: The library is designed to be lightweight, with minimal overhead, allowing it to perform efficiently even under high load. Its modular architecture ensures that only the necessary components are loaded, further enhancing performance.Advanced Memory Management: CRT employs advanced memory management techniques to minimize memory usage and reduce garbage collection overhead, leading to faster data processing and reduced latency.Optimized Network Protocols: The CRT library includes optimized implementations of network protocols, such as HTTP/2, that are specifically tuned for AWS environments. These optimizations ensure rapid data transfer between S3 and your compute instances, which is critical for large-scale Spark workloads.  ","version":"Next","tagName":"h2"},{"title":"Using Mountpoint-S3 with EKS​","type":1,"pageTitle":"Mountpoint-S3 for Spark Workloads","url":"/data-on-eks/docs/resources/mountpoint-s3-for-spark#using-mountpoint-s3-with-eks","content":" For Spark workloads, we'll specifically focus on loading external JARs located in S3 for Spark Applications. We’ll examine two primary deployment strategies for Mountpoint-S3;  Leveraging the EKS Managed Addon CSI driver with Persistent Volumes (PV) and Persistent Volume Claims (PVC)Deploying Mountpoint-S3 at the Node level using either USERDATA scripts or DaemonSets.  The first approach is considered mounting at a Pod level because the PV created is available to individual pods. The second Approach is considered mounting at a Node level because the S3 is mounted on the host Node itself. Each approach is discussed in detail below, highlighting their respective strengths and considerations to help you determine the most effective solution for your specific use case.  Metric\tPod Level\tNode LevelAccess Control\tProvides fine-grained access control through service roles and RBAC, limiting PVC access to specific Pods. This is not possible with host-level mounts, where the mounted S3 bucket is accessible to all Pods on the Node.\tSimplifies configuration but lacks the granular control offered by Pod-level mounting. Scalabbility and Overhead\tInvolves managing individual PVCs, which can increase overhead in large-scale environments.\tReduces configuration complexity but provides less isolation between Pods. Performance Considerations\tOffers predictable and isolated performance for individual Pods.\tMay lead to contention if multiple Pods on the same Node access the same S3 bucket. Flexibility and Use Cases\tBest suited for use cases where different Pods require access to different datasets or where strict security and compliance controls are necessary.\tIdeal for environments where all Pods on a Node can share the same dataset, such as when running batch processing jobs or Spark jobs that require common dependencies.  ","version":"Next","tagName":"h2"},{"title":"Resource Allocation​","type":1,"pageTitle":"Mountpoint-S3 for Spark Workloads","url":"/data-on-eks/docs/resources/mountpoint-s3-for-spark#resource-allocation","content":" Before being able to implement the Mountpoint-s3 solution provided, AWS cloud resources need to be allocated. To do deploy the Terraform stack following the instructions below. After allocating the resources and setting up the EKS environment, you can explore the two different approaches of utilizing Mountpoint-S3 in detail.  Deploy Solution Resources 👈  ","version":"Next","tagName":"h2"},{"title":"Approach 1: Deploy Mountpoint-S3 on EKS at Pod level​","type":1,"pageTitle":"Mountpoint-S3 for Spark Workloads","url":"/data-on-eks/docs/resources/mountpoint-s3-for-spark#approach-1-deploy-mountpoint-s3-on-eks-at-pod-level","content":" Deploying Mountpoint-S3 at the Pod level involves using the EKS Managed Addon CSI driver with Persistent Volumes (PV) and Persistent Volume Claims (PVC) to mount an S3 bucket directly within a Pod. This method allows for fine-grained control over which Pods can access specific S3 buckets, ensuring that only the necessary workloads have access to the required data.  Once Mountpoint-S3 is enabled and the PV is created, the S3 bucket becomes a cluster-level resource, allowing any Pod to request access by creating a PVC that references the PV. To achieve fine-grained control over which Pods can access specific PVCs, you can use service roles within namespaces. By assigning specific service accounts to Pods and defining Role-Based Access Control (RBAC) policies, you can limit which Pods can bind to certain PVCs. This ensures that only authorized Pods can mount the S3 bucket, providing tighter security and access control compared to a host-level mount, where the hostPath is accessible to all Pods on the Node.  Using this approach can also be simplified using the EKS Managed Addon CSI driver. However, this does not support taints/tolerations and therefore cannot be used with GPUs. Additionally, because the Pods are not sharing the mount and therefore not sharing the cache it would lead to more S3 API calls.  For more information on how to deploy this approach refer to the deployment instructions  ","version":"Next","tagName":"h2"},{"title":"Approach 2: Deploy Mountpoint-S3 on EKS at Node level​","type":1,"pageTitle":"Mountpoint-S3 for Spark Workloads","url":"/data-on-eks/docs/resources/mountpoint-s3-for-spark#approach-2--deploy-mountpoint-s3-on-eks-at-node-level","content":" Mounting a S3 Bucket at a Node level can streamline the management of dependency JAR files for SparkApplications by reducing build times and speeding up deployment. It can be implemented using either USERDATA or DaemonSet. USERDATA is the preferred method for implementing Mountpoint-S3. However, if you have static Nodes in your EKS cluster that you cannot bring down, the DaemonSet approach provides an alternative. Make sure to understand all of the security mechanisms that need to be enabled in order to utilize the DaemonSet approach before implementing it.  ","version":"Next","tagName":"h2"},{"title":"Approach 2.1: Using USERDATA​","type":1,"pageTitle":"Mountpoint-S3 for Spark Workloads","url":"/data-on-eks/docs/resources/mountpoint-s3-for-spark#approach-21-using-userdata","content":" This approach is recommended for new clusters or where auto-scaling is customized to run workloads as the user-data script is run when a Node is initialized. Using the below script, the Node can be updated to have the S3 bucket mounted upon initialization in the EKS cluster that hosts the Pods. The below script outlines downloading, installing, and running the Mountpoint S3 package. There are a couple of arguments that are set for this application and defined below that can be altered depending on the use case. More information about these arguments and others can be found here  metadata-ttl: this is set to indefinite because the jar files are meant to be used as read only and will not change.allow-others: this is set so that the Node can have access to the mounted volume when using SSMcache: this is set to enable caching and limit the S3 API calls that need to be made by storing the files in cache for consecutive re-reads.  note These same arguments can also be used in the DaemonSet approach. In addition to these arguments that are set by this example, there are also a number of other options for additional logging and debugging  When autoscaling with Karpenter, this method allows for more flexibility and performance. For example when configuring Karpenter in the terraform code, the user data for different types of Nodes can be unique with different buckets depending on the workload so when Pods are scheduled and need a certain set of dependencies, Taints and Tolerations will allow Karpenter to allocate the specific instance type with the unique user data to ensure the correct bucket with the dependent files is mounted on the Node so that Pods can access is. Additionally, the user script will depend on the OS that the newly allocated Node is configured with.  USERDATA script:​  #!/bin/bash yum update -y yum install -y wget wget https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.rpm yum install -y mount-s3.rpm mkdir -p /mnt/s3 /opt/aws/mountpoint-s3/bin/mount-s3 --metadata-ttl indefinite --allow-other --cache /tmp &lt;S3_BUCKET_NAME&gt; /mnt/s3   ","version":"Next","tagName":"h3"},{"title":"Approach 2.2: Using DaemonSet​","type":1,"pageTitle":"Mountpoint-S3 for Spark Workloads","url":"/data-on-eks/docs/resources/mountpoint-s3-for-spark#approach-22-using-daemonset","content":" This approach is recommended for existing clusters. This approach is made up of 2 resources, a ConfigMap with a script that maintains the S3 Mount Point package onto the Node and a DaemonSet that runs a Pod on every Node in the cluster which will execute the script on the Node.  The ConfigMap script will run a loop to check the mountPoint every 60 seconds and remount it if there are any issues. There are multiple environment variables that can be altered for the mount location, cache location, S3 bucket name, log file location, and the URL of the package installation and the location of the of the installed package. These variables can be left as default as only the S3 bucket name is required to run.  The DaemonSet Pods will copy the script onto the Node, alter the permissions to allow execution, and then finally run the script. The Pod installs util-linux in order to have access to nsenter, which allows the Pod to execute the script in the Node space which allows the S3 Bucket to be mounted on to the Node directly by the Pod.  danger The DaemonSet Pod requires the securityContext to be privileged as well as hostPID, hostIPC, and hostNetwork to be set to true. Review below why these are required to be configured for this solution and their security implications.  securityContext: privileged Purpose: privileged mode gives the container full access to all host resources, similar to root access on the host.To install software packages, configure the system, and mount the S3 bucket onto the host, your container will likely need elevated permissions. Without privileged mode, the container might not have sufficient permissions to perform these actions on the host filesystem and network interfaces. hostPID Purpose: nsenter allows you to enter various namespaces, including the PID namespace of the host.When using nsenter to enter the host’s PID namespace, the container needs access to the host’s PID namespace. Thus, enabling hostPID: true is necessary to interact with processes on the host, which is crucial for operations like installing packages or running commands that require host-level process visibility like mountpoint-s3. hostIPC Purpose: hostIPC enables your container to share the host’s inter-process communication namespace, which includes shared memory.If nsenter commands or the script to run involves shared memory or other IPC mechanisms on the host, hostIPC: true will be necessary. While it’s less common than hostPID, it’s often enabled alongside it when nsenter is involved, especially if the script needs to interact with host processes that rely on IPC. hostNetwork Purpose: hostNetwork allows the container to use the host’s network namespace, giving the container access to the host’s IP address and network interfaces.During the installation process, the script will likely need to download packages from the internet (e.g., from repositories hosting the mountpoint-s3 package). By enabling hostNetwork with hostNetwork: true, you ensure that the download processes have direct access to the host’s network interface, avoiding issues with network isolation.  warning This sample code uses the spark-team-a namespace to run the job and host the DaemonSet. This is primarily because the Terraform stack already sets up IRSA for this namespace and allows the service account to access any S3 bucket. When using in production make sure create your own separate namespace, service account, and IAM role that follows the policy of least-privilege permissions and follows IAM role best practice   To view the DaemonSet, Click to toggle content! apiVersion: v1 kind: ConfigMap metadata: name: s3-mount-script namespace: spark-team-a data: monitor_s3_mount.sh: | #!/bin/bash set -e # Exit immediately if a command exits with a non-zero status # ENVIRONMENT VARIABLES LOG_FILE=&quot;/var/log/s3-mount.log&quot; S3_BUCKET_NAME=&quot;&lt;S3_BUCKET_NAME&gt;&quot; # Replace with your S3 Bucket Name before applying to EKS cluster MOUNT_POINT=&quot;/mnt/s3&quot; CACHE_DIR=&quot;/tmp&quot; MOUNT_S3_BIN=&quot;/usr/bin/mount-s3&quot; MOUNT_S3_URL=&quot;https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.rpm&quot; # Function to install mount-s3 install_mount_s3() { echo &quot;$(date): Installing mount-s3&quot; | tee -a $LOG_FILE yum update -y | tee -a $LOG_FILE yum install -y wget util-linux | tee -a $LOG_FILE wget $MOUNT_S3_URL -O /tmp/mount-s3.rpm | tee -a $LOG_FILE yum install -y /tmp/mount-s3.rpm | tee -a $LOG_FILE } # Function to mount S3 bucket mount_s3_bucket() { echo &quot;$(date): Mounting S3 bucket: $S3_BUCKET_NAME to $MOUNT_POINT&quot; | tee -a $LOG_FILE $MOUNT_S3_BIN --metadata-ttl indefinite --allow-other --cache $CACHE_DIR $S3_BUCKET_NAME $MOUNT_POINT | tee -a $LOG_FILE if [ $? -ne 0 ]; then echo &quot;$(date): Failed to mount S3 bucket: $S3_BUCKET_NAME&quot; | tee -a $LOG_FILE exit 1 fi } # Ensure the mount point directory exists ensure_mount_point() { if [ ! -d $MOUNT_POINT ]; then echo &quot;$(date): Creating mount point directory: $MOUNT_POINT&quot; | tee -a $LOG_FILE mkdir -p $MOUNT_POINT fi } # Install mount-s3 install_mount_s3 # Continuous monitoring and remounting loop while true; do echo &quot;$(date): Checking if S3 bucket is mounted&quot; | tee -a $LOG_FILE ensure_mount_point if mount | grep $MOUNT_POINT &gt; /dev/null; then echo &quot;$(date): S3 bucket is already mounted&quot; | tee -a $LOG_FILE if ! ls $MOUNT_POINT &gt; /dev/null 2&gt;&amp;1; then echo &quot;$(date): Transport endpoint is not connected, remounting S3 bucket&quot; | tee -a $LOG_FILE fusermount -u $MOUNT_POINT || echo &quot;$(date): Failed to unmount S3 bucket&quot; | tee -a $LOG_FILE rm -rf $MOUNT_POINT || echo &quot;$(date): Failed to remove mount point directory&quot; | tee -a $LOG_FILE ensure_mount_point mount_s3_bucket fi else echo &quot;$(date): S3 bucket is not mounted, mounting now&quot; | tee -a $LOG_FILE mount_s3_bucket fi sleep 60 # Check every 60 seconds done --- apiVersion: apps/v1 kind: DaemonSet metadata: name: s3-mount-daemonset namespace: spark-team-a spec: selector: matchLabels: name: s3-mount-daemonset template: metadata: labels: name: s3-mount-daemonset spec: hostPID: true hostIPC: true hostNetwork: true volumes: - name: script configMap: name: s3-mount-script - name: host-root hostPath: path: / type: Directory restartPolicy: Always containers: - name: s3-mount image: amazonlinux:2 volumeMounts: - name: script mountPath: /config - name: host-root mountPath: /host mountPropagation: Bidirectional securityContext: privileged: true command: - /bin/bash - -c - | set -e echo &quot;Starting s3-mount&quot; yum install -y util-linux echo &quot;Copying script to /usr/bin&quot; cp /config/monitor_s3_mount.sh /host/usr/bin/monitor_s3_mount.sh chmod +x /host/usr/bin/monitor_s3_mount.sh echo &quot;Verifying the copied script&quot; ls -lha /host/usr/bin/monitor_s3_mount.sh echo &quot;Running the script in Host space&quot; nsenter --target 1 --mount --uts --ipc --net --pid ./usr/bin/monitor_s3_mount.sh echo &quot;Done&quot;   ","version":"Next","tagName":"h3"},{"title":"Executing Spark Job​","type":1,"pageTitle":"Mountpoint-S3 for Spark Workloads","url":"/data-on-eks/docs/resources/mountpoint-s3-for-spark#executing-spark-job","content":" Here are the steps to test the scenario using Approach 2 with DaemonSet:  Deploy Spark Operator ResourcesPrepare the S3 Bucket cd ${DOEKS_HOME}/analytics/terraform/spark-k8s-operator/examples/mountpoint-s3-spark/chmod +x copy-jars-to-s3.sh./copy-jars-to-s3.sh Set-up Kubeconfig aws eks update-kubeconfig --name spark-operator-doeks Apply DaemonSet kubectl apply -f mountpoint-s3-daemonset.yaml Apply Spark Job sample kubectl apply -f mountpoint-s3-spark-job.yaml View Job Running There are a couple different resources of which we can view logs of as this SparkApplication CRD is running. Each of these logs should be in a separate terminal to view all of the logs simultaneously. spark operator kubectl -n spark-operator get podscopy the name of the spark operator pod kubectl -n spark-operator logs -f &lt;POD_NAME&gt; spark-team-a Pods In order to get the logs for the driver and exec Pods for the SparkApplication, we need to first verify that the Pods are running. Using wide output we should be able to see the Node that the Pods are running on and using -w we can see the status updates for each of the Pods.kubectl -n spark-team-a get pods -o wide -w driver Pod Once the driver Pod is in the running state, which will be visible in the previous terminal, we can get the logs for the driver Podkubectl -n spark-team-a logs -f taxi-trip exec Pod Once the exec Pod is in the running state which will be visible in the previous terminal, we can get the logs for the exec Pod. Make sure that the exec-1 is running before getting the logs, otherwise use another exec Pod that is in the running state. kubectl -n spark-team-a logs -f taxi-trip-exec-1  ","version":"Next","tagName":"h2"},{"title":"Verification​","type":1,"pageTitle":"Mountpoint-S3 for Spark Workloads","url":"/data-on-eks/docs/resources/mountpoint-s3-for-spark#verification","content":" Once the job is done running you can see in the exec logs that the files are being copied from the local mountpoint-s3 location on the Node to the spark Pod in order to do the processing.  24/08/13 00:08:46 INFO Utils: Copying /mnt/s3/jars/hadoop-aws-3.3.1.jar to /var/data/spark-5eae56b3-3999-4c2f-8004-afc46d1c82ba/spark-a433e7ce-db5d-4fd5-b344-abf751f43bd3/-14716855631723507720806_cache 24/08/13 00:08:46 INFO Utils: Copying /var/data/spark-5eae56b3-3999-4c2f-8004-afc46d1c82ba/spark-a433e7ce-db5d-4fd5-b344-abf751f43bd3/-14716855631723507720806_cache to /opt/spark/work-dir/./hadoop-aws-3.3.1.jar 24/08/13 00:08:46 INFO Executor: Adding file:/opt/spark/work-dir/./hadoop-aws-3.3.1.jar to class loader 24/08/13 00:08:46 INFO Executor: Fetching file:/mnt/s3/jars/aws-java-sdk-bundle-1.12.647.jar with timestamp 1723507720806 24/08/13 00:08:46 INFO Utils: Copying /mnt/s3/jars/aws-java-sdk-bundle-1.12.647.jar to /var/data/spark-5eae56b3-3999-4c2f-8004-afc46d1c82ba/spark-a433e7ce-db5d-4fd5-b344-abf751f43bd3/14156613201723507720806_cache 24/08/13 00:08:47 INFO Utils: Copying /var/data/spark-5eae56b3-3999-4c2f-8004-afc46d1c82ba/spark-a433e7ce-db5d-4fd5-b344-abf751f43bd3/14156613201723507720806_cache to /opt/spark/work-dir/./aws-java-sdk-bundle-1.12.647.jar   Additionally, when viewing status of the spark-team-a Pods, you would notice that another Node comes online, this Node is is optimized to the run the SparkApplication and as soon as it comes online the DaemonSet Pod will also spin up and start running on the new Node so that any Pods that are run that new Node will also have access to the S3 Bucket. Using Systems Sessions Manager (SSM), you can connect any of the Nodes and verify the that the mountpoint-s3 package has been downloaded and installed by running:  mount-s3 --version  The largest advantage to using the mountpoint-S3 on the Node level for multiple Pods is that the data can be cached to allow other Pods to access the same data without having to make their own API calls. Once the karpenter-spark-compute-optimized optimized Node is allocated you can use Sessions Manager (SSM) to connect to the Node and verify that the files will be cached on the Node when the job is run and the volume is mounted. you can see the cache at:  sudo ls /tmp/mountpoint-cache/  ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Mountpoint-S3 for Spark Workloads","url":"/data-on-eks/docs/resources/mountpoint-s3-for-spark#conclusion","content":" By leveraging the CRT library, Mountpoint for Amazon S3 can deliver the high throughput and low latency needed to efficiently manage and access large volumes of data stored in S3. This allows dependency JAR files to be stored and managed externally from the container image, decoupling them from the Spark jobs. Additionally, storing JARs in S3 enables multiple Pods to consume them, leading to cost savings as S3 provides a cost-effective storage solution compared to larger container images. S3 also offers virtually unlimited storage, making it easy to scale and manage dependencies.  Mountpoint-S3 offers a versatile and powerful way to integrate S3 storage with EKS for data and AI/ML workloads. Whether you choose to deploy it at the Pod level using PVs and PVCs, or at the Node level using USERDATA or DaemonSets, each approach has its own set of advantages and trade-offs. By understanding these options, you can make informed decisions to optimize your data and AI/ML workflows on EKS. ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}