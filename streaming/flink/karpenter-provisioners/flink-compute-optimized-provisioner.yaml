---
apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: flink-compute-optimized
  namespace: karpenter # Same namespace as Karpenter add-on installed
spec:
  template:
    metadata:
      labels:
        type: karpenter
        provisioner: flink-compute-optimized
        NodeGroupType: FlinkComputeOptimized
    spec:
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: flink-compute-optimized
      expireAfter: 720h # 30 * 24h = 720h
      requirements:
        - key: "topology.kubernetes.io/zone"
          operator: In
          values: [${azs}a] #Update the correct region and zones
        - key: "karpenter.sh/capacity-type"
          operator: In
          values: ["spot", "on-demand"]
        - key: "kubernetes.io/arch"
          operator: In
          values: ["amd64"]
        - key: "karpenter.k8s.aws/instance-category"
          operator: In
          values: ["c"]
        - key: "karpenter.k8s.aws/instance-family"
          operator: In
          values: ["c5d"]
        - key: "karpenter.k8s.aws/instance-cpu"
          operator: In
          values: ["4", "8", "16", "36"]
        - key: "karpenter.k8s.aws/instance-hypervisor"
          operator: In
          values: ["nitro"]
        - key: "karpenter.k8s.aws/instance-generation"
          operator: Gt
          values: ["2"]
  limits:
    cpu: 1000
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 30s
  weight: 10


# NOTE: Multiple NodePools may point to the same EC2NodeClass.
---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: flink-compute-optimized
  namespace: karpenter
spec:
  amiFamily: AL2
  amiSelectorTerms:
    - alias: "al2@latest"
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 50Gi
        volumeType: gp3
        encrypted: true
        deleteOnTermination: true
  role: "${eks_cluster_id}-karpenter-node"
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: "${eks_cluster_id}" # replace with your cluster name
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: "${eks_cluster_id}" # replace with your cluster name
  userData: |
    MIME-Version: 1.0
    Content-Type: multipart/mixed; boundary="BOUNDARY"

    --BOUNDARY
    Content-Type: text/x-shellscript; charset="us-ascii"

    cat <<-EOF > /etc/profile.d/bootstrap.sh
    #!/bin/sh


    # Configure the NVMe volumes in RAID0 configuration in the bootstrap.sh call.
    # https://github.com/awslabs/amazon-eks-ami/blob/master/files/bootstrap.sh#L35
    # This will create a RAID volume and mount it at /mnt/k8s-disks/0
    #   then mount that volume to /var/lib/kubelet, /var/lib/containerd, and /var/log/pods
    #   this allows the container daemons and pods to write to the RAID0 by default without needing PersistentVolumes
    export LOCAL_DISKS='raid0'
    EOF

    # Source extra environment variables in bootstrap script
    sed -i '/^set -o errexit/a\\nsource /etc/profile.d/bootstrap.sh' /etc/eks/bootstrap.sh

    --BOUNDARY--
  tags:
    InstanceType: "flink-compute-optimized"    # optional, add tags for your own use
