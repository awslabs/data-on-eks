# ------------------------------------------------------------------------------
# Pinot Controller:
# ------------------------------------------------------------------------------
controller:
  name: controller
  replicaCount: 1
  podManagementPolicy: Parallel
  podSecurityContext:
    {}
    # fsGroup: 2000
  securityContext: {}
  startCommand: "StartController"

  probes:
    endpoint: "/health"
    livenessEnabled: false
    readinessEnabled: false

  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 1G
    mountPath: /var/pinot/controller/data
    storageClass: ""
    extraVolumes: []
    extraVolumeMounts: []

  data:
    dir: /var/pinot/controller/data

  vip:
    enabled: false
    host: pinot-controller
    port: 9000

  #jvmOpts: "-XX:ActiveProcessorCount=2 -Xms256M -Xmx1G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc*:file=/opt/pinot/gc-pinot-controller.log"
  jvmOpts: "-javaagent:/opt/pinot/etc/jmx_prometheus_javaagent/jmx_prometheus_javaagent.jar=8008:/opt/pinot/etc/jmx_prometheus_javaagent/configs/pinot.yml -Xms256M -Xmx1G"

  log4j2ConfFile: /opt/pinot/conf/log4j2.xml
  pluginsDir: /opt/pinot/plugins

  service:
    annotations:
      "prometheus.io/scrape": "true"
      "prometheus.io/port": "8008"
    clusterIP: "None"
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    type: ClusterIP
    port: 9000
    nodePort: ""
    protocol: TCP
    name: controller

  external:
    enabled: true
    type: LoadBalancer
    port: 9000
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-internal: "true"

  ingress:
    v1beta1:
      enabled: false
      annotations: {}
      tls: {}
      path: /
      hosts: []
    v1:
      enabled: false
      ingressClassName: ""
      annotations: {}
      tls: []
      path: /
      hosts: []

  resources:
    requests:
      cpu: 1
      memory: 1G
    limits:
      cpu: 1
      memory: 1G

  nodeSelector:
    NodeGroupType: controller

  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "pinot"
      effect: "NoSchedule"

  affinity: {}

  podAnnotations:
    "prometheus.io/scrape": "true"
    "prometheus.io/port": "8008"

  updateStrategy:
    type: RollingUpdate

  # Use envFrom to define all of the ConfigMap or Secret data as container environment variables.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#configure-all-key-value-pairs-in-a-secret-as-container-environment-variables
  envFrom: []
  #  - configMapRef:
  #      name: special-config
  #  - secretRef:
  #      name: test-secret

  # Use extraEnv to add individual key value pairs as container environment variables.
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  extraEnv:
    - name: LOG4J_CONSOLE_LEVEL
      value: info
  #  - name: PINOT_CUSTOM_ENV
  #    value: custom-value

  # Extra configs will be appended to pinot-controller.conf file
  extra:
    configs: |-
      pinot.set.instance.id.to.hostname=true
      controller.task.scheduler.enabled=true

# ------------------------------------------------------------------------------
# Pinot Broker:
# ------------------------------------------------------------------------------
broker:
  name: broker
  replicaCount: 1
  podManagementPolicy: Parallel
  podSecurityContext:
    {}
    # fsGroup: 2000
  securityContext: {}
  startCommand: "StartBroker"

  #jvmOpts: "-XX:ActiveProcessorCount=2 -Xms256M -Xmx1G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc*:file=/opt/pinot/gc-pinot-broker.log"
  jvmOpts: "-javaagent:/opt/pinot/etc/jmx_prometheus_javaagent/jmx_prometheus_javaagent.jar=8008:/opt/pinot/etc/jmx_prometheus_javaagent/configs/pinot.yml -Xms256M -Xmx1G"

  log4j2ConfFile: /opt/pinot/conf/log4j2.xml
  pluginsDir: /opt/pinot/plugins

  routingTable:
    builderClass: random

  probes:
    endpoint: "/health"
    livenessEnabled: true
    readinessEnabled: true

  persistence:
    extraVolumes: []
    extraVolumeMounts: []

  service:
    annotations:
      "prometheus.io/scrape": "true"
      "prometheus.io/port": "8008"
    clusterIP: "None"
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    type: ClusterIP
    protocol: TCP
    port: 8099
    name: broker
    nodePort: ""

  external:
    enabled: true
    type: LoadBalancer
    port: 8099
    # For example, in private GKE cluster, you might add cloud.google.com/load-balancer-type: Internal
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-internal: "true"

  ingress:
    v1beta1:
      enabled: false
      annotations: {}
      tls: {}
      path: /
      hosts: []
    v1:
      enabled: false
      ingressClassName: ""
      annotations: {}
      tls: []
      path: /
      hosts: []

  resources:
    requests:
      cpu: 1
      memory: 1G
    limits:
      cpu: 1
      memory: 1G

  nodeSelector:
    NodeGroupType: broker

  affinity: {}

  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "pinot"
      effect: "NoSchedule"

  podAnnotations:
    "prometheus.io/scrape": "true"
    "prometheus.io/port": "8008"

  updateStrategy:
    type: RollingUpdate

  # Use envFrom to define all of the ConfigMap or Secret data as container environment variables.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#configure-all-key-value-pairs-in-a-secret-as-container-environment-variables
  envFrom: []
  #  - configMapRef:
  #      name: special-config
  #  - secretRef:
  #      name: test-secret

  # Use extraEnv to add individual key value pairs as container environment variables.
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  extraEnv:
    - name: LOG4J_CONSOLE_LEVEL
      value: info
  #  - name: PINOT_CUSTOM_ENV
  #    value: custom-value

  # Extra configs will be appended to pinot-broker.conf file
  extra:
    configs: |-
      pinot.set.instance.id.to.hostname=true

# ------------------------------------------------------------------------------
# Pinot Server:
# ------------------------------------------------------------------------------
server:
  name: server
  replicaCount: 1
  podManagementPolicy: Parallel
  podSecurityContext:
    {}
    # fsGroup: 2000
  securityContext: {}
  startCommand: "StartServer"

  probes:
    endpoint: "/health"
    livenessEnabled: false
    readinessEnabled: false

  dataDir: /var/pinot/server/data/index
  segmentTarDir: /var/pinot/server/data/segment

  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 100G
    mountPath: /var/pinot/server/data
    storageClass: ""
    #storageClass: "ssd"
    extraVolumes: []
    extraVolumeMounts: []

  #jvmOpts: "-Xms512M -Xmx1G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc*:file=/opt/pinot/gc-pinot-server.log"
  jvmOpts: "-javaagent:/opt/pinot/etc/jmx_prometheus_javaagent/jmx_prometheus_javaagent.jar=8008:/opt/pinot/etc/jmx_prometheus_javaagent/configs/pinot.yml -Xms1G -Xmx4G"

  log4j2ConfFile: /opt/pinot/conf/log4j2.xml
  pluginsDir: /opt/pinot/plugins

  service:
    annotations:
      "prometheus.io/scrape": "true"
      "prometheus.io/port": "8008"
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    type: ClusterIP
    nettyPort: 8098
    nettyPortName: netty
    adminPort: 8097
    adminExposePort: 80
    adminPortName: admin
    nodePort: ""
    protocol: TCP

  resources:
    requests:
      cpu: 4
      memory: "10G"

  nodeSelector:
    NodeGroupType: server

  affinity: {}

  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "pinot"
      effect: "NoSchedule"

  podAnnotations:
    "prometheus.io/scrape": "true"
    "prometheus.io/port": "8008"

  updateStrategy:
    type: RollingUpdate

  # Use envFrom to define all of the ConfigMap or Secret data as container environment variables.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#configure-all-key-value-pairs-in-a-secret-as-container-environment-variables
  envFrom: []
  #  - configMapRef:
  #      name: special-config
  #  - secretRef:
  #      name: test-secret

  # Use extraEnv to add individual key value pairs as container environment variables.
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  extraEnv:
    - name: LOG4J_CONSOLE_LEVEL
      value: info
  #  - name: PINOT_CUSTOM_ENV
  #    value: custom-value

  # Extra configs will be appended to pinot-server.conf file
  extra:
    configs: |-
      pinot.set.instance.id.to.hostname=true
      pinot.server.instance.realtime.alloc.offheap=true

# ------------------------------------------------------------------------------
# Pinot Minion:
# ------------------------------------------------------------------------------
minion:
  enabled: false
  name: minion
  replicaCount: 0
  podManagementPolicy: Parallel
  podSecurityContext:
    {}
    # fsGroup: 2000
  securityContext: {}
  startCommand: "StartMinion"

  probes:
    endpoint: "/health"
    livenessEnabled: true
    readinessEnabled: true

  dataDir: /var/pinot/minion/data
  jvmOpts: "-XX:ActiveProcessorCount=2 -Xms256M -Xmx1G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc*:file=/opt/pinot/gc-pinot-minion.log"

  log4j2ConfFile: /opt/pinot/conf/log4j2.xml
  pluginsDir: /opt/pinot/plugins

  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 4G
    mountPath: /var/pinot/minion/data
    storageClass: ""
    #storageClass: "ssd"
    extraVolumes: []
    extraVolumeMounts: []

  service:
    annotations: {}
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    type: ClusterIP
    port: 9514
    nodePort: ""
    protocol: TCP
    name: minion

  resources:
    requests:
      memory: "1.25Gi"

  nodeSelector:
    NodeGroupType: minion

  affinity: {}

  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "pinot"
      effect: "NoSchedule"

  podAnnotations: {}

  updateStrategy:
    type: RollingUpdate

  # Use envFrom to define all of the ConfigMap or Secret data as container environment variables.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#configure-all-key-value-pairs-in-a-secret-as-container-environment-variables
  envFrom: []
  #  - configMapRef:
  #      name: special-config
  #  - secretRef:
  #      name: test-secret

  # Use extraEnv to add individual key value pairs as container environment variables.
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  extraEnv:
    - name: LOG4J_CONSOLE_LEVEL
      value: info
  #  - name: PINOT_CUSTOM_ENV
  #    value: custom-value

  # Extra configs will be appended to pinot-minion.conf file
  extra:
    configs: |-
      pinot.set.instance.id.to.hostname=true

# ------------------------------------------------------------------------------
# Pinot Minion Stateless:
# ------------------------------------------------------------------------------
minionStateless:
  enabled: true
  name: minion-stateless
  replicaCount: 1
  podSecurityContext:
    {}
    # fsGroup: 2000
  securityContext: {}
  startCommand: "StartMinion"

  probes:
    endpoint: "/health"
    livenessEnabled: true
    readinessEnabled: true

  dataDir: /var/pinot/minion/data
  jvmOpts: "-XX:ActiveProcessorCount=2 -Xms256M -Xmx1G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc*:file=/opt/pinot/gc-pinot-minion.log"

  log4j2ConfFile: /opt/pinot/conf/log4j2.xml
  pluginsDir: /opt/pinot/plugins

  persistence:
    enabled: false
    pvcName: minion-data-vol
    accessMode: ReadWriteOnce
    size: 4G
    mountPath: /var/pinot/minion/data
    storageClass: ""
    #storageClass: "ssd"
    extraVolumes: []
    extraVolumeMounts: []

  service:
    port: 9514
    protocol: TCP
    name: minion

  resources:
    requests:
      memory: "1.25Gi"

  nodeSelector:
    NodeGroupType: minion

  affinity: {}

  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "pinot"
      effect: "NoSchedule"

  podAnnotations: {}

  # Use envFrom to define all of the ConfigMap or Secret data as container environment variables.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#configure-all-key-value-pairs-in-a-secret-as-container-environment-variables
  envFrom: []
  #  - configMapRef:
  #      name: special-config
  #  - secretRef:
  #      name: test-secret

  # Use extraEnv to add individual key value pairs as container environment variables.
  # ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  extraEnv:
    - name: LOG4J_CONSOLE_LEVEL
      value: info
  #  - name: PINOT_CUSTOM_ENV
  #    value: custom-value

  # Extra configs will be appended to pinot-minion.conf file
  extra:
    configs: |-
      pinot.set.instance.id.to.hostname=true

# ------------------------------------------------------------------------------
# Zookeeper:
# NOTE: IN PRODUCTION USE CASES, IT's BEST TO USE ZOOKEEPER K8S OPERATOR
# ref: https://github.com/pravega/zookeeper-operator#install-the-operator
# ------------------------------------------------------------------------------

zookeeper:
  ## If true, install the Zookeeper chart alongside Pinot
  ## ref: https://github.com/bitnami/charts/tree/master/bitnami/zookeeper
  enabled: true

  ## If the Zookeeper Chart is disabled a URL override is required to connect
  urlOverride: "my-zookeeper:2181/my-pinot"

  ## Zookeeper port
  port: 2181

  ## Configure Zookeeper resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  resources:
    requests:
      memory: "1.25Gi"

  ## Replicas
  replicaCount: 1

  ## Ongoing data directory cleanup configuration
  autopurge:
    ## The time interval (in hours) for which the purge task has to be triggered
    ## Set to a positive integer to enable the auto purging
    purgeInterval: 1

    ## The most recent snapshots amount (and corresponding transaction logs) to retain
    snapRetainCount: 5

  ## Size (in MB) for the Java Heap options (Xmx and Xms)
  ## This env var is ignored if Xmx an Xms are configured via `zookeeper.jvmFlags`
  heapSize: "1024"

  persistence:
    enabled: true
    ## The amount of PV storage allocated to each Zookeeper pod in the statefulset
    # size: "2Gi"

  ## Specify a Zookeeper imagePullPolicy
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  image:
    PullPolicy: "IfNotPresent"

  ## Pod scheduling preferences (by default keep pods within a release on separate nodes).
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## By default we don't set affinity:
  affinity: {} # Criteria by which pod label-values influence scheduling for zookeeper pods.
  # podAntiAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     - topologyKey: "kubernetes.io/hostname"
  #       labelSelector:
  #         matchLabels:
  #           release: zookeeper
  nodeSelector:
    NodeGroupType: zookeeper

  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "pinot"
      effect: "NoSchedule"
